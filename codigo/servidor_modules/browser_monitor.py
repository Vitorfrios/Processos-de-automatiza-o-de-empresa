"""
browser_monitor.py
Monitoramento do navegador - Vers√£o SIMPLIFICADA
Apenas para compatibilidade, sem verifica√ß√µes de atividade
"""

import time
from servidor_modules import config

def monitorar_navegador(port, httpd):
    """
    Monitoramento SIMPLIFICADO - sem verifica√ß√µes de porta
    Mantido apenas para compatibilidade com o c√≥digo existente
    """
    print("üîç MONITOR: Sistema de monitoramento INICIADO")
    print("   ‚Ä¢ Encerramento autom√°tico DESATIVADO")
    print("   ‚Ä¢ Servidor permanecer√° aberto at√© encerramento manual")
    print("   ‚Ä¢ Use o bot√£o 'Encerrar Servidor' na interface web")
    print("   ‚Ä¢ Ou pressione Ctrl+C neste terminal\n")
    
    # Loop simples que apenas mant√©m a thread ativa
    while config.servidor_rodando:
        try:
            time.sleep(10)  # Verifica√ß√£o a cada 10 segundos (apenas para manter a thread)
        except KeyboardInterrupt:
            print("\nMONITOR: Interrup√ß√£o recebida")
            config.servidor_rodando = False
            break
        except Exception as e:
            print(f"MONITOR: Erro inesperado: {e}")
            time.sleep(10)
    
    print("MONITOR: Thread finalizada")

# =====================
# ENDPOINT PARA REMOVER OBRA DA SESS√ÉO
# =====================

def setup_session_routes(app):
    """
    Configura as rotas de sess√£o para o Flask app
    """
    
    @app.route('/api/sessions/remove-obra/<obra_id>', methods=['DELETE'])
    def remove_obra_from_session(obra_id):
        try:
            from flask import session, jsonify
            
            # Remove o ID da obra da sess√£o
            if 'session_active' in session and 'obras' in session['session_active']:
                if obra_id in session['session_active']['obras']:
                    session['session_active']['obras'].remove(obra_id)
                    session.modified = True
                    print(f"üóëÔ∏è Obra {obra_id} removida da sess√£o")
                    
                    # For√ßa atualiza√ß√£o da sess√£o
                    return jsonify({
                        'success': True, 
                        'message': 'Obra removida da sess√£o',
                        'reload_required': True  # Flag para frontend recarregar
                    }), 200
                else:
                    return jsonify({'success': False, 'error': 'Obra n√£o encontrada na sess√£o'}), 404
            else:
                return jsonify({'success': False, 'error': 'Sess√£o n√£o encontrada'}), 404
                
        except Exception as e:
            print(f"‚ùå Erro ao remover obra {obra_id} da sess√£o: {e}")
            return jsonify({'success': False, 'error': str(e)}), 500

    @app.route('/api/sessions/check-obra/<obra_id>', methods=['GET'])
    def check_obra_in_session(obra_id):
        """
        Verifica se uma obra est√° na sess√£o
        """
        try:
            from flask import session, jsonify
            
            if 'session_active' in session and 'obras' in session['session_active']:
                exists = obra_id in session['session_active']['obras']
                return jsonify({
                    'exists': exists,
                    'obra_id': obra_id
                }), 200
            else:
                return jsonify({'exists': False, 'error': 'Sess√£o n√£o encontrada'}), 404
                
        except Exception as e:
            print(f"‚ùå Erro ao verificar obra {obra_id} na sess√£o: {e}")
            return jsonify({'exists': False, 'error': str(e)}), 500

    print("‚úÖ Rotas de sess√£o configuradas com sucesso")