"""
Monitoramento do navegador - Vers√£o Windows Compat√≠vel
"""

import time
import psutil
from servidor_modules import config, server_utils

def is_browser_connected(port):
    """
    Verifica se h√° navegadores conectados - Vers√£o Windows Compat√≠vel
    """
    try:
        browser_processes = [
            'chrome.exe', 'firefox.exe', 'msedge.exe', 
            'opera.exe', 'safari.exe', 'brave.exe',
            'iexplore.exe', 'vivaldi.exe', 'waterfox.exe'
        ]
        
        # Verifica processos de navegador (sem 'connections' no Windows)
        for proc in psutil.process_iter(['name']):
            try:
                proc_name = proc.info['name'].lower() if proc.info['name'] else ''
                
                # Verifica se √© um navegador conhecido
                if any(browser in proc_name for browser in browser_processes):
                    # M√©todo alternativo para Windows: verifica se o processo est√° ativo
                    # Em vez de verificar conex√µes, assumimos que se √© um navegador e est√° rodando, est√° conectado
                    if proc.status() == psutil.STATUS_RUNNING:
                        return True
                        
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue
                
        return False
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Aviso no monitor: {e}")
        return True  # Fail-safe: em caso de erro, mant√©m servidor ativo

def check_port_connections(port):
    """
    M√©todo alternativo: verifica conex√µes na porta via socket
    """
    try:
        import socket
        # Tenta criar uma conex√£o de teste
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(1)
            result = s.connect_ex(('localhost', port))
            return result == 0  # True se conseguiu conectar
    except:
        return False

def monitorar_navegador(port, httpd):
    """
    Monitoramento inteligente e compat√≠vel com Windows
    """
    print("üîç MONITORAMENTO ATIVO")
    print("   ‚Ä¢ Servidor permanecer√° ativo durante o uso")
    print("   ‚Ä¢ Encerramento autom√°tico ap√≥s inatividade prolongada")
    print("   ‚Ä¢ Pressione Ctrl+C para encerrar manualmente\n")
    
    # Tempo inicial mais longo para estabiliza√ß√£o
    time.sleep(config.MONITOR_START_DELAY)
    print("‚úÖ Sistema de monitoramento inicializado")
    
    tentativas_inativas = 0
    max_tentativas_inativas = 24  # 2 minutos total (24 * 5s)
    ultima_conexao_ativa = time.time()

    while config.servidor_rodando:
        try:
            # M√©todo 1: Verifica navegadores pelo processo
            navegador_ativo = is_browser_connected(port)
            
            # M√©todo 2: Verifica conex√µes na porta
            porta_ativa = check_port_connections(port)
            
            # Considera ativo se qualquer um dos m√©todos retornar True
            sistema_ativo = navegador_ativo or porta_ativa
            
            if sistema_ativo:
                # Reset contador se detectar atividade
                if tentativas_inativas > 0:
                    print("‚úÖ Atividade detectada - reiniciando contador")
                    tentativas_inativas = 0
                ultima_conexao_ativa = time.time()
            else:
                tentativas_inativas += 1
                
                tempo_inativo = time.time() - ultima_conexao_ativa
                
                if tentativas_inativas == 1:
                    print("‚è∞ Aguardando atividade...")
                elif tentativas_inativas % 6 == 0:  # A cada 30 segundos
                    print(f"   ‚è±Ô∏è  {int(tempo_inativo)} segundos sem atividade")
                
                if tentativas_inativas >= max_tentativas_inativas:
                    print(f"\nüåê SEM ATIVIDADE POR {int(tempo_inativo)} SEGUNDOS")
                    print("‚èπÔ∏è  Encerrando servidor automaticamente...")
                    break
            
            # Intervalo entre verifica√ß√µes
            time.sleep(config.MONITOR_CHECK_INTERVAL)
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  Interrup√ß√£o recebida no monitor")
            break
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro n√£o cr√≠tico no monitor: {e}")
            time.sleep(config.MONITOR_CHECK_INTERVAL)
    
    # Encerramento seguro
    if config.servidor_rodando:
        print("üíæ Finalizando servidor...")
        config.servidor_rodando = False
        server_utils.shutdown_server_async(httpd)