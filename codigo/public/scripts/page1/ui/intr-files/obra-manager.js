/**
 * =====================
 * Gerenciador de obras - obra-manager.js
 * SISTEMA CORRIGIDO COM IDs √öNICOS
 * =====================
 */

import { 
    showConfirmationModal, 
    undoDeletion,
    hideToast 
} from './modal/modal.js'

import { generateObraId } from '../../data/data-files/data-utils-core.js';
import {addNewProjectToObra} from './project-manager.js'


/**
 * Cria uma obra vazia na interface - CORRIGIDA
 * @param {string} obraName - Nome da obra
 * @param {string} obraId - ID da obra (opcional)
 */
async function createEmptyObra(obraName, obraId) {
    // ‚úÖ CORRE√á√ÉO: SEMPRE usar ID √∫nico, mesmo se fornecido (para consist√™ncia)
    const finalObraId = obraId || generateObraId();
    const obraHTML = buildObraHTML(obraName, finalObraId);
    
    console.log(`üèóÔ∏è Criando obra: ${obraName} com ID: ${finalObraId}`);
    console.log(`üìù HTML gerado:`, obraHTML.substring(0, 200) + '...');
    
    // ‚úÖ‚úÖ‚úÖ CORRE√á√ÉO CR√çTICA: Inserir no DOM e CONFIRMAR
    const inserted = await insertObraIntoDOM(obraHTML, finalObraId);
    
    if (inserted) {
        console.log(`‚úÖ Obra ${obraName} criada e INSERIDA NO DOM - ID: ${finalObraId}`);
        
        // ‚úÖ CONFIRMA√á√ÉO: Verificar se realmente est√° no DOM
        setTimeout(() => {
            const obraNoDOM = document.querySelector(`[data-obra-id="${finalObraId}"]`);
            if (obraNoDOM) {
                console.log(`‚úÖ CONFIRMADO: Obra ${finalObraId} encontrada no DOM`);
            } else {
                console.error(`‚ùå FALHA CR√çTICA: Obra ${finalObraId} N√ÉO est√° no DOM ap√≥s cria√ß√£o`);
            }
        }, 100);
    } else {
        console.error(`‚ùå FALHA: Obra ${obraName} N√ÉO FOI INSERIDA NO DOM`);
    }
    
    return inserted;
}
/**
 * Constr√≥i o HTML de uma obra
 * @param {string} obraName - Nome da obra
 * @param {string} obraId - ID √∫nico da obra
 * @returns {string} HTML da obra
 */
function buildObraHTML(obraName, obraId, hasId = false) {
  // ‚úÖ CORRE√á√ÉO: Validar ID √∫nico
  if (!obraId || obraId === 'undefined' || obraId === 'null') {
      console.error(`ERRO FALBACK (buildObraHTML) obra-manager.js [ID de obra inv√°lido: ${obraId}]`);
      obraId = generateObraId();
  }
  
  console.log(`üîç Build Obra HTML: ${obraName}, ID: ${obraId}`);

  return `
  <div class="obra-block" data-obra-id="${obraId}" data-obra-name="${obraName}">
    <div class="obra-header">
      <button class="minimizer" onclick="toggleObra('${obraId}', event)">+</button>
      <h2 class="obra-title compact-title editable-title" data-editable="true" onclick="makeEditable(this, 'obra')">${obraName}</h2>
      <div class="obra-header-spacer"><span>Adicionar campos de cadastro de empresas</span></div>
      <div class="obra-actions">
        <button class="btn btn-delete" onclick="window.deleteObra('${obraName}', '${obraId}')">Remover Obra</button>
      </div>
    </div>

    
    <div class="obra-content collapsed" id="obra-content-${obraId}">
      <div class="projetc-header-record very-dark">
          <span>Adicionar campos de cadastro de empresas</span>
      </div>
      <div class="projects-container" id="projects-${obraId}">

      </div>
      <div class="add-project-section">
        <button class="btn btn-add-secondary" onclick="addNewProjectToObra('${obraId}')">+ Adicionar Projeto</button>
      </div>
      ${buildObraActionsFooter(obraId, obraName, hasId)} 
 
    </div>
  </div>
  `;
}

/**
 * Constr√≥i o rodap√© de a√ß√µes da obra
 * @param {string} obraName - Nome da obra
 * @param {boolean} hasId - Se a obra j√° foi SALVA no servidor
 * @returns {string} HTML do rodap√© de a√ß√µes
 */
function buildObraActionsFooter(obraId, obraName, hasId = false) {
  const buttonText = hasId ? "Atualizar Obra" : "Salvar Obra";
  const buttonClass = hasId ? "btn-update" : "btn-save";

  console.log(`üîß Build Obra Footer: ${obraName}, ID: ${obraId}, HasId: ${hasId}, Button: ${buttonText}`);

  // ‚úÖ CORRE√á√ÉO: Usar obraId em TODAS as chamadas
  return `
    <div class="obra-actions-footer">
      <button class="btn btn-verify" onclick="verifyObraData('${obraId}')">Verificar Dados</button>
      <button class="btn ${buttonClass}" onclick="event.preventDefault(); saveOrUpdateObra('${obraId}')">${buttonText}</button>      
      <button class="btn btn-download" onclick="downloadPDF('${obraId}')">Baixar PDF</button>
      <button class="btn btn-download" onclick="downloadWord('${obraId}')">Baixar Word</button>
    </div>
  `;
}

/**
 * Insere o HTML da obra no DOM - CORRIGIDA
 * @param {string} obraHTML - HTML da obra a ser inserida
 * @param {string} obraId - ID da obra para debug
 * @returns {boolean} True se inserido com sucesso
 */
async function insertObraIntoDOM(obraHTML, obraId) {
    console.log(`üì§ Inserindo obra no DOM: ${obraId}`);
    
    const projectsContainer = document.getElementById("projects-container");
    
    if (!projectsContainer) {
        console.error('‚ùå Container de projetos n√£o encontrado');
        
        // ‚úÖ FALLBACK: Tentar criar o container
        console.log('üîÑ Tentando criar projects-container...');
        const mainContent = document.querySelector('main, body');
        if (mainContent) {
            const newContainer = document.createElement('div');
            newContainer.id = 'projects-container';
            newContainer.innerHTML = '<!-- Hierarquia: Obra ‚Üí Projeto ‚Üí Sala -->';
            mainContent.appendChild(newContainer);
            console.log('‚úÖ projects-container criado');
            return insertObraIntoDOM(obraHTML, obraId); // Tentar novamente
        }
        
        return false;
    }
    
    console.log(`‚úÖ Container encontrado, inserindo obra ${obraId}...`);
    console.log(`üì¶ Container antes:`, projectsContainer.children.length, 'elementos');
    
    try {
        projectsContainer.insertAdjacentHTML("beforeend", obraHTML);
        
        // ‚úÖ CONFIRMAR inser√ß√£o
        setTimeout(() => {
            const obraInserida = document.querySelector(`[data-obra-id="${obraId}"]`);
            if (obraInserida) {
                console.log(`‚úÖ Obra ${obraId} INSERIDA COM SUCESSO no container`);
                console.log(`üì¶ Container depois:`, projectsContainer.children.length, 'elementos');
            } else {
                console.error(`‚ùå FALHA: Obra ${obraId} N√ÉO FOI INSERIDA no container`);
            }
        }, 50);
        
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao inserir obra no DOM:', error);
        return false;
    }
}

/**
 * Atualiza o bot√£o de uma obra ap√≥s salvamento - CORRIGIDA (APENAS ID)
 * @param {string} obraName - Nome da obra
 * @param {string} obraId - ID da obra salva
 */
function updateObraButtonAfterSave(obraName, obraId) {
    console.log(`üîÑ Atualizando bot√£o da obra: ${obraName} (${obraId})`);
    
    // ‚úÖ BUSCAR APENAS POR ID √öNICO
    const obraBlock = document.querySelector(`[data-obra-id="${obraId}"]`);
    if (!obraBlock) {
        console.error(`‚ùå Obra com ID ${obraId} n√£o encontrada para atualizar bot√£o`);
        return; // ‚ùå NUNCA tentar buscar por nome
    }

    // ‚úÖ ATUALIZAR ID NO DATASET (para garantir consist√™ncia)
    obraBlock.dataset.obraId = obraId;

    // ‚úÖ BUSCAR CONTE√öDO DA OBRA APENAS POR ID
    const obraContent = document.getElementById(`obra-content-${obraId}`);
    if (!obraContent) {
        console.error(`‚ùå Conte√∫do da obra ${obraId} n√£o encontrado`);
        return;
    }

    // ‚úÖ BUSCAR RODAP√â APENAS DENTRO DA OBRA ESPEC√çFICA
    const oldFooter = obraContent.querySelector('.obra-actions-footer');
    if (!oldFooter) {
        console.error(`‚ùå Rodap√© n√£o encontrado na obra ${obraId}`);
        return;
    }

    // ‚úÖ CORRE√á√ÉO CR√çTICA: Atualizar APENAS o bot√£o, preservando o container de projetos
    const saveButton = oldFooter.querySelector('.btn-save, .btn-update');
    if (saveButton) {
        saveButton.textContent = "Atualizar Obra";
        saveButton.className = "btn btn-update";
        saveButton.setAttribute('onclick', `event.preventDefault(); saveOrUpdateObra('${obraId}')`);
        console.log(`‚úÖ Bot√£o atualizado para: "Atualizar Obra" (ID: ${obraId})`);
    } else {
        console.error(`‚ùå Bot√£o de salvar n√£o encontrado na obra ${obraId}`);
    }

    // ‚úÖ VERIFICAR se o container de projetos ainda existe (apenas por ID)
    const projectsContainer = document.getElementById(`projects-${obraId}`);
    if (!projectsContainer) {
        console.error(`‚ùå CR√çTICO: Container de projetos PERDIDO na obra ${obraId}!`);
    }
}

/**
 * Fun√ß√£o principal de deletar obra (ATUALIZADA)
 */
async function deleteObra(obraName, obraId) {
  // ‚úÖ CORRE√á√ÉO: Buscar APENAS por ID √∫nico
  const obraBlock = document.querySelector(`[data-obra-id="${obraId}"]`)
  if (!obraBlock) {
    console.error(`‚ùå Obra com ID ${obraId} n√£o encontrada`)
    return
  }

  // Mostra o modal personalizado em vez do confirm b√°sico
  showConfirmationModal(obraName, obraId, obraBlock)
}

/**
 * Obt√©m o pr√≥ximo n√∫mero de obra
 * @returns {number} Pr√≥ximo n√∫mero dispon√≠vel para obra
 */
function getNextObraNumber() {
  const obraBlocks = document.querySelectorAll('.obra-block')
  const obraNumbers = Array.from(obraBlocks).map(obra => {
    const obraName = obra.dataset.obraName
    const match = obraName.match(/Obra(\d+)/)
    return match ? parseInt(match[1]) : 0
  })

  const maxNumber = Math.max(0, ...obraNumbers)
  return maxNumber + 1
}

/**
 * Adiciona uma nova obra √† interface
 */
async function addNewObra() {
  try {
    const obraNumber = getNextObraNumber();
    const obraName = `Obra${obraNumber}`;
    
    // ‚úÖ CORRE√á√ÉO: Gerar ID √∫nico para nova obra
    const obraId = generateObraId();

    console.log(`üèóÔ∏è Criando nova obra: ${obraName} com ID: ${obraId}`);
    createEmptyObra(obraName, obraId);
    console.log(`‚úÖ ${obraName} adicionada com ID √∫nico: ${obraId}`);

    // ‚úÖ‚úÖ‚úÖ AGUARDAR um pouco para o DOM ser atualizado antes de criar projeto
    setTimeout(async () => {
        console.log(`üîÑ Criando projeto e sala autom√°ticos para ${obraName}`);
        if (typeof window.addNewProjectToObra === 'function') {
            await window.addNewProjectToObra(obraId);
            console.log(`‚úÖ Projeto e sala autom√°ticos criados para ${obraName}`);
        } else {
            console.error('‚ùå addNewProjectToObra n√£o dispon√≠vel');
        }
    }, 500);

  } catch (error) {
    console.error("‚ùå Erro ao adicionar nova obra:", error);
    alert("Erro ao criar nova obra. Verifique o console para detalhes.");
  }
}




// ===== EXPORTA√á√ïES E CONFIGURA√á√ÉO GLOBAL =====

// Torne as fun√ß√µes globais para o HTML poder acessar
window.deleteObra = deleteObra
window.addNewObra = addNewObra
window.undoDeletion = undoDeletion
window.hideToast = hideToast

// Exporta√ß√µes para m√≥dulos
export {
    createEmptyObra,
    buildObraHTML,
    buildObraActionsFooter,
    insertObraIntoDOM,
    updateObraButtonAfterSave,
    deleteObra,
    getNextObraNumber,
    addNewObra,
    generateObraId
}