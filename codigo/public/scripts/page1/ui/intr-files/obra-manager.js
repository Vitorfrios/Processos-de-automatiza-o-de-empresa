/**
 * =====================
 * Gerenciador de obras - obra-manager.js
 * SISTEMA CORRIGIDO COM IDs √öNICOS
 * =====================
 */

import { 
    showConfirmationModal, 
    undoDeletion,
    hideToast 
} from './modal/modal.js'

/**
 * Cria uma obra vazia na interface
 * @param {string} obraName - Nome da obra
 * @param {string} obraId - ID da obra (opcional)
 */
function createEmptyObra(obraName, obraId) {
    // ‚úÖ CORRE√á√ÉO: SEMPRE usar ID √∫nico, mesmo se fornecido (para consist√™ncia)
    const finalObraId = obraId || generateObraId();
    const obraHTML = buildObraHTML(obraName, finalObraId);
    insertObraIntoDOM(obraHTML);
    console.log(`üèóÔ∏è Obra ${obraName} criada - ID: ${finalObraId}`);
}

/**
 * Constr√≥i o HTML de uma obra
 * @param {string} obraName - Nome da obra
 * @param {string} obraId - ID √∫nico da obra
 * @returns {string} HTML da obra
 */
function buildObraHTML(obraName, obraId) {
    // ‚úÖ CORRE√á√ÉO: Validar ID √∫nico
    if (!obraId || obraId === 'undefined' || obraId === 'null') {
        console.error(`ERRO FALBACK (buildObraHTML) obra-manager.js [ID de obra inv√°lido: ${obraId}]`);
        obraId = generateObraId();
    }
    
    console.log(`üîç Build Obra HTML: ${obraName}, ID: ${obraId}`);

    return `
    <div class="obra-block" data-obra-id="${obraId}" data-obra-name="${obraName}">
      <div class="obra-header">
        <!-- ‚úÖ CORRE√á√ÉO: usar APENAS obraId para toggle -->
        <button class="minimizer" onclick="toggleObra('${obraId}', event)">+</button>
        <h2 class="obra-title editable-title" data-editable="true" onclick="makeEditable(this, 'obra')">${obraName}</h2>
        <div class="obra-actions">
          <button class="btn btn-delete" onclick="window.deleteObra('${obraName}', '${obraId}')">Remover Obra</button>
        </div>
      </div>
      <!-- ‚úÖ CORRE√á√ÉO: usar APENAS obraId no conte√∫do -->
      <div class="obra-content collapsed" id="obra-content-${obraId}">
        <div class="projects-container" id="projects-${obraId}">
          <p class="empty-message">Adicione projetos a esta obra...</p>
        </div>
        <div class="add-project-section">
          <!-- ‚úÖ CORRE√á√ÉO: Passar obraId para a fun√ß√£o -->
          <button class="btn btn-add-secondary" onclick="addNewProjectToObra('${obraId}')">+ Adicionar Projeto</button>
        </div>
        ${buildObraActionsFooter(obraName, !!obraId)}
      </div>
    </div>
  `;
}

/**
 * Constr√≥i o rodap√© de a√ß√µes da obra
 * @param {string} obraName - Nome da obra
 * @param {boolean} hasId - Se a obra j√° foi SALVA no servidor
 * @returns {string} HTML do rodap√© de a√ß√µes
 */
function buildObraActionsFooter(obraName, hasId = false) {
  const buttonText = hasId ? "Atualizar Obra" : "Salvar Obra"
  const buttonClass = hasId ? "btn-update" : "btn-save"

  console.log(`üîß Build Obra Footer: ${obraName}, HasId: ${hasId}, Button: ${buttonText}`)

  return `
    <div class="obra-actions-footer">
      <button class="btn btn-verify" onclick="verifyObraData('${obraName}')">Verificar Dados</button>
      <button class="btn ${buttonClass}" onclick="event.preventDefault(); saveOrUpdateObra('${obraName}')">${buttonText}</button>
      <button class="btn btn-download" onclick="downloadPDF('${obraName}')">Baixar PDF</button>
      <button class="btn btn-download" onclick="downloadWord('${obraName}')">Baixar Word</button>
    </div>
  `
}

/**
 * Insere o HTML da obra no DOM
 * @param {string} obraHTML - HTML da obra a ser inserida
 */
function insertObraIntoDOM(obraHTML) {
  const projectsContainer = document.getElementById("projects-container")
  if (!projectsContainer) {
    console.error('‚ùå Container de projetos n√£o encontrado')
    return
  }
  projectsContainer.insertAdjacentHTML("beforeend", obraHTML)
}

/**
 * Atualiza o bot√£o de uma obra ap√≥s salvamento
 * @param {string} obraName - Nome da obra
 * @param {string} obraId - ID da obra salva
 */
function updateObraButtonAfterSave(obraName, obraId) {
  // ‚úÖ CORRE√á√ÉO: Buscar APENAS por ID √∫nico
  const obraBlock = document.querySelector(`[data-obra-id="${obraId}"]`)
  if (!obraBlock) {
    console.error(`‚ùå Obra com ID ${obraId} n√£o encontrada para atualizar bot√£o`)
    return
  }

  obraBlock.dataset.obraId = obraId

  const obraContent = document.getElementById(`obra-content-${obraId}`)
  if (obraContent) {
    const oldFooter = obraContent.querySelector('.obra-actions-footer')
    if (oldFooter) {
      const newFooter = buildObraActionsFooter(obraName, true)
      oldFooter.outerHTML = newFooter
      console.log(`üîÑ Bot√£o da obra ${obraName} ATUALIZADO para "Atualizar Obra" (ID: ${obraId})`)
    } else {
      console.error(`‚ùå Rodap√© n√£o encontrado na obra ${obraName}`)
    }
  } else {
    console.error(`‚ùå Conte√∫do da obra ${obraId} n√£o encontrado`)
  }
}

/**
 * Fun√ß√£o principal de deletar obra (ATUALIZADA)
 */
async function deleteObra(obraName, obraId) {
  // ‚úÖ CORRE√á√ÉO: Buscar APENAS por ID √∫nico
  const obraBlock = document.querySelector(`[data-obra-id="${obraId}"]`)
  if (!obraBlock) {
    console.error(`‚ùå Obra com ID ${obraId} n√£o encontrada`)
    return
  }

  // Mostra o modal personalizado em vez do confirm b√°sico
  showConfirmationModal(obraName, obraId, obraBlock)
}

/**
 * Obt√©m o pr√≥ximo n√∫mero de obra
 * @returns {number} Pr√≥ximo n√∫mero dispon√≠vel para obra
 */
function getNextObraNumber() {
  const obraBlocks = document.querySelectorAll('.obra-block')
  const obraNumbers = Array.from(obraBlocks).map(obra => {
    const obraName = obra.dataset.obraName
    const match = obraName.match(/Obra(\d+)/)
    return match ? parseInt(match[1]) : 0
  })

  const maxNumber = Math.max(0, ...obraNumbers)
  return maxNumber + 1
}

/**
 * Adiciona uma nova obra √† interface
 */
async function addNewObra() {
  try {
    const obraNumber = getNextObraNumber()
    const obraName = `Obra${obraNumber}`
    
    // ‚úÖ CORRE√á√ÉO: Gerar ID √∫nico para nova obra
    const obraId = generateObraId()

    console.log(`üèóÔ∏è Criando nova obra: ${obraName} com ID: ${obraId}`)
    createEmptyObra(obraName, obraId)
    console.log(`‚úÖ ${obraName} adicionada com ID √∫nico: ${obraId}`)

  } catch (error) {
    console.error("‚ùå Erro ao adicionar nova obra:", error)
    alert("Erro ao criar nova obra. Verifique o console para detalhes.")
  }
}

// =============================================================================
// SISTEMA DE IDs √öNICOS PARA OBRAS
// =============================================================================

/**
 * Gera ID √∫nico para obra - CURTO E √öNICO
 * @returns {string} ID √∫nico da obra
 */
function generateObraId() {
    const letters = 'abcdefghjkmnpqrstwxyz'
    const randomLetter = letters[Math.floor(Math.random() * letters.length)]
    const randomNum = Math.floor(Math.random() * 90) + 10
    return `obra_${randomLetter}${randomNum}`
}

// ===== EXPORTA√á√ïES E CONFIGURA√á√ÉO GLOBAL =====

// Torne as fun√ß√µes globais para o HTML poder acessar
window.deleteObra = deleteObra
window.addNewObra = addNewObra
window.undoDeletion = undoDeletion
window.hideToast = hideToast

// Exporta√ß√µes para m√≥dulos
export {
    createEmptyObra,
    buildObraHTML,
    buildObraActionsFooter,
    insertObraIntoDOM,
    updateObraButtonAfterSave,
    deleteObra,
    getNextObraNumber,
    addNewObra,
    generateObraId
}