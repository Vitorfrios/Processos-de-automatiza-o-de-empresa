// server.js - CORRE√á√ÉO: IMPORTAR FUN√á√ïES DE UI

import { SESSION_STORAGE_KEY, REMOVED_PROJECTS_KEY, NORMALIZATION_DONE_KEY, SESSION_ACTIVE_KEY } from "../config/config.js"
import { ensureStringId } from "../utils/utils.js"

// ‚úÖ CORRE√á√ÉO: IMPORTAR FUN√á√ïES DE CRIA√á√ÉO DE OBRAS
import { createEmptyObra, createEmptyProject, createEmptyRoom } from "../ui/interface.js"

// CONSTANTES PARA CONTROLE DE SESS√ÉO - ATUALIZADAS PARA OBRAS
const SESSION_OBRAS = 'session_obras';

/**
 * Verifica se a sess√£o est√° ativa
 */
function isSessionActive() {
    return sessionStorage.getItem(SESSION_ACTIVE_KEY) === 'true';
}

/**
 * Define o estado da sess√£o
 */
function setSessionActive(active) {
    sessionStorage.setItem(SESSION_ACTIVE_KEY, active.toString());
    
    if (!active) {
        clearSessionObras();
        clearRenderedObras();
    }
}

/**
 * Obt√©m a lista de OBRAS da sess√£o atual - ATUALIZADO
 */
function getSessionObras() {
    if (!isSessionActive()) return [];
    
    const stored = sessionStorage.getItem(SESSION_OBRAS);
    return stored ? JSON.parse(stored) : [];
}

/**
 * Define a lista de OBRAS da sess√£o atual - ATUALIZADO
 */
function setSessionObras(obraIds) {
    if (!isSessionActive()) return;
    
    sessionStorage.setItem(SESSION_OBRAS, JSON.stringify(obraIds));
}

/**
 * Adiciona uma OBRA √† lista da sess√£o - ATUALIZADO
 */
function addObraToSession(obraId) {
    if (!isSessionActive()) return;
    
    const sessionObras = getSessionObras();
    if (!sessionObras.includes(obraId)) {
        sessionObras.push(obraId);
        setSessionObras(sessionObras);
    }
}

/**
 * Remove uma OBRA da lista da sess√£o - ATUALIZADO
 */
function removeObraFromSessionLocal(obraId) {
    if (!isSessionActive()) return;
    
    const sessionObras = getSessionObras();
    const updatedObras = sessionObras.filter(id => id !== obraId);
    setSessionObras(updatedObras);
}

/**
 * Limpa todas as OBRAS da sess√£o local - ATUALIZADO
 */
function clearSessionObras() {
    sessionStorage.removeItem(SESSION_OBRAS);
    sessionStorage.removeItem(REMOVED_PROJECTS_KEY);
}

/**
 * Remove todas as OBRAS renderizadas da tela - ATUALIZADO
 */
function clearRenderedObras() {
    const obrasContainer = document.getElementById("projects-container");
    if (!obrasContainer) return;
    
    const obras = obrasContainer.querySelectorAll('.obra-block');
    obras.forEach(obra => obra.remove());
    
    window.GeralCount = 0;
}

/**
 * Inicializa o contador global de OBRAS - ATUALIZADO
 */
function initializeGeralCount() {
    if (!isSessionActive()) {
        window.GeralCount = 0;
        return 0;
    }
    
    if (typeof window.GeralCount === "undefined" || window.GeralCount === null) {
        window.GeralCount = 0;
    }
    return window.GeralCount;
}

initializeGeralCount()

/**
 * Remove todas as OBRAS base do HTML - ATUALIZADO
 */
function removeBaseObraFromHTML() {
    const obrasContainer = document.getElementById("projects-container")
    if (!obrasContainer) return

    const existingObras = obrasContainer.querySelectorAll(".obra-block")
    existingObras.forEach((obra) => obra.remove())
}

/**
 * Carrega OBRAS salvas do servidor para a sess√£o atual - VERS√ÉO CORRIGIDA COM DEBUG
 */
async function loadObrasFromServer() {
    console.log("üîÑ Carregando OBRAS do servidor...");
    
    if (!isSessionActive()) {
        console.log("üì≠ Sess√£o n√£o est√° ativa - nenhuma obra ser√° carregada");
        console.log("üîç Debug: isSessionActive() =", isSessionActive());
        return;
    }
    
    try {
        const sessionResponse = await fetch('/api/session-obras');
        if (!sessionResponse.ok) {
            throw new Error('Falha ao carregar sess√£o de obras');
        }
        
        const sessionData = await sessionResponse.json();
        const obraIds = sessionData.obras || [];
        
        console.log(`üìä Sess√£o com ${obraIds.length} obras:`, obraIds);
        
        if (obraIds.length === 0) {
            console.log("üì≠ Nenhuma obra na sess√£o atual");
            return;
        }

        // ‚úÖ Buscar obras da sess√£o
        const obrasResponse = await fetch('/obras');
        if (!obrasResponse.ok) {
            throw new Error('Falha ao carregar obras');
        }

        const obrasDaSessao = await obrasResponse.json();
        
        console.log(`üéØ Encontradas ${obrasDaSessao.length} obras da sess√£o para carregar`);

        // ‚úÖ DEBUG: Verificar se o container existe
        const projectsContainer = document.getElementById("projects-container");
        console.log(`üîç Container de obras:`, projectsContainer ? '‚úÖ ENCONTRADO' : '‚ùå N√ÉO ENCONTRADO');
        if (projectsContainer) {
            console.log(`üìä Obras no container antes:`, projectsContainer.querySelectorAll('.obra-block').length);
        }

        // Limpar interface
        removeBaseObraFromHTML();
        
        // ‚úÖ CORRE√á√ÉO: AGORA AS FUN√á√ïES EST√ÉO DISPON√çVEIS
        console.log(`üîç createEmptyObra dispon√≠vel:`, typeof createEmptyObra === 'function');
        console.log(`üîç createEmptyProject dispon√≠vel:`, typeof createEmptyProject === 'function');
        console.log(`üîç createEmptyRoom dispon√≠vel:`, typeof createEmptyRoom === 'function');
        
        // Renderizar cada obra
        let loadedCount = 0;
        for (const obraData of obrasDaSessao) {
            console.log(`üîÑ Renderizando obra: ${obraData.nome} (ID: ${obraData.id})`);
            
            try {
                // ‚úÖ CORRE√á√ÉO: AGORA createEmptyObra EST√Å DISPON√çVEL
                if (typeof createEmptyObra === 'function') {
                    console.log(`üéØ Chamando createEmptyObra para: ${obraData.nome}`);
                    
                    // Criar obra na interface
                    createEmptyObra(obraData.nome, obraData.id);
                    
                    // Adicionar projetos da obra
                    if (obraData.projetos && obraData.projetos.length > 0) {
                        obraData.projetos.forEach(projeto => {
                            if (typeof createEmptyProject === 'function') {
                                createEmptyProject(obraData.nome, projeto.nome, projeto.id);
                                
                                // Adicionar salas do projeto
                                if (projeto.salas && projeto.salas.length > 0) {
                                    projeto.salas.forEach(sala => {
                                        if (typeof createEmptyRoom === 'function') {
                                            createEmptyRoom(obraData.nome, projeto.nome, sala.nome, sala.id);
                                        }
                                    });
                                }
                            }
                        });
                    }
                    
                    loadedCount++;
                    console.log(`‚úÖ Obra ${obraData.nome} processada com sucesso`);
                } else {
                    console.error(`‚ùå createEmptyObra n√£o √© uma fun√ß√£o`);
                }
            } catch (error) {
                console.error(`üí• ERRO ao criar obra ${obraData.nome}:`, error);
            }
        }
        
        // ‚úÖ DEBUG FINAL: Verificar quantas obras foram realmente criadas
        setTimeout(() => {
            const obrasCriadas = document.querySelectorAll('.obra-block');
            console.log(`üìä DEBUG FINAL: ${obrasCriadas.length} obra(s) criada(s) no DOM`);
            obrasCriadas.forEach((obra, index) => {
                console.log(`  ${index + 1}. ${obra.dataset.obraName} (ID: ${obra.dataset.obraId})`);
            });
            
            if (obrasCriadas.length > 0) {
                console.log("üéâ OBRAS CARREGADAS COM SUCESSO NA INTERFACE!");
            } else {
                console.log("‚ùå NENHUMA OBRA FOI CRIADA NA INTERFACE");
            }
        }, 500);
        
        console.log(`‚úÖ ${loadedCount} obra(s) da sess√£o processadas`);
        
    } catch (error) {
        console.error("‚ùå Erro ao carregar obras da sess√£o:", error);
    }
}

/**
 * Incrementa o contador global de OBRAS - ATUALIZADO
 */
function incrementGeralCount() {
    if (!isSessionActive()) return 0;
    
    initializeGeralCount()
    window.GeralCount++
    return window.GeralCount
}

/**
 * Decrementa o contador global de OBRAS - ATUALIZADO
 */
function decrementGeralCount() {
    if (!isSessionActive()) return 0;
    
    initializeGeralCount()

    if (window.GeralCount > 0) {
        window.GeralCount--

        const existingObras = document.querySelectorAll(".obra-block")

        if (window.GeralCount === 0 && existingObras.length === 0) {
            // N√£o cria obra base automaticamente
        } else if (window.GeralCount === 0 && existingObras.length > 0) {
            window.GeralCount = existingObras.length
        }
    }
    return window.GeralCount
}

/**
 * Retorna o valor atual do contador global
 */
function getGeralCount() {
    initializeGeralCount()
    return window.GeralCount
}

/**
 * Reseta a l√≥gica de exibi√ß√£o de OBRAS - ATUALIZADO
 */
function resetDisplayLogic() {
    setSessionActive(false);
    clearSessionObras();
    clearRenderedObras();
    
    sessionStorage.removeItem(SESSION_STORAGE_KEY)
    sessionStorage.removeItem(REMOVED_PROJECTS_KEY)
    window.GeralCount = 0
}

/**
 * Inicia uma nova sess√£o - CORRE√á√ÉO: AGORA S√ì √â CHAMADA MANUALMENTE
 */
async function startNewSession() {
    // ‚úÖ CORRE√á√ÉO: Esta fun√ß√£o agora s√≥ √© chamada quando o usu√°rio salva a primeira obra
    clearSessionObras();
    clearRenderedObras();
    
    setSessionActive(true);
    window.GeralCount = 0;
    
    console.log("üÜï Nova sess√£o iniciada pelo usu√°rio");
}

/**
 * Fun√ß√£o NOVA: Inicia sess√£o quando usu√°rio salva primeira obra
 */
async function startSessionOnFirstSave() {
    if (!isSessionActive()) {
        console.log("üÜï Iniciando sess√£o na primeira obra salva");
        await startNewSession();
        return true;
    }
    return false;
}

/**
 * Encerra a sess√£o atual - FUN√á√ÉO PRINCIPAL DO BOT√ÉO "ENCERRAR SERVIDOR"
 */
async function shutdownManual() {
    if (!confirm('Tem certeza que deseja encerrar o servidor? TODAS as sess√µes ser√£o apagadas.')) {
        return;
    }
    
    console.log("üî¥ ENCERRANDO SERVIDOR E SESS√ïES...");
    
    try {
        // 1. Limpa sess√µes no backend
        console.log("üîÑ Limpando sess√µes...");
        const sessionsResponse = await fetch('/api/sessions/shutdown', {
            method: 'POST'
        });
        
        if (!sessionsResponse.ok) {
            throw new Error('Falha ao limpar sess√µes');
        }
        
        const sessionsResult = await sessionsResponse.json();
        console.log("‚úÖ Sess√µes limpas:", sessionsResult);
        
        // 2. Limpa interface
        setSessionActive(false);
        clearSessionObras();
        clearRenderedObras();
        window.GeralCount = 0;
        
        // 3. Encerra servidor e recebe instru√ß√£o para fechar
        console.log("üîÑ Encerrando servidor...");
        const shutdownResponse = await fetch('/api/shutdown', {
            method: 'POST'
        });
        
        if (shutdownResponse.ok) {
            const result = await shutdownResponse.json();
            console.log("üì≠ Comando de shutdown enviado:", result);
            
            // ‚úÖ Mostra mensagem elegante
            const message = document.createElement('div');
            message.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.85);
                color: #fff;
                display: flex;
                justify-content: center;
                align-items: center;
                z-index: 9999;
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                text-align: center;
                backdrop-filter: blur(4px);
                animation: fadeIn 0.3s ease-out forwards;
            `;

            message.innerHTML = `
                <div style="
                    display: flex; 
                    flex-direction: column; 
                    align-items: center; 
                    gap: 15px;
                ">
                    <div style="
                        font-size: 64px; 
                        margin-bottom: 10px; 
                        color: #ff4c4c;
                        animation: pulse 1s infinite alternate;
                    ">‚úÖ</div>
                    <div style="font-size: 28px; font-weight: bold;">Servidor encerrado</div>
                    <div style="
                        font-size: 16px; 
                        margin-top: 5px; 
                        opacity: 0.7;
                    ">Esta janela fechar√° automaticamente</div>
                </div>
            `;
            document.body.innerHTML = ''; // Limpa toda a p√°gina
            document.body.appendChild(message);
            
            // ‚úÖ Fecha a janela ap√≥s o tempo especificado pelo Python
            const closeDelay = result.close_delay || 2000; // 3 segundos padr√£o
            console.log(`‚è∞ Fechando janela em ${closeDelay}ms...`);
            
            setTimeout(() => {
                console.log("üö™ Fechando janela...");
                window.close();
                // Fallback se window.close n√£o funcionar
                if (!window.closed) {
                    document.body.innerHTML = `
                        <div style="padding: 20px; text-align: center;">
                            <h1>‚úÖ Servidor Encerrado</h1>
                            <p>Voc√™ pode fechar esta aba manualmente.</p>
                        </div>
                    `;
                }
            }, closeDelay);
        }
        
    } catch (error) {
        console.error('‚ùå Erro no shutdown:', error);
        // Fecha ap√≥s 3 segundos mesmo com erro
        setTimeout(() => {
            window.close();
        }, 3000);
    }
}

/**
 * Remove uma OBRA individual da sess√£o (BACKEND) - ATUALIZADO
 */
async function removeObraFromSession(obraId) {
    if (!isSessionActive()) return;
    
    try {
        const response = await fetch(`/api/sessions/remove-project/${obraId}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) {
            throw new Error('Falha ao remover obra da sess√£o no backend');
        }
        
        // Remove tamb√©m da sess√£o local
        removeObraFromSessionLocal(obraId);
        
        console.log(`üóëÔ∏è Obra ${obraId} removida da sess√£o`);
        return await response.json();
    } catch (error) {
        console.error('‚ùå Erro ao remover obra da sess√£o:', error);
        throw error;
    }
}

/**
 * Garante que apenas uma sess√£o esteja ativa por vez
 */
async function ensureSingleActiveSession() {
    try {
        const response = await fetch('/api/sessions/ensure-single', {
            method: 'POST'
        });
        
        if (!response.ok) {
            throw new Error('Falha ao configurar sess√£o √∫nica');
        }
        
        const result = await response.json();
        console.log("‚úÖ Sess√£o √∫nica configurada:", result);
        return result;
    } catch (error) {
        console.error('‚ùå Erro ao configurar sess√£o √∫nica:', error);
        throw error;
    }
}

/**
 * Salva o ID da primeira OBRA da sess√£o - ATUALIZADO
 */
function saveFirstObraIdOfSession(obraId) {
    if (!isSessionActive()) return;
    
    const existingId = sessionStorage.getItem(SESSION_STORAGE_KEY)
    if (!existingId) {
        const idAsInteger = ensureStringId(obraId)
        if (idAsInteger !== null) {
            sessionStorage.setItem(SESSION_STORAGE_KEY, idAsInteger.toString())
            addObraToSession(idAsInteger);
            incrementGeralCount()
        }
    }
}

/**
 * Adiciona uma OBRA √† lista de removidas - ATUALIZADO
 */
function addObraToRemovedList(obraId) {
    if (!isSessionActive()) return;
    
    obraId = ensureStringId(obraId)

    const removedList = getRemovedObrasList()

    if (!removedList.includes(obraId)) {
        removedList.push(obraId)
        sessionStorage.setItem(REMOVED_PROJECTS_KEY, JSON.stringify(removedList))
        removeObraFromSession(obraId);
        decrementGeralCount()
    }
}

/**
 * Retorna a lista de OBRAS removidas - ATUALIZADO
 */
function getRemovedObrasList() {
    const stored = sessionStorage.getItem(REMOVED_PROJECTS_KEY)
    return stored ? JSON.parse(stored) : []
}

/**
 * Verifica se uma OBRA foi removida - ATUALIZADO
 */
function isObraRemoved(obraId) {
    const removedList = getRemovedObrasList()
    return removedList.includes(obraId)
}

/**
 * Inicializa a sess√£o automaticamente quando o sistema carrega - CORRE√á√ÉO: N√ÉO INICIA AUTOMATICAMENTE
 */
async function initializeSession() {
    console.log("üîÑ Verificando sess√£o...");
    
    if (!isSessionActive()) {
        console.log("üì≠ Sess√£o n√£o est√° ativa - aguardando a√ß√£o do usu√°rio");
        return;
    }
    
    console.log("‚úÖ Sess√£o est√° ativa - carregando obras existentes");
    await loadObrasFromServer();
}

window.shutdownManual = shutdownManual;

// Exporta√ß√µes atualizadas - AGORA TRABALHA COM OBRAS
export {
    loadObrasFromServer,
    removeBaseObraFromHTML,
    saveFirstObraIdOfSession,
    addObraToRemovedList,
    getRemovedObrasList,
    isObraRemoved,
    resetDisplayLogic,
    incrementGeralCount,
    decrementGeralCount,
    getGeralCount,
    isSessionActive,
    setSessionActive,
    startNewSession,
    startSessionOnFirstSave,
    getSessionObras,
    addObraToSession,
    removeObraFromSession,
    shutdownManual,
    ensureSingleActiveSession,
    initializeSession
}