import { loadMachinesData } from './machinesBuilder.js'
import { updateElementText, removeEmptyMessage, showEmptyMessage } from './utilities.js'

/**
 * Adiciona uma nova m√°quina de climatiza√ß√£o √† sala especificada
 * Carrega dados das m√°quinas e constr√≥i a interface HTML
 * @param {string} roomId - ID da sala onde a m√°quina ser√° adicionada
 */
async function addMachine(roomId) {
    const machinesContainer = document.getElementById(`machines-${roomId}`);
    const machineCount = machinesContainer.querySelectorAll(".climatization-machine").length + 1;

    removeEmptyMessage(machinesContainer);

    console.log(`‚ûï Adicionando m√°quina ${machineCount} √† sala ${roomId}`);

    try {
         if (!window.machinesData || window.machinesData.length === 0) {
            console.log("üîÑ Cache n√£o encontrado, carregando dados das m√°quinas...");
            await loadMachinesData();
        }

        if (!window.machinesData || window.machinesData.length === 0) {
            throw new Error("Nenhum dado de m√°quina dispon√≠vel ap√≥s carregamento");
        }

        const machineHTML = buildClimatizationMachineHTML(machineCount, window.machinesData);
        machinesContainer.insertAdjacentHTML("beforeend", machineHTML);
        
        console.log(`‚úÖ M√°quina ${machineCount} adicionada √† sala ${roomId}`);

    } catch (error) {
        console.error("‚ùå Erro ao adicionar m√°quina:", error);

        const fallbackHTML = buildFallbackMachineHTML(machineCount);
        machinesContainer.insertAdjacentHTML("beforeend", fallbackHTML);
    }
}

/**
 * Constr√≥i o HTML completo para uma m√°quina de climatiza√ß√£o
 * Inclui cabe√ßalho, formul√°rio de configura√ß√£o e se√ß√£o de op√ß√µes
 * @param {number} machineCount - N√∫mero sequencial da m√°quina
 * @param {Array} machines - Lista de m√°quinas dispon√≠veis
 * @returns {string} HTML da m√°quina de climatiza√ß√£o
 */
function buildClimatizationMachineHTML(machineCount, machines) {
    const machineTypes = machines.map((m) => m.type);

    return `
        <div class="climatization-machine" data-machine-index="${machineCount}">
            <div class="machine-header">
                <button class="minimizer" onclick="toggleMachineSection(this)">‚àí</button>
                <input type="text" 
                       class="machine-title-editable" 
                       value="Equipamento de Climatiza√ß√£o ${machineCount}"
                       onchange="updateMachineTitle(this, ${machineCount})"
                       onclick="this.select()">
                <button class="btn btn-delete-small" onclick="deleteClimatizationMachine(this)">Remover</button>
            </div>
            <div class="machine-content" id="machine-content-${machineCount}">
                <div class="climatization-form-grid">
                    ${buildFormGroup(
                        "Tipo de Equipamento:",
                        buildSelectWithDefault(machineTypes, machineCount, "machine-type-select", "updateMachineOptions(this)", "Selecionar M√°quina"),
                    )}
                    ${buildFormGroup(
                        "Pot√™ncia (TR):",
                        buildSelectWithDefault([], machineCount, "machine-power-select", `calculateMachinePrice(${machineCount})`, "Selecionar TR", true),
                    )}
                    ${buildFormGroup(
                        "Tens√£o:",
                        buildSelectWithDefault([], machineCount, "machine-voltage-select", `calculateMachinePrice(${machineCount})`, "Selecionar Tens√£o", true),
                    )}
                    <div class="form-group">
                        <label>Pre√ßo Base:</label>
                        <div class="price-display" id="base-price-${machineCount}">
                            R$ 0,00
                        </div>
                    </div>
                </div>
                <div class="machine-options-section">
                    <h6>Op√ß√µes Adicionais:</h6>
                    <div class="options-grid" id="options-container-${machineCount}">
                        <p class="empty-options-message">Selecione um tipo de m√°quina para ver as op√ß√µes</p>
                    </div>
                </div>
                <div class="machine-total-price">
                    <strong>Pre√ßo Total: <span id="total-price-${machineCount}">R$ 0,00</span></strong>
                </div>
            </div>
        </div>
    `;
}



/**
 * Constr√≥i um grupo de formul√°rio com label e conte√∫do
 * @param {string} label - Texto do label
 * @param {string} content - Conte√∫do HTML do campo
 * @returns {string} HTML do grupo de formul√°rio
 */
function buildFormGroup(label, content) {
  return `
    <div class="form-group">
      <label>${label}</label>
      ${content}
    </div>
  `
}

/**
 * Constr√≥i um elemento select com op√ß√µes e handlers
 * @param {Array} options - Lista de op√ß√µes do select
 * @param {number} machineIndex - √çndice da m√°quina
 * @param {string} className - Classe CSS do select
 * @param {string} onchangeHandler - Fun√ß√£o a ser executada onchange
 * @param {string} defaultText - Texto padr√£o para op√ß√£o vazia
 * @param {boolean} disabled - Se o select deve iniciar desabilitado
 * @returns {string} HTML do elemento select
 */
function buildSelectWithDefault(options, machineIndex, className, onchangeHandler, defaultText = "Selecionar", disabled = false) {
  const disabledAttr = disabled ? 'disabled' : ''
  return `
    <select class="form-input ${className}" 
            data-machine-index="${machineIndex}"
            onchange="${onchangeHandler}"
            ${disabledAttr}>
      <option value="">${defaultText}</option>
      ${options.map((opt) => `<option value="${opt}">${opt}</option>`).join("")}
    </select>
  `
}

/**
 * Constr√≥i a interface de op√ß√µes adicionais da m√°quina
 * @param {Array} options - Lista de op√ß√µes dispon√≠veis
 * @param {number} machineCount - N√∫mero da m√°quina
 * @param {Array} selectedOptions - Op√ß√µes pr√©-selecionadas
 * @returns {string} HTML das op√ß√µes
 */
function buildOptionsHTML(options, machineCount, selectedOptions = []) {
  if (!options || options.length === 0) {
    return '<p class="empty-options-message">Nenhuma op√ß√£o dispon√≠vel para esta m√°quina</p>'
  }

  return options
    .map((option) => {
      const isSelected = selectedOptions.some(selected => selected.id === option.id);
      const selectedClass = isSelected ? 'option-selected' : '';

      return `
        <div class="option-item ${selectedClass}" onclick="handleOptionClick(${machineCount}, ${option.id})">
          <div class="option-checkbox">
            <input type="checkbox" 
                  value="${option.value}" 
                  data-option-id="${option.id}"
                  onchange="updateOptionSelection(${machineCount}, ${option.id})"
                  id="option-${machineCount}-${option.id}"
                  ${isSelected ? 'checked' : ''}>
            <div class="option-content">
              <div class="option-name">${option.name}</div>
              <div class="option-price">+R$ ${option.value.toLocaleString("pt-BR")}</div>
            </div>
          
          
          </div>
        </div>
      `;
    })
    .join("")
}

/**
 * Manipula o clique na op√ß√£o
 * @param {number} machineIndex - √çndice da m√°quina
 * @param {number} optionId - ID da op√ß√£o
 */
function handleOptionClick(machineIndex, optionId) {
  const checkbox = document.getElementById(`option-${machineIndex}-${optionId}`)
  if (checkbox) {
    checkbox.checked = !checkbox.checked
    updateOptionSelection(machineIndex, optionId)
    calculateMachinePrice(machineIndex)
  }
}

/**
 * Atualiza a apar√™ncia visual da op√ß√£o quando selecionada/deselecionada
 * @param {number} machineIndex - √çndice da m√°quina
 * @param {number} optionId - ID da op√ß√£o
 */
function updateOptionSelection(machineIndex, optionId) {
  const optionItem = document.querySelector(`#option-${machineIndex}-${optionId}`).closest('.option-item')
  const checkbox = document.getElementById(`option-${machineIndex}-${optionId}`)

  if (optionItem && checkbox) {
    if (checkbox.checked) {
      optionItem.classList.add('option-selected')
    } else {
      optionItem.classList.remove('option-selected')
    }
  }
}

/**
 * Alterna a exibi√ß√£o da se√ß√£o da m√°quina (expandir/recolher)
 * @param {HTMLButtonElement} button - Bot√£o que acionou a fun√ß√£o
 */
function toggleMachineSection(button) {
  const machineContent = button.closest(".climatization-machine").querySelector(".machine-content")
  const isCollapsed = machineContent.classList.toggle("collapsed")
  button.textContent = isCollapsed ? "+" : "‚àí"
}

/**
 * Atualiza o t√≠tulo da m√°quina quando editado pelo usu√°rio
 * @param {HTMLInputElement} input - Campo de input do t√≠tulo
 * @param {number} machineIndex - √çndice da m√°quina
 */
function updateMachineTitle(input, machineIndex) {
  const newTitle = input.value.trim()
  if (!newTitle) {
    input.value = `Equipamento de Climatiza√ß√£o ${machineIndex}`
  }
}

/**
 * Atualiza as op√ß√µes da m√°quina quando o tipo √© alterado
 * Carrega novos dados de pot√™ncia, tens√£o e op√ß√µes
 * @param {HTMLSelectElement} selectElement - Select do tipo de m√°quina
 */
async function updateMachineOptions(selectElement) {
    const machineIndex = selectElement.getAttribute("data-machine-index");
    const selectedType = selectElement.value;

    console.log(`üîÑ Atualizando op√ß√µes para m√°quina ${machineIndex}, tipo: ${selectedType}`);

    if (!selectedType) {
        resetMachineFields(machineIndex);
        return;
    }

    try {
         if (window.machinesData && window.machinesData.length > 0) {
            const selectedMachine = window.machinesData.find((m) => m.type === selectedType);
            if (selectedMachine) {
                updateMachineUI(machineIndex, selectedMachine);
                return;
            }
        }


        console.log("üöÄ Carregamento r√°pido de dados das m√°quinas...");
        const response = await fetch('/machines');
        if (response.ok) {
            const data = await response.json();
            const machines = Array.isArray(data) ? data : data.machines;
            window.machinesData = machines;
            
            const selectedMachine = machines.find((m) => m.type === selectedType);
            if (selectedMachine) {
                updateMachineUI(machineIndex, selectedMachine);
            } else {
                console.error("‚ùå M√°quina n√£o encontrada ap√≥s carregamento:", selectedType);
                resetMachineFields(machineIndex);
            }
        } else {
            throw new Error('Falha no fetch');
        }

    } catch (error) {
        console.error("‚ùå Erro cr√≠tico ao atualizar op√ß√µes:", error);

        createFallbackOptions(machineIndex);
    }
}

/**
 * Atualiza a UI da m√°quina rapidamente
 */
function updateMachineUI(machineIndex, selectedMachine) {
    // Pot√™ncias
    const potencies = Object.keys(selectedMachine.baseValues || {});
    updateSelect(`.machine-power-select[data-machine-index="${machineIndex}"]`, potencies, "Selecionar TR", false);

    // Tens√µes
    const voltageNames = (selectedMachine.voltages || []).map(v => v.name);
    updateSelect(`.machine-voltage-select[data-machine-index="${machineIndex}"]`, voltageNames, "Selecionar Tens√£o", false);

    // Op√ß√µes
    const optionsContainer = document.getElementById(`options-container-${machineIndex}`);
    if (optionsContainer) {
        optionsContainer.innerHTML = buildOptionsHTML(selectedMachine.options || [], machineIndex);
    }

    updateElementText(`base-price-${machineIndex}`, `R$ 0,00`);
    updateElementText(`total-price-${machineIndex}`, `R$ 0,00`);

    console.log(`‚úÖ Op√ß√µes atualizadas para m√°quina ${machineIndex}`);
}

/**
 * Fallback para quando n√£o consegue carregar op√ß√µes
 */
function createFallbackOptions(machineIndex) {
    const optionsContainer = document.getElementById(`options-container-${machineIndex}`);
    if (optionsContainer) {
        optionsContainer.innerHTML = `
            <div class="option-item" onclick="handleOptionClick(${machineIndex}, 1)">
                <div class="option-checkbox"></div>
                <div class="option-content">
                    <div class="option-name">Op√ß√£o B√°sica 1</div>
                    <div class="option-price">+R$ 100</div>
                </div>
                <input type="checkbox" value="100" data-option-id="1" onchange="updateOptionSelection(${machineIndex}, 1)">
            </div>
            <div class="option-item" onclick="handleOptionClick(${machineIndex}, 2)">
                <div class="option-checkbox"></div>
                <div class="option-content">
                    <div class="option-name">Op√ß√£o B√°sica 2</div>
                    <div class="option-price">+R$ 200</div>
                </div>
                <input type="checkbox" value="200" data-option-id="2" onchange="updateOptionSelection(${machineIndex}, 2)">
            </div>
        `;
    }
}


/**
 * Reseta os campos da m√°quina para o estado inicial
 * @param {number} machineIndex - √çndice da m√°quina
 */
function resetMachineFields(machineIndex) {
  updateSelect(`.machine-power-select[data-machine-index="${machineIndex}"]`, [], "Selecionar TR", true)
  updateSelect(`.machine-voltage-select[data-machine-index="${machineIndex}"]`, [], "Selecionar Tens√£o", true)

  const optionsContainer = document.getElementById(`options-container-${machineIndex}`)
  if (optionsContainer) {
    optionsContainer.innerHTML = '<p class="empty-options-message">Selecione um tipo de m√°quina para ver as op√ß√µes</p>'
  }

  updateElementText(`base-price-${machineIndex}`, `R$ 0,00`)
  updateElementText(`total-price-${machineIndex}`, `R$ 0,00`)
}

/**
 * Atualiza as op√ß√µes de um elemento select
 * @param {string} selector - Seletor do elemento select
 * @param {Array} options - Novas op√ß√µes a serem adicionadas
 * @param {string} defaultText - Texto da op√ß√£o padr√£o
 * @param {boolean} disabled - Se deve desabilitar o select
 */
function updateSelect(selector, options, defaultText = "Selecionar", disabled = false) {
  const select = document.querySelector(selector)
  if (select) {
    const disabledAttr = disabled ? 'disabled' : ''
    select.innerHTML = `
      <option value="">${defaultText}</option>
      ${options.map((opt) => `<option value="${opt}">${opt}</option>`).join("")}
    `
    select.disabled = disabled
  }
}

/**
 * Calcula o pre√ßo total da m√°quina considerando pre√ßo base e op√ß√µes selecionadas
 * @param {number} machineIndex - √çndice da m√°quina a ser calculada
 */
function calculateMachinePrice(machineIndex) {
  try {
    const machineElement = document.querySelector(`[data-machine-index="${machineIndex}"]`)
    if (!machineElement) return

    // Obter tipo, pot√™ncia e tens√£o selecionados
    const typeSelect = machineElement.querySelector('.machine-type-select')
    const powerSelect = machineElement.querySelector('.machine-power-select')
    const voltageSelect = machineElement.querySelector('.machine-voltage-select')

    const selectedType = typeSelect?.value
    const selectedPower = powerSelect?.value
    const selectedVoltage = voltageSelect?.value

    let basePrice = 0
    let voltageValue = 0

    // Calcular pre√ßo base apenas se tipo e pot√™ncia estiverem selecionados
    if (selectedType && selectedPower && window.machinesData) {
      const machine = window.machinesData.find(m => m.type === selectedType)
      if (machine && machine.baseValues) {
        basePrice = machine.baseValues[selectedPower] || 0
      }
    }

    // Calcular valor da tens√£o apenas se tens√£o estiver selecionada
    if (selectedType && selectedVoltage && window.machinesData) {
      const machine = window.machinesData.find(m => m.type === selectedType)
      if (machine && machine.voltages) {
        const voltageObj = machine.voltages.find(v => v.name === selectedVoltage)
        voltageValue = voltageObj ? voltageObj.value : 0
      }
    }

    // Atualizar display do pre√ßo base
    updateElementText(`base-price-${machineIndex}`, `R$ ${basePrice.toLocaleString("pt-BR")}`)

    // Calcular total das op√ß√µes
    const optionsContainer = document.getElementById(`options-container-${machineIndex}`)
    let optionsTotal = 0

    if (optionsContainer) {
      const selectedOptions = optionsContainer.querySelectorAll('input[type="checkbox"]:checked')
      selectedOptions.forEach((option) => {
        optionsTotal += Number.parseFloat(option.value) || 0
      })
    }

    // Calcular pre√ßo total
    const totalPrice = basePrice + optionsTotal + voltageValue

    // Atualizar display do pre√ßo total
    updateElementText(`total-price-${machineIndex}`, `R$ ${totalPrice.toLocaleString("pt-BR")}`)

  } catch (error) {
    console.error("Erro ao calcular pre√ßo:", error)
  }
}

/**
 * Remove uma m√°quina de climatiza√ß√£o ap√≥s confirma√ß√£o do usu√°rio
 * @param {HTMLButtonElement} button - Bot√£o de remover que acionou a fun√ß√£o
 */
function deleteClimatizationMachine(button) {
  if (!confirm("Deseja remover este equipamento de climatiza√ß√£o?")) return

  const machineItem = button.closest(".climatization-machine")
  const machinesContainer = machineItem.closest(".machines-container")

  machineItem.remove()

  // Mostrar mensagem de vazio se n√£o houver m√°quinas
  if (machinesContainer && machinesContainer.querySelectorAll('.climatization-machine').length === 0) {
    showEmptyMessage(machinesContainer, "Nenhuma m√°quina adicionada ainda.")
  }
}

// Exporta√ß√£o e disponibiliza√ß√£o global
if (typeof window !== 'undefined') {
    window.addMachine = addMachine;
    window.toggleMachineSection = toggleMachineSection;
    window.updateMachineTitle = updateMachineTitle;
    window.updateMachineOptions = updateMachineOptions;
    window.calculateMachinePrice = calculateMachinePrice;
    window.deleteClimatizationMachine = deleteClimatizationMachine;
    window.handleOptionClick = handleOptionClick;
    window.updateOptionSelection = updateOptionSelection;
}

export {
    addMachine,
    buildClimatizationMachineHTML,
    toggleMachineSection,
    updateMachineTitle,
    updateMachineOptions,
    calculateMachinePrice,
    deleteClimatizationMachine,
    handleOptionClick,
    updateOptionSelection
}