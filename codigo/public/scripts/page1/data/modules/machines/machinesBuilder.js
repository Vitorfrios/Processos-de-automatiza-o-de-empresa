// machineBuilder.js
// SISTEMA CORRIGIDO COM IDs √öNICOS

import { buildCapacityCalculationTable } from './capacityCalculator.js'
import { removeEmptyMessage } from './utilities.js'
import { generateSecureId } from '../../data-files/data-utils-core.js' // ‚úÖ NOVA IMPORT

if (typeof window !== 'undefined' && !window.machinesDataCache) {
    window.machinesDataCache = null;
}

/**
 * Constr√≥i a se√ß√£o completa de m√°quinas para uma sala
 * Inclui tabela de capacidade e container para m√°quinas
 * @param {string} obraId - ID √∫nico da obra
 * @param {string} projectId - ID √∫nico do projeto
 * @param {string} roomName - Nome da sala
 * @param {string} finalRoomId - ID √∫nico da sala
 * @returns {string} HTML da se√ß√£o de m√°quinas
 */
function buildMachinesSection(obraId, projectId, roomName, finalRoomId) {
  const roomId = finalRoomId;

  if (!roomId || roomId === 'undefined' || roomId === 'null') {
      console.error(`ERRO FALBACK (buildMachinesSection) machineBuilder.js [Room ID inv√°lido: ${roomId}]`);
      return '';
  }

  return `
    <div class="section-block">
      <div class="section-header-machine">
        <button class="minimizer" onclick="toggleSection('${roomId}-maquinas')">+</button>
        <h4 class="section-title">M√°quinas</h4>
        <button class="btn btn-add-small" onclick="addMachine('${roomId}')">+ Adicionar </button>
      </div>
      <div class="section-content collapsed" id="section-content-${roomId}-maquinas">
        ${buildCapacityCalculationTable(roomId)}
        
        <div class="machines-container" id="machines-${roomId}">
          <p class="empty-message">Nenhuma m√°quina adicionada ainda.</p>
        </div>
        
        <!-- ‚úÖ TOTAL GERAL: FORA do machines-container, DENTRO da section-content -->
        <div class="all-machines-total-price">
          <strong>Total Geral de Todas as M√°quinas da Sala: 
            <span id="total-all-machines-price-${roomId}">R$ 0,00</span>
          </strong>
        </div>
      </div>
    </div>
  `;
}

/**
 * Carrega os dados das m√°quinas do servidor com cache - CORRIGIDA
 * @returns {Promise<Object>} Dados das m√°quinas dispon√≠veis
 */
async function loadMachinesData() {
    // Verificar se o cache √© v√°lido (n√£o apenas se existe)
    if (window.machinesDataCache && Array.isArray(window.machinesDataCache.machines) && window.machinesDataCache.machines.length > 0) {
        console.log("üì¶ Retornando dados das m√°quinas do cache GLOBAL (v√°lido)");
        return window.machinesDataCache;
    }

    try {
        console.log("üîÑ Carregando dados das m√°quinas do servidor...");
        const response = await fetch(`/machines`);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        const machinesData = { machines: Array.isArray(data) ? data : data.machines };
        
        // Cache GLOBAL - dispon√≠vel para todas as m√°quinas de todas as salas
        window.machinesDataCache = machinesData;
        window.machinesData = machinesData.machines;
        
        console.log(`‚úÖ Dados das m√°quinas carregados GLOBALMENTE: ${machinesData.machines.length} m√°quinas`);
        return machinesData;
        
    } catch (error) {
        console.error("‚ùå Erro ao carregar dados das m√°quinas:", error);

        // Se houver cache antigo, usar mesmo que incompleto
        if (window.machinesDataCache) {
            console.log("üîÑ Usando cache antigo devido ao erro");
            return window.machinesDataCache;
        }

        // Retorna dados vazios apenas se n√£o houver cache
        const emptyData = { machines: [] };
        window.machinesDataCache = emptyData;
        return emptyData;
    }
}

/**
 * Gera ID √∫nico para m√°quina baseado na sala - CORRE√á√ÉO COMPLETA
 * @param {string} roomId - ID √∫nico da sala
 * @returns {string} ID √∫nico da m√°quina
 */
function generateMachineId(roomId) {
    // ‚úÖ CORRE√á√ÉO: Validar roomId
    if (!roomId || roomId === 'undefined' || roomId === 'null') {
        console.error(`ERRO FALBACK (generateMachineId) machineBuilder.js [Room ID inv√°lido: ${roomId}]`);
        return generateSecureId('machine');
    }
    
    const machinePrefix = generateSecureId('machine').replace('machine_', '');
    return `${roomId}_machine_${machinePrefix}_${Date.now()}`;
}

/**
 * Carrega m√°quinas salvas previamente para uma sala - CORRE√á√ÉO COMPLETA
 * @param {string} roomId - ID √∫nico da sala
 * @param {Array} savedMachines - Lista de m√°quinas salvas
 */
async function loadSavedMachines(roomId, savedMachines) {
    // ‚úÖ CORRE√á√ÉO: Validar roomId
    if (!roomId || roomId === 'undefined' || roomId === 'null') {
        console.error(`ERRO FALBACK (loadSavedMachines) machineBuilder.js [Room ID inv√°lido: ${roomId}]`);
        return;
    }
    
    const machinesContainer = document.getElementById(`machines-${roomId}`);
    
    if (!savedMachines?.length) {
        console.log(`üì≠ Nenhuma m√°quina salva para a sala ${roomId}`);
        return;
    }

    if (!machinesContainer) {
        console.error(`‚ùå Container de m√°quinas n√£o encontrado: machines-${roomId}`);
        return;
    }

    removeEmptyMessage(machinesContainer);

    try {
        const machinesData = await loadMachinesData();
        console.log(`üîÑ Carregando ${savedMachines.length} m√°quinas salvas para ${roomId}`);
        
        savedMachines.forEach((savedMachine, index) => {
            // ‚úÖ CORRE√á√ÉO: Gerar ID √∫nico para cada m√°quina
            const machineId = generateMachineId(roomId);
            const machineHTML = buildClimatizationMachineFromSavedData(machineId, savedMachine, machinesData.machines);
            machinesContainer.insertAdjacentHTML("beforeend", machineHTML);
            console.log(`‚úÖ M√°quina carregada: ${savedMachine.nome} (ID: ${machineId})`);
        });

        // Aguardar a DOM atualizar e ent√£o for√ßar atualiza√ß√£o dos valores
        setTimeout(() => {
            const machineElements = machinesContainer.querySelectorAll('.climatization-machine');
            machineElements.forEach((machineElement, index) => {
                const machineId = machineElement.dataset.machineId;
                const savedMachine = savedMachines[index];
                
                if (savedMachine) {
                    console.log(`üîß Processando m√°quina ${machineId} com TR: ${savedMachine.potencia} e Tens√£o: ${savedMachine.tensao}`);
                    
                    // For√ßar atualiza√ß√£o dos valores baseados na TR salva
                    if (savedMachine.potencia && window.updateOptionValues) {
                        console.log(`üîÑ Atualizando op√ß√µes para TR ${savedMachine.potencia}`);
                        window.updateOptionValues(machineId);
                    }
                    
                    // Recalcular pre√ßo total
                    if (window.calculateMachinePrice) {
                        window.calculateMachinePrice(machineId);
                    }
                }
            });

            // ‚úÖ NOVO: Calcular TOTAL GERAL ap√≥s carregar todas as m√°quinas
            if (window.updateAllMachinesTotalDisplay) {
                window.updateAllMachinesTotalDisplay(roomId);
            }

        }, 200);

    } catch (error) {
        console.error("‚ùå Erro ao carregar m√°quinas salvas:", error);
    }
}

/**
 * Constr√≥i uma m√°quina de climatiza√ß√£o a partir de dados salvos - CORRE√á√ÉO COMPLETA
 * @param {string} machineId - ID √∫nico da m√°quina
 * @param {Object} savedMachine - Dados da m√°quina salvos
 * @param {Array} allMachines - Lista de todas as m√°quinas dispon√≠veis
 * @returns {string} HTML da m√°quina reconstru√≠da
 */
function buildClimatizationMachineFromSavedData(machineId, savedMachine, allMachines) {
    // ‚úÖ CORRE√á√ÉO: Validar machineId
    if (!machineId || machineId === 'undefined' || machineId === 'null') {
        console.error(`ERRO FALBACK (buildClimatizationMachineFromSavedData) machineBuilder.js [Machine ID inv√°lido: ${machineId}]`);
        machineId = generateSecureId('machine');
    }

    const machineType = allMachines.find((m) => m.type === savedMachine.tipo);

    if (!machineType) {
        console.error("‚ùå ERRO: Tipo de M√°quina n√£o encontrado:", savedMachine.tipo);
        return '';
    }

    // Obter pot√™ncias e tens√µes dispon√≠veis
    const potencies = Object.keys(machineType.baseValues || {});
    const voltageNames = (machineType.voltages || []).map(v => v.name);
    
    // Calcular pre√ßo base atual - usar valores espec√≠ficos por TR
    const basePrice = calculateBasePrice(machineType, savedMachine.potencia);

    return `
    <div class="climatization-machine" data-machine-id="${machineId}" data-room-id="${savedMachine.roomId || ''}">
      <div class="machine-header">
        <button class="minimizer" onclick="toggleMachineSection(this)">‚àí</button>
        <input type="text" 
               class="machine-title-editable" 
               value="${savedMachine.nome || `Maquina`}"
               onchange="updateMachineTitle(this, '${machineId}')"
               onclick="this.select()">
        <button class="btn btn-delete-small" onclick="deleteClimatizationMachine(this)">Remover</button>
      </div>
      <div class="machine-content" id="machine-content-${machineId}">
        <div class="climatization-form-grid">
          ${buildFormGroup(
            "Tipo de Equipamento:",
            buildSelectWithSelected(
              allMachines.map((m) => m.type),
              machineId,
              "machine-type-select",
              "updateMachineOptions(this)",
              savedMachine.tipo,
            ),
          )}
          ${buildFormGroup(
            "Capacidade:",
            buildSelectWithSelected(
              potencies,
              machineId,
              "machine-power-select",
              `handlePowerChange('${machineId}')`,
              savedMachine.potencia,
            ),
          )}
          ${buildFormGroup(
            "Tens√£o:",
            buildSelectWithSelected(
              voltageNames,
              machineId,
              "machine-voltage-select",
              `calculateMachinePrice('${machineId}')`,
              savedMachine.tensao,
            ),
          )}
          <div class="form-group">
              <label>Pre√ßo Base:</label>
              <div class="price-display" id="base-price-${machineId}">
                  R$ 0,00
              </div>
          </div>
          <div class="form-group"> <!-- Pre√ßo final desta m√°quina -->
              <label>Pre√ßo Total desta M√°quina: </label>
                <div class="price-display" id="total-price-${machineId}"">
                  R$ ${savedMachine.precoTotal.toLocaleString("pt-BR")}
                </div>
          </div>

          </div>
        </div>
        <div class="machine-options-section">
          <h6>Op√ß√µes Adicionais:</h6>
          <div class="options-grid" id="options-container-${machineId}">
            ${buildSavedOptionsHTML(machineType.options, machineId, savedMachine.opcoesSelecionadas, savedMachine.potencia)}
          </div>
        </div>
        <!-- ‚ùå REMOVIDO: total-all-machines-price N√ÉO deve estar aqui dentro -->
      </div>
    </div>
  `;
}

/**
 * Constr√≥i um grupo de formul√°rio com label e conte√∫do
 * @param {string} label - Texto do label
 * @param {string} content - Conte√∫do HTML do campo
 * @returns {string} HTML do grupo de formul√°rio
 */
function buildFormGroup(label, content) {
  return `
    <div class="form-group">
      <label>${label}</label>
      ${content}
    </div>
  `;
}

/**
 * Constr√≥i um elemento select com op√ß√£o pr√©-selecionada - CORRE√á√ÉO COMPLETA
 * @param {Array} options - Lista de op√ß√µes
 * @param {string} machineId - ID √∫nico da m√°quina
 * @param {string} className - Classe CSS
 * @param {string} onchangeHandler - Handler de change
 * @param {string} selectedValue - Valor pr√©-selecionado
 * @returns {string} HTML do select com sele√ß√£o
 */
function buildSelectWithSelected(options, machineId, className, onchangeHandler, selectedValue) {
  return `
    <select class="form-input ${className}" 
            data-machine-id="${machineId}"
            onchange="${onchangeHandler}">
      <option value="">Selecionar</option>
      ${options
        .map((opt) => `<option value="${opt}" ${opt === selectedValue ? "selected" : ""}>${opt}</option>`)
        .join("")}
    </select>
  `;
}

/**
 * Constr√≥i op√ß√µes com sele√ß√µes pr√©-definidas a partir de dados salvos - CORRE√á√ÉO COMPLETA
 * @param {Array} options - Lista de op√ß√µes dispon√≠veis
 * @param {string} machineId - ID √∫nico da m√°quina
 * @param {Array} selectedOptions - Op√ß√µes que estavam selecionadas
 * @param {string} selectedPower - Pot√™ncia selecionada (para calcular valores espec√≠ficos)
 * @returns {string} HTML das op√ß√µes com checkboxes marcados
 */
function buildSavedOptionsHTML(options, machineId, selectedOptions = [], selectedPower = null) {
  if (!options || options.length === 0) {
    return '<p class="empty-options-message">Nenhuma op√ß√£o dispon√≠vel para esta m√°quina</p>';
  }

  return options
    .map((option) => {
      const isChecked = selectedOptions.some((selected) => selected.id === option.id);
      
      let optionValue = 0;
      if (selectedPower && option.values && option.values[selectedPower] !== undefined) {
        optionValue = option.values[selectedPower];
        console.log(`üí∞ Op√ß√£o ${option.name} para TR ${selectedPower}: R$ ${optionValue}`);
      }
      
      const optionDisplayValue = `+R$ ${optionValue.toLocaleString("pt-BR")}`;

      return `
      <div class="option-item" onclick="handleOptionClick('${machineId}', ${option.id})">
        <div class="option-checkbox">
          <input type="checkbox" 
                 value="${optionValue}" 
                 data-option-id="${option.id}"
                 data-option-name="${option.name}"
                 onchange="updateOptionSelection('${machineId}', '${option.id}'); calculateMachinePrice('${machineId}')"
                 id="option-${machineId}-${option.id}"
                 ${isChecked ? "checked" : ""}>
          <div class="option-content">
            <div class="option-name">${option.name}</div>
            <div class="option-price">${optionDisplayValue}</div>
          </div>
        </div>
      </div>
    `;
    })
    .join("");
}

/**
 * Calcula o pre√ßo base baseado no tipo de m√°quina e pot√™ncia selecionada
 * @param {Object} machineType - Tipo da m√°quina
 * @param {string} potencia - Pot√™ncia selecionada
 * @returns {number} Pre√ßo base calculado
 */
function calculateBasePrice(machineType, potencia) {
  if (!machineType || !machineType.baseValues) return 0;
  return machineType.baseValues[potencia] || 0;
}

/**
 * Atualiza os c√°lculos de capacidade quando os ganhos t√©rmicos mudam
 * @param {string} roomId - ID da sala
 */
function updateCapacityFromThermalGains(roomId) {
  if (window.calculateCapacitySolution) {
    window.calculateCapacitySolution(roomId);
  }
}

/**
 * Inicializa os c√°lculos de capacidade com m√∫ltiplas tentativas
 * Usa timeouts progressivos para garantir que a DOM esteja pronta
 */
function initializeCapacityCalculations() {
  const attempts = [100, 500, 1000, 2000];
  attempts.forEach((delay) => {
    setTimeout(() => {
      document.querySelectorAll(".room-block").forEach((roomBlock) => {
        const roomId = roomBlock.dataset.roomId; // ‚úÖ CORRE√á√ÉO: Usar data attribute
        if (roomId) {
          const capacityTable = roomBlock.querySelector(".capacity-calculation-table");
          if (capacityTable) {
            const fatorSegurancaInput = document.getElementById(`fator-seguranca-${roomId}`);
            const capacidadeUnitariaSelect = document.getElementById(`capacidade-unitaria-${roomId}`);
            if (fatorSegurancaInput && capacidadeUnitariaSelect && window.calculateCapacitySolution) {
              window.calculateCapacitySolution(roomId);
            }
          }
        }
      });
    }, delay);
  });
}

/**
 * Atualiza todos os c√°lculos de capacidade em todas as salas
 * √ötil para rec√°lculos em lote
 */
function refreshAllCapacityCalculations() {
  document.querySelectorAll(".room-block").forEach((roomBlock) => {
    const roomId = roomBlock.dataset.roomId; // ‚úÖ CORRE√á√ÉO: Usar data attribute
    if (roomId && window.calculateCapacitySolution) {
      window.calculateCapacitySolution(roomId);
    }
  });
}

// Exporta√ß√£o das fun√ß√µes do m√≥dulo
export {
  buildMachinesSection,
  loadMachinesData,
  loadSavedMachines,
  updateCapacityFromThermalGains,
  initializeCapacityCalculations,
  refreshAllCapacityCalculations,
  generateMachineId // ‚úÖ NOVA EXPORT
}

// Disponibiliza√ß√£o global das fun√ß√µes necess√°rias
if (typeof window !== 'undefined') {
    window.loadSavedMachines = loadSavedMachines;
    window.generateMachineId = generateMachineId; // ‚úÖ NOVA GLOBAL
}