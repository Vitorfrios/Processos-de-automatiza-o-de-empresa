/**
 * =====================
 * Gerenciador de obras - obra-manager.js
 * SISTEMA CORRIGIDO COM IDs √öNICOS
 * =====================
 */

import { 
    showConfirmationModal, 
    undoDeletion,
    hideToast 
} from './modal/modal.js'

import { generateObraId } from '../../data/data-files/data-utils-core.js'
import {addNewProjectToObra} from './project-manager.js'


/**
 * Cria uma obra vazia na interface
 * @param {string} obraName - Nome da obra
 * @param {string} obraId - ID da obra (opcional)
 */
function createEmptyObra(obraName, obraId) {
    // ‚úÖ CORRE√á√ÉO: SEMPRE usar ID √∫nico, mesmo se fornecido (para consist√™ncia)
    const finalObraId = obraId || generateObraId();
    const obraHTML = buildObraHTML(obraName, finalObraId);
    insertObraIntoDOM(obraHTML);
    console.log(`üèóÔ∏è Obra ${obraName} criada - ID: ${finalObraId}`);
}

/**
 * Constr√≥i o HTML de uma obra
 * @param {string} obraName - Nome da obra
 * @param {string} obraId - ID √∫nico da obra
 * @returns {string} HTML da obra
 */
function buildObraHTML(obraName, obraId) {
    // ‚úÖ CORRE√á√ÉO: Validar ID √∫nico
    if (!obraId || obraId === 'undefined' || obraId === 'null') {
        console.error(`ERRO FALBACK (buildObraHTML) obra-manager.js [ID de obra inv√°lido: ${obraId}]`);
        obraId = generateObraId();
    }
    
    console.log(`üîç Build Obra HTML: ${obraName}, ID: ${obraId}`);

    return `
    <div class="obra-block" data-obra-id="${obraId}" data-obra-name="${obraName}">
      <div class="obra-header">
        <!-- ‚úÖ CORRE√á√ÉO: usar APENAS obraId para toggle -->
        <button class="minimizer" onclick="toggleObra('${obraId}', event)">+</button>
        <h2 class="obra-title editable-title" data-editable="true" onclick="makeEditable(this, 'obra')">${obraName}</h2>
        <div class="obra-actions">
          <button class="btn btn-delete" onclick="window.deleteObra('${obraName}', '${obraId}')">Remover Obra</button>
        </div>
      </div>
      <!-- ‚úÖ CORRE√á√ÉO: usar APENAS obraId no conte√∫do -->
      <div class="obra-content collapsed" id="obra-content-${obraId}">
        <div class="projects-container" id="projects-${obraId}">
          <p class="empty-message">Adicione projetos a esta obra...</p>
        </div>
        <div class="add-project-section">
          <!-- ‚úÖ CORRE√á√ÉO: Passar obraId para a fun√ß√£o -->
          <button class="btn btn-add-secondary" onclick="addNewProjectToObra('${obraId}')">+ Adicionar Projeto</button>
        </div>
        ${buildObraActionsFooter(obraId, obraName, false)} 
      </div>
    </div>
  `;
}

/**
 * Constr√≥i o rodap√© de a√ß√µes da obra
 * @param {string} obraName - Nome da obra
 * @param {boolean} hasId - Se a obra j√° foi SALVA no servidor
 * @returns {string} HTML do rodap√© de a√ß√µes
 */
function buildObraActionsFooter(obraId, obraName, hasId = false) {
  const buttonText = hasId ? "Atualizar Obra" : "Salvar Obra";
  const buttonClass = hasId ? "btn-update" : "btn-save";

  console.log(`üîß Build Obra Footer: ${obraName}, ID: ${obraId}, HasId: ${hasId}, Button: ${buttonText}`);

  // ‚úÖ CORRE√á√ÉO: Usar obraId em TODAS as chamadas
  return `
    <div class="obra-actions-footer">
      <button class="btn btn-verify" onclick="verifyObraData('${obraId}')">Verificar Dados</button>
      <button class="btn ${buttonClass}" onclick="event.preventDefault(); saveOrUpdateObra('${obraId}')">${buttonText}</button>      
      <button class="btn btn-download" onclick="downloadPDF('${obraId}')">Baixar PDF</button>
      <button class="btn btn-download" onclick="downloadWord('${obraId}')">Baixar Word</button>
    </div>
  `;
}

/**
 * Insere o HTML da obra no DOM
 * @param {string} obraHTML - HTML da obra a ser inserida
 */
function insertObraIntoDOM(obraHTML) {
  const projectsContainer = document.getElementById("projects-container")
  if (!projectsContainer) {
    console.error('‚ùå Container de projetos n√£o encontrado')
    return
  }
  projectsContainer.insertAdjacentHTML("beforeend", obraHTML)
}

/**
 * Atualiza o bot√£o de uma obra ap√≥s salvamento
 * @param {string} obraName - Nome da obra
 * @param {string} obraId - ID da obra salva
 */
function updateObraButtonAfterSave(obraName, obraId) {
  // ‚úÖ CORRE√á√ÉO: Buscar APENAS por ID √∫nico
  const obraBlock = document.querySelector(`[data-obra-id="${obraId}"]`)
  if (!obraBlock) {
    console.error(`‚ùå Obra com ID ${obraId} n√£o encontrada para atualizar bot√£o`)
    return
  }

  obraBlock.dataset.obraId = obraId

  const obraContent = document.getElementById(`obra-content-${obraId}`)
  if (obraContent) {
    const oldFooter = obraContent.querySelector('.obra-actions-footer')
    if (oldFooter) {
      const newFooter = buildObraActionsFooter(obraId, obraName, true)
      oldFooter.outerHTML = newFooter
      console.log(`üîÑ Bot√£o da obra ${obraName} ATUALIZADO para "Atualizar Obra" (ID: ${obraId})`)
    } else {
      console.error(`‚ùå Rodap√© n√£o encontrado na obra ${obraName}`)
    }
  } else {
    console.error(`‚ùå Conte√∫do da obra ${obraId} n√£o encontrado`)
  }
}

/**
 * Fun√ß√£o principal de deletar obra (ATUALIZADA)
 */
async function deleteObra(obraName, obraId) {
  // ‚úÖ CORRE√á√ÉO: Buscar APENAS por ID √∫nico
  const obraBlock = document.querySelector(`[data-obra-id="${obraId}"]`)
  if (!obraBlock) {
    console.error(`‚ùå Obra com ID ${obraId} n√£o encontrada`)
    return
  }

  // Mostra o modal personalizado em vez do confirm b√°sico
  showConfirmationModal(obraName, obraId, obraBlock)
}

/**
 * Obt√©m o pr√≥ximo n√∫mero de obra
 * @returns {number} Pr√≥ximo n√∫mero dispon√≠vel para obra
 */
function getNextObraNumber() {
  const obraBlocks = document.querySelectorAll('.obra-block')
  const obraNumbers = Array.from(obraBlocks).map(obra => {
    const obraName = obra.dataset.obraName
    const match = obraName.match(/Obra(\d+)/)
    return match ? parseInt(match[1]) : 0
  })

  const maxNumber = Math.max(0, ...obraNumbers)
  return maxNumber + 1
}

/**
 * Adiciona uma nova obra √† interface
 */
async function addNewObra() {
  try {
    const obraNumber = getNextObraNumber()
    const obraName = `Obra${obraNumber}`
    
    // ‚úÖ CORRE√á√ÉO: Gerar ID √∫nico para nova obra
    const obraId = generateObraId()

    console.log(`üèóÔ∏è Criando nova obra: ${obraName} com ID: ${obraId}`)
    createEmptyObra(obraName, obraId)
    console.log(`‚úÖ ${obraName} adicionada com ID √∫nico: ${obraId}`)

    console.log(`üîÑ Criando projeto e sala autom√°ticos para ${obraName}`)
    await addNewProjectToObra(obraId)

  } catch (error) {
    console.error("‚ùå Erro ao adicionar nova obra:", error)
    alert("Erro ao criar nova obra. Verifique o console para detalhes.")
  }
}




// ===== EXPORTA√á√ïES E CONFIGURA√á√ÉO GLOBAL =====

// Torne as fun√ß√µes globais para o HTML poder acessar
window.deleteObra = deleteObra
window.addNewObra = addNewObra
window.undoDeletion = undoDeletion
window.hideToast = hideToast

// Exporta√ß√µes para m√≥dulos
export {
    createEmptyObra,
    buildObraHTML,
    buildObraActionsFooter,
    insertObraIntoDOM,
    updateObraButtonAfterSave,
    deleteObra,
    getNextObraNumber,
    addNewObra,
    generateObraId
}
/**
 * project-manager.js
 * Gerenciador de projetos - SISTEMA CORRIGIDO COM IDs √öNICOS
 */

import { createEmptyRoom } from '../../data/rooms.js'
import { generateProjectId,getNextProjectNumber } from '../../data/data-files/data-utils-core.js'
import { removeEmptyObraMessage } from '../../ui/intr-files/ui-helpers.js'

/**
 * Constr√≥i o HTML de um projeto - CORRE√á√ÉO COMPLETA
 * @param {string} obraId - ID √∫nico da obra
 * @param {string} obraName - Nome da obra
 * @param {string} projectId - ID √∫nico do projeto
 * @param {string} projectName - Nome do projeto
 * @returns {string} HTML do projeto
 */
function buildProjectHTML(obraId, obraName, projectId, projectName) {
    // ‚úÖ CORRE√á√ÉO: Validar IDs √∫nicos
    if (!obraId || obraId === 'undefined' || obraId === 'null') {
        console.error(`ERRO FALBACK (buildProjectHTML) project-manager.js [Obra ID inv√°lido: ${obraId}]`)
        return ''
    }
    
    const finalProjectId = projectId || generateProjectId(document.querySelector(`[data-obra-id="${obraId}"]`))
    
    if (!finalProjectId || finalProjectId === 'undefined' || finalProjectId === 'null') {
        console.error(`ERRO FALBACK (buildProjectHTML) project-manager.js [Project ID inv√°lido: ${finalProjectId}]`)
        return ''
    }
    
    console.log(`üî® [BUILD PROJECT HTML] Obra: ${obraName}, Projeto: ${projectName}, ObraID: ${obraId}, ProjectID: ${finalProjectId}`)

    return `
        <div class="project-block" 
             data-project-id="${finalProjectId}" 
             data-project-name="${projectName}" 
             data-obra-id="${obraId}" 
             data-obra-name="${obraName}">
            <div class="project-header">
                <!-- ‚úÖ CORRE√á√ÉO: usar APENAS projectId para toggle -->
                <button class="minimizer" onclick="toggleProject('${finalProjectId}', event)">+</button>
                <h3 class="project-title editable-title" data-editable="true" onclick="makeEditable(this, 'project')">${projectName}</h3>
                <div class="project-actions">
                    <!-- ‚úÖ CORRE√á√ÉO: passar IDs √∫nicos para delete -->
                    <button class="btn btn-delete" onclick="deleteProject('${obraId}', '${finalProjectId}')">Remover Projeto</button>
                </div>
            </div>
            <!-- ‚úÖ CORRE√á√ÉO: usar APENAS projectId no conte√∫do -->
            <div class="project-content collapsed" id="project-content-${finalProjectId}">

            
                <div class="rooms-container">
                    <p class="empty-message">Adicione salas a este projeto...</p>
                </div>
                <div class="add-room-section">
                    <!-- ‚úÖ CORRE√á√ÉO: passar IDs √∫nicos para add room -->
                    <button class="btn btn-add-secondary" onclick="addNewRoom('${obraId}', '${finalProjectId}')">+ Adicionar Sala</button>
                </div>
            </div>
        </div>
    `
}

/**
 * Cria um projeto vazio na obra especificada - CORRE√á√ÉO COMPLETA
 * @param {string} obraId - ID √∫nico da obra
 * @param {string} obraName - Nome da obra
 * @param {string} projectId - ID √∫nico do projeto
 * @param {string} projectName - Nome do projeto
 * @returns {Promise<boolean>} True se o projeto foi criado com sucesso
 */
async function createEmptyProject(obraId, obraName, projectId, projectName) {
    console.log(`üìÅ [CREATE PROJECT] Buscando obra: "${obraName}" (ID: ${obraId}) para criar projeto: "${projectName}" (ID: ${projectId})`)
    
    // ‚úÖ CORRE√á√ÉO: Buscar APENAS por ID √∫nico da obra
    const obraBlock = document.querySelector(`[data-obra-id="${obraId}"]`)
    
    if (!obraBlock) {
        console.error(`‚ùå Obra com ID ${obraId} n√£o encontrada`)
        
        // Debug: listar obras dispon√≠veis
        console.log('üîç Obras dispon√≠veis no DOM:')
        document.querySelectorAll('.obra-block').forEach(obra => {
            console.log(`  - Obra: "${obra.dataset.obraName}", ID: "${obra.dataset.obraId}"`)
        })
        return false
    }

    console.log(`‚úÖ Obra encontrada:`, obraBlock.dataset)

    const projectsContainer = document.getElementById(`projects-${obraId}`)
    if (!projectsContainer) {
        console.error(`‚ùå Container de projetos n√£o encontrado para obra: ${obraId}`)
        return false
    }

    removeEmptyObraMessage(obraName)

    // ‚úÖ CORRE√á√ÉO: Gerar ID SEGURO hier√°rquico se n√£o fornecido
    const projectNumber = getNextProjectNumber(obraId)
    const finalProjectId = projectId || generateProjectId(obraBlock, projectNumber)
    
    if (!finalProjectId) {
        console.error(`‚ùå Falha ao gerar ID para projeto ${projectName}`)
        return false
    }

    const projectHTML = buildProjectHTML(obraId, obraName, finalProjectId, projectName)
    projectsContainer.insertAdjacentHTML('beforeend', projectHTML)

    console.log(`‚úÖ Projeto ${projectName} criado na obra ${obraName} com ID SEGURO: ${finalProjectId}`)
    
    // Aguardar e confirmar que o projeto foi criado no DOM
    setTimeout(() => {
        const createdProject = document.querySelector(`[data-obra-id="${obraId}"][data-project-id="${finalProjectId}"]`)
        if (createdProject) {
            console.log(`‚úÖ PROJETO CONFIRMADO NO DOM: ${projectName}`, createdProject.dataset)
        } else {
            console.error(`‚ùå PROJETO N√ÉO ENCONTRADO NO DOM: ${projectName}`)
        }
    }, 100)

    return true
}

/**
 * Adiciona um novo projeto √† obra especificada - CORRE√á√ÉO COMPLETA
 * @param {string} obraId - ID √∫nico da obra
 * @returns {Promise<void>}
 */
async function addNewProjectToObra(obraId) {
    console.log(`‚ûï Adicionando novo projeto √† obra: ${obraId}`)
    
    // ‚úÖ CORRE√á√ÉO: Buscar obra por ID √∫nico
    const obraBlock = document.querySelector(`[data-obra-id="${obraId}"]`)
    
    if (!obraBlock) {
        console.error(`‚ùå Obra com ID ${obraId} n√£o encontrada`)
        
        // Debug: listar obras dispon√≠veis com seus IDs
        console.log('üîç Obras dispon√≠veis no DOM:')
        document.querySelectorAll('.obra-block').forEach(obra => {
            console.log(`  - Obra: "${obra.dataset.obraName}", ID: "${obra.dataset.obraId}"`)
        })
        return
    }
    
    const obraName = obraBlock.dataset.obraName
    const projectNumber = getNextProjectNumber(obraId)
    const projectName = `Projeto${projectNumber}`
    
    // ‚úÖ CORRE√á√ÉO: Gerar ID hier√°rquico √∫nico para projeto
    const projectId = generateProjectId(obraBlock)

    await createEmptyProject(obraId, obraName, projectId, projectName)
    console.log(`‚úÖ ${projectName} adicionado √† obra ${obraName} (ID: ${obraId})`)
}




/**
 * Remove um projeto da obra
 * @param {string} obraId - ID √∫nico da obra
 * @param {string} projectId - ID √∫nico do projeto
 * @returns {void}
 */
function deleteProject(obraId, projectId) {
    // ‚úÖ CORRE√á√ÉO: Buscar APENAS por IDs √∫nicos
    const projectElement = document.querySelector(`[data-obra-id="${obraId}"][data-project-id="${projectId}"]`)
    
    if (!projectElement) {
        console.error(`‚ùå Projeto com ID ${projectId} n√£o encontrado na obra ${obraId}`)
        return
    }

    const projectName = projectElement.dataset.projectName
    projectElement.remove()
    
    console.log(`üóëÔ∏è Projeto ${projectName} (ID: ${projectId}) removido da obra ${obraId}`)
}

if (typeof window !== 'undefined') {
    window.addNewProjectToObra = addNewProjectToObra
    window.getNextProjectNumber = getNextProjectNumber
    window.deleteProject = deleteProject
    window.createEmptyProject = createEmptyProject // ‚úÖ LINHA CR√çTICA FALTANTE
    window.buildProjectHTML = buildProjectHTML // ‚úÖ Adicionar tamb√©m para consist√™ncia
}

export {
    createEmptyProject,
    buildProjectHTML,
    addNewProjectToObra,
    deleteProject
}
/**
 * room-operations.js
 * Opera√ß√µes com salas - SISTEMA CORRIGIDO COM IDs √öNICOS
 */

// REMOVIDO NA REFACTOR: import { showEmptyProjectMessageIfNeeded, removeEmptyProjectMessage } from '../../ui/interface.js'
import { buildRoomHTML } from './salas.js' 
import { generateRoomId } from '../data-files/data-utils-core.js'
import { removeEmptyProjectMessage } from '../../ui/intr-files/ui-helpers.js'

// Importar a fun√ß√£o de pr√©-carregamento
let machinesPreloadModule = null;

/**
 * Carrega o m√≥dulo de m√°quinas para pr√©-carregamento ass√≠ncrono
 * @returns {Promise<Object|null>} M√≥dulo de m√°quinas carregado
 */
async function loadMachinesPreloadModule() {
    if (!machinesPreloadModule) {
        try {
            machinesPreloadModule = await import('./machines/machinesBuilder.js');
            console.log("‚úÖ M√≥dulo de m√°quinas carregado para pr√©-carregamento");
        } catch (error) {
            console.error("‚ùå Erro ao carregar m√≥dulo de m√°quinas:", error);
        }
    }
    return machinesPreloadModule;
}

/**
 * Cria uma nova sala vazia no projeto especificado - CORRE√á√ÉO COMPLETA
 * @param {string} obraId - ID √∫nico da obra
 * @param {string} projectId - ID √∫nico do projeto  
 * @param {string} roomName - Nome da sala
 * @param {string} roomId - ID √∫nico da sala (opcional)
 * @returns {Promise<boolean>} True se a sala foi criada com sucesso
 */
async function createEmptyRoom(obraId, projectId, roomName, roomId) {
    console.log(`üîÑ Criando sala: ${roomName} na obra "${obraId}", projeto "${projectId}"`);
    
    // ‚úÖ CORRE√á√ÉO: Validar IDs √∫nicos
    if (!obraId || obraId === 'undefined' || obraId === 'null') {
        console.error(`ERRO FALBACK (createEmptyRoom) room-operations.js [Obra ID inv√°lido: ${obraId}]`);
        return false;
    }
    
    if (!projectId || projectId === 'undefined' || projectId === 'null') {
        console.error(`ERRO FALBACK (createEmptyRoom) room-operations.js [Project ID inv√°lido: ${projectId}]`);
        return false;
    }
    
    // ‚úÖ CORRE√á√ÉO: Buscar por IDs √∫nicos
    const projectElement = document.querySelector(`[data-obra-id="${obraId}"][data-project-id="${projectId}"]`);
    
    if (!projectElement) {
        console.error(`‚ùå Projeto ${projectId} n√£o encontrado na obra ${obraId}`);
        
        // Debug detalhado: listar projetos dispon√≠veis com seus dados
        console.log('üîç Projetos dispon√≠veis no DOM:');
        document.querySelectorAll('.project-block').forEach(proj => {
            console.log(`  - Projeto: ${proj.dataset.projectName}, 
                         ProjectID: ${proj.dataset.projectId}, 
                         ObraID: ${proj.dataset.obraId}, 
                         ObraName: ${proj.dataset.obraName}`);
        });
        return false;
    }
    
    console.log(`‚úÖ Projeto encontrado:`, projectElement.dataset);

    // ‚úÖ CORRE√á√ÉO: Gerar ID SEGURO hier√°rquico √∫nico para sala
    let finalRoomId;
    
    if (roomId && roomId !== 'undefined' && roomId !== 'null' && !roomId.includes('undefined')) {
        finalRoomId = roomId;
    } else {
        const roomCount = getRoomCountInProject(obraId, projectId);
        finalRoomId = generateRoomId(projectElement, roomCount + 1);
    }
    
    // ‚úÖ CORRE√á√ÉO: Limpar ID de poss√≠veis problemas
    finalRoomId = finalRoomId.toString()
        .replace(/-undefined/g, '')
        .replace(/-null/g, '')
        .trim();
    
    console.log(`üìù ID SEGURO DEFINITIVO DA SALA: "${finalRoomId}"`);
    
    try {
        const machinesModule = await loadMachinesPreloadModule();
        if (machinesModule && machinesModule.preloadMachinesDataForRoom) {
            await machinesModule.preloadMachinesDataForRoom(finalRoomId);
        }
    } catch (error) {
        console.error("‚ö†Ô∏è Aviso: N√£o foi poss√≠vel pr√©-carregar dados das m√°quinas:", error);
    }

    // ‚úÖ CORRE√á√ÉO: Passar IDs √∫nicos corretamente
    const roomHTML = buildRoomHTML(obraId, projectId, roomName, finalRoomId);
    
    const projectContent = projectElement.querySelector('.project-content');
    
    if (!projectContent) {
        console.error(`‚ùå Conte√∫do do projeto n√£o encontrado em ${projectId}`);
        return false;
    }

    removeEmptyProjectMessage(projectContent);
    
    const addRoomSection = projectContent.querySelector('.add-room-section');
    if (addRoomSection) {
        addRoomSection.insertAdjacentHTML('beforebegin', roomHTML);
    } else {
        projectContent.insertAdjacentHTML('beforeend', roomHTML);
    }

    console.log(`‚úÖ Sala ${roomName} criada (ID: ${finalRoomId}) na obra "${obraId}", projeto "${projectId}"`);
    
    initializeRoomComponents(obraId, projectId, roomName, finalRoomId);
    
    return true;
}

/**
 * Conta quantas salas j√° existem no projeto espec√≠fico - CORRE√á√ÉO COMPLETA
 * @param {string} obraId - ID √∫nico da obra
 * @param {string} projectId - ID √∫nico do projeto
 * @returns {number} Quantidade de salas no projeto
 */
function getRoomCountInProject(obraId, projectId) {
    // ‚úÖ CORRE√á√ÉO: Buscar por IDs √∫nicos
    const projectElement = document.querySelector(`[data-obra-id="${obraId}"][data-project-id="${projectId}"]`);
    if (!projectElement) return 0;
    
    const rooms = projectElement.querySelectorAll('.room-block');
    return rooms.length;
}

/**
 * Inicializa todos os componentes da sala ap√≥s cria√ß√£o
 * @param {string} obraId - ID √∫nico da obra
 * @param {string} projectId - ID √∫nico do projeto
 * @param {string} roomName - Nome da sala
 * @param {string} roomId - ID √∫nico da sala
 * @returns {void}
 */
function initializeRoomComponents(obraId, projectId, roomName, roomId) {
    console.log(`üîß Inicializando componentes da sala: ${roomName} (ID: ${roomId})`);
    
    // ‚úÖ CORRE√á√ÉO: Verificar se as fun√ß√µes existem antes de chamar
    const initializeWithRetry = (functionName, delay, maxAttempts = 5) => {
        let attempts = 0;
        
        const tryInitialize = () => {
            if (typeof window[functionName] === 'function') {
                window[functionName](roomId);
                console.log(`‚úÖ ${functionName} inicializado para ${roomId}`);
            } else if (attempts < maxAttempts) {
                attempts++;
                console.log(`‚è≥ Tentativa ${attempts}/${maxAttempts} - ${functionName} n√£o dispon√≠vel, tentando novamente...`);
                setTimeout(tryInitialize, delay);
            } else {
                console.log(`‚ÑπÔ∏è ${functionName} n√£o dispon√≠vel ap√≥s ${maxAttempts} tentativas - pode ser normal`);
            }
        };
        
        setTimeout(tryInitialize, delay);
    };
    
    // 1. Inicializar fator de seguran√ßa com retry
    initializeWithRetry('initializeFatorSeguranca', 300, 5);
    
    // 2. Sincronizar backup com retry
    initializeWithRetry('syncCapacityTableBackup', 500, 3);
    
    // 3. ‚úÖ CORRE√á√ÉO: Pr√©-carregar dados das m√°quinas
    setTimeout(async () => {
        try {
            const machinesModule = await import('./machines/machinesBuilder.js');
            if (machinesModule.preloadMachinesDataForRoom) {
                await machinesModule.preloadMachinesDataForRoom(roomId);
                console.log(`‚úÖ Dados das m√°quinas pr√©-carregados para ${roomId}`);
            }
        } catch (error) {
            console.log(`‚ÑπÔ∏è N√£o foi poss√≠vel pr√©-carregar dados das m√°quinas para ${roomId} - pode ser normal`);
        }
    }, 800);
}

/**
 * Fun√ß√£o auxiliar para inicializar fator de seguran√ßa de forma segura
 * @param {string} roomId - ID √∫nico da sala
 * @returns {void}
 */
function safeInitializeFatorSeguranca(roomId) {
    if (typeof window.initializeFatorSeguranca === 'function') {
        try {
            window.initializeFatorSeguranca(roomId);
            console.log(`‚úÖ Fator de seguran√ßa inicializado para ${roomId}`);
        } catch (error) {
            console.log(`‚ÑπÔ∏è Erro ao inicializar fator de seguran√ßa para ${roomId}:`, error.message);
        }
    } else {
        console.log(`‚ÑπÔ∏è initializeFatorSeguranca n√£o dispon√≠vel - aguardando carregamento`);
    }
}

/**
 * Insere o HTML de uma sala no conte√∫do do projeto
 * @param {string} obraId - ID √∫nico da obra
 * @param {string} projectId - ID √∫nico do projeto
 * @param {string} roomHTML - HTML da sala a ser inserida
 * @param {string} roomId - ID √∫nico da sala
 * @returns {void}
 */
function insertRoomIntoProject(obraId, projectId, roomHTML, roomId) {
    // ‚úÖ CORRE√á√ÉO: Buscar projeto por IDs √∫nicos
    const projectElement = document.querySelector(`[data-obra-id="${obraId}"][data-project-id="${projectId}"]`);
    if (!projectElement) {
        console.error(`‚ùå Projeto ${projectId} n√£o encontrado na obra ${obraId}`);
        return;
    }

    const projectContent = projectElement.querySelector('.project-content');
    if (!projectContent) {
        console.error(`‚ùå Conte√∫do do projeto ${projectId} n√£o encontrado`);
        return;
    }

    const addRoomSection = projectContent.querySelector(".add-room-section");
    if (addRoomSection) {
        addRoomSection.insertAdjacentHTML("beforebegin", roomHTML);
    } else {
        projectContent.insertAdjacentHTML("beforeend", roomHTML);
    }

    removeEmptyProjectMessage(projectContent);
    console.log(`‚úÖ Sala inserida no projeto ${projectId} (ID √∫nico: ${roomId})`);
}

/**
 * Adiciona uma nova sala ao projeto - CORRE√á√ÉO COMPLETA
 * @param {string} obraId - ID √∫nico da obra
 * @param {string} projectId - ID √∫nico do projeto
 * @returns {Promise<void>}
 */
async function addNewRoom(obraId, projectId) {
    console.log(`‚ûï Adicionando nova sala √† obra "${obraId}", projeto "${projectId}"`);
    
    // ‚úÖ CORRE√á√ÉO: Buscar por IDs √∫nicos
    const projectElement = document.querySelector(`[data-obra-id="${obraId}"][data-project-id="${projectId}"]`);
    
    if (!projectElement) {
        console.error(`‚ùå Projeto ${projectId} n√£o encontrado na obra ${obraId}`);
        return;
    }
    
    // Contar APENAS salas DESTE projeto espec√≠fico
    const roomCount = getRoomCountInProject(obraId, projectId);
    const roomName = `Sala${roomCount + 1}`;

    // Gerar ID DEFINITIVO automaticamente
    await createEmptyRoom(obraId, projectId, roomName, null);
    console.log(`‚úÖ ${roomName} adicionada √† obra "${obraId}", projeto "${projectId}"`);
}


/**
 * Remove uma sala do projeto ap√≥s confirma√ß√£o do usu√°rio - CORRE√á√ÉO COMPLETA
 * @param {string} obraId - ID √∫nico da obra
 * @param {string} projectId - ID √∫nico do projeto
 * @param {string} roomId - ID √∫nico da sala a ser removida
 * @returns {void}
 */
function deleteRoom(obraId, projectId, roomId) {
    // ‚úÖ CORRE√á√ÉO: Buscar por IDs √∫nicos
    const roomBlock = document.querySelector(`[data-obra-id="${obraId}"][data-project-id="${projectId}"][data-room-id="${roomId}"]`);
    
    if (!roomBlock) {
        console.error(`‚ùå Sala com ID ${roomId} n√£o encontrada no projeto ${projectId}, obra ${obraId}`);
        return;
    }

    const roomName = roomBlock.dataset.roomName;
    const projectContent = roomBlock.closest(".project-content");

    roomBlock.remove();
    
    if (projectContent && typeof window.showEmptyProjectMessageIfNeeded === 'function') {
        window.showEmptyProjectMessageIfNeeded(projectContent);
    }

    console.log(`üóëÔ∏è Sala ${roomName} (ID: ${roomId}) removida da obra "${obraId}", projeto "${projectId}"`);
}

/**
 * Fun√ß√£o de compatibilidade para c√≥digo existente que usa apenas projectName e roomName
 * @param {string} projectName - Nome do projeto
 * @param {string} roomName - Nome da sala
 * @returns {void}
 */
function deleteRoomLegacy(projectName, roomName) {
    // Tenta encontrar a obra do projeto
    const projectBlock = document.querySelector(`[data-project-name="${projectName}"]`);
    const obraId = projectBlock?.dataset.obraId;
    const projectId = projectBlock?.dataset.projectId;
    
    if (obraId && projectId) {
        // Encontrar sala pela hierarquia completa
        const roomBlock = document.querySelector(`[data-obra-id="${obraId}"][data-project-id="${projectId}"][data-room-name="${roomName}"]`);
        const roomId = roomBlock?.dataset.roomId;
        
        if (roomId) {
            return deleteRoom(obraId, projectId, roomId);
        } else {
            console.error(`‚ùå ID da sala ${roomName} n√£o encontrado`);
        }
    } else {
        console.error('‚ùå N√£o foi poss√≠vel determinar a obra do projeto:', projectName);
    }
}

/**
 * Corrige inputs de fator de seguran√ßa que estejam vazios
 * Aplica valores padr√£o baseados nas constantes do sistema
 * @returns {void}
 */
function fixExistingCapacityInputs() {
    console.log('üîÑ Verificando inputs de capacidade existentes...');
    
    // Encontrar todas as salas
    const roomBlocks = document.querySelectorAll('.room-block');
    
    roomBlocks.forEach(roomBlock => {
        const roomId = roomBlock.dataset.roomId;
        const roomName = roomBlock.dataset.roomName;
        const projectBlock = roomBlock.closest('.project-block');
        const projectId = projectBlock?.dataset.projectId;
        const obraId = projectBlock?.dataset.obraId;
        
        if (roomId) {
            const input = document.getElementById(`fator-seguranca-${roomId}`);
            
            if (input && input.value === '') {
                const valor = window.systemConstants?.FATOR_SEGURANCA_CAPACIDADE || 10;
                input.value = valor;
                console.log(`‚úÖ Input ${roomId} corrigido: ${valor}% (Obra: ${obraId}, Projeto: ${projectId})`);
            }
        }
    });
}

// Executar quando o projeto for carregado
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(fixExistingCapacityInputs, 2000);
});

// Exporta√ß√µes simplificadas
export {
    createEmptyRoom,
    insertRoomIntoProject,
    addNewRoom,
    deleteRoom,
    deleteRoomLegacy,
    safeInitializeFatorSeguranca
}

// Disponibiliza√ß√£o global correta
if (typeof window !== 'undefined') {
    window.addNewRoom = addNewRoom;
    window.deleteRoom = deleteRoom;
    window.createEmptyRoom = createEmptyRoom;
    window.safeInitializeFatorSeguranca = safeInitializeFatorSeguranca;
}
