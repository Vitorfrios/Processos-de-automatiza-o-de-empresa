// machineManagement.js

import { loadMachinesData } from './machinesBuilder.js'
import { updateElementText, removeEmptyMessage, showEmptyMessage } from './utilities.js'


/**
 * Gera um ID √∫nico para m√°quina baseado na sala e timestamp
 * @param {string} roomId - ID da sala
 * @returns {string} ID √∫nico da m√°quina
 */
function generateUniqueMachineId(roomId) {
  return `machine-${roomId}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
}

/**
 * Adiciona uma nova m√°quina de climatiza√ß√£o √† sala especificada - CORRE√á√ÉO
 * @param {string} roomId - ID da sala onde a m√°quina ser√° adicionada
 * @returns {Promise<void>}
 */
async function addMachine(roomId) {
  console.log(`‚ûï [ADD MACHINE] Iniciando para sala: ${roomId}`);

  const machinesContainer = document.getElementById(`machines-${roomId}`);
  if (!machinesContainer) {
    console.error(`‚ùå Container de m√°quinas n√£o encontrado para sala: ${roomId}`);
    return;
  }

  // ‚úÖ CORRE√á√ÉO: Contar m√°quinas APENAS desta sala espec√≠fica
  const roomMachineCount = machinesContainer.querySelectorAll(".climatization-machine").length;

  // ‚úÖ CORRE√á√ÉO: Usar ID √∫nico baseado na sala
  const uniqueMachineId = generateUniqueMachineId(roomId);
  const machineDisplayNumber = roomMachineCount + 1;

  removeEmptyMessage(machinesContainer);

  console.log(`‚ûï Adicionando m√°quina ${machineDisplayNumber} (sala: ${roomId}, ID √∫nico: ${uniqueMachineId})`);

  try {
    if (!window.machinesData || window.machinesData.length === 0) {
      console.log("üîÑ Cache n√£o encontrado, carregando dados das m√°quinas...");
      await loadMachinesData();
    }

    if (!window.machinesData || window.machinesData.length === 0) {
      throw new Error("Nenhum dado de m√°quina dispon√≠vel ap√≥s carregamento");
    }

    // ‚úÖ CORRE√á√ÉO: Passar roomId e ID √∫nico para a constru√ß√£o
    const machineHTML = buildClimatizationMachineHTML(uniqueMachineId, machineDisplayNumber, window.machinesData, roomId);
    machinesContainer.insertAdjacentHTML("beforeend", machineHTML);

    console.log(`‚úÖ M√°quina ${machineDisplayNumber} adicionada √† sala ${roomId}`);

    // ‚úÖ CORRE√á√ÉO: Atualizar TOTAL GERAL em TODAS as m√°quinas
    updateAllMachinesTotalDisplay(roomId);

  } catch (error) {
    console.error("‚ùå Erro ao adicionar m√°quina:", error);
    showEmptyMessage(machinesContainer, "Erro ao carregar dados das m√°quinas");
  }
}

/**
 * Atualiza o display do total geral de TODAS as m√°quinas
 * @param {string} roomId - ID da sala
 * @returns {void}
 */
function updateAllMachinesTotalDisplay(roomId) {
    const totalGeral = calculateTotalAllMachinesPrice(roomId);
    const totalDisplay = document.getElementById(`total-all-machines-price-${roomId}`);
    
    if (totalDisplay) {
        totalDisplay.textContent = `R$ ${totalGeral.toLocaleString('pt-BR')}`;
        console.log(`üìä Total Geral atualizado: R$ ${totalGeral.toLocaleString('pt-BR')}`);
    }
    
    // Salvar no JSON da sala
    saveTotalAllMachinesPriceToRoom(roomId, totalGeral);
}

/**
 * Constr√≥i o HTML completo para uma m√°quina de climatiza√ß√£o - CORRE√á√ÉO
 * @param {string} machineId - ID √∫nico da m√°quina
 * @param {number} displayNumber - N√∫mero de exibi√ß√£o (1, 2, 3...)
 * @param {Array} machines - Lista de m√°quinas dispon√≠veis
 * @param {string} roomId - ID da sala (para refer√™ncia)
 * @returns {string} HTML da m√°quina de climatiza√ß√£o
 */
function buildClimatizationMachineHTML(machineId, displayNumber, machines, roomId) {
  const machineTypes = machines.map((m) => m.type);

  return `
      <div class="climatization-machine" data-machine-id="${machineId}" data-room-id="${roomId}">
          <div class="machine-header">
              <button class="minimizer" onclick="toggleMachineSection(this)">‚àí</button>
              <input type="text" class="machine-title-editable" value="Maquina${displayNumber}"
                  onchange="updateMachineTitle(this, '${machineId}')" onclick="this.select()">
              <button class="btn btn-delete-small" onclick="deleteClimatizationMachine(this)">Remover</button>
          </div>
          <div class="machine-content" id="machine-content-${machineId}">
              <div class="climatization-form-grid">
                  ${buildFormGroup(
                  "Tipo de Equipamento:",
                  buildSelectWithDefault(machineTypes, machineId, "machine-type-select", "updateMachineOptions(this)",
                  "Selecionar M√°quina"),
                  )}
                  ${buildFormGroup(
                  "Capacidade:",
                  buildSelectWithDefault([], machineId, "machine-power-select", `handlePowerChange('${machineId}')`,
                  "Selecionar capacidade", true),
                  )}
                  ${buildFormGroup(
                  "Tens√£o:",
                  buildSelectWithDefault([], machineId, "machine-voltage-select", `calculateMachinePrice('${machineId}')`,
                  "Selecionar Tens√£o", true),
                  )}
                  <div class="form-group">
                      <label>Pre√ßo Base:</label>
                      <div class="price-display" id="base-price-${machineId}">
                          R$ 0,00
                      </div>
                      <div class="machine-total-price"> <!-- Pre√ßo final desta m√°quina -->
                          <strong>Pre√ßo Total desta M√°quina: <span id="total-price-${machineId}">R$ 0,00</span></strong>
                      </div>
                  </div>
              </div>
              <div class="machine-options-section">
                  <h6>Op√ß√µes Adicionais:</h6>
                  <div class="options-grid" id="options-container-${machineId}">
                      <p class="empty-options-message">Selecione um tipo de m√°quina e sua capacidade para ver as op√ß√µes e seus
                          valores</p>
                  </div>
              </div>

              <!-- ‚úÖ NOVO: Pre√ßo total de TODAS as m√°quinas da sala -->
          </div>
          <div class="all-machines-total-price">
              <strong>Total Geral de Todas as M√°quinas da Sala: <span id="total-all-machines-price-${roomId}">R$
                      0,00</span></strong>
          </div>
      </div>
    `;
}

/**
 * Constr√≥i um grupo de formul√°rio com label e conte√∫do
 * @param {string} label - Texto do label
 * @param {string} content - Conte√∫do HTML do campo
 * @returns {string} HTML do grupo de formul√°rio
 */
function buildFormGroup(label, content) {
  return `
    <div class="form-group">
      <label>${label}</label>
      ${content}
    </div>
  `
}

/**
 * Constr√≥i um elemento select com op√ß√µes e handlers
 * @param {Array} options - Lista de op√ß√µes do select
 * @param {number} machineId - ID √∫nico da m√°quina
 * @param {string} className - Classe CSS do select
 * @param {string} onchangeHandler - Fun√ß√£o a ser executada onchange
 * @param {string} defaultText - Texto padr√£o para op√ß√£o vazia
 * @param {boolean} disabled - Se o select deve iniciar desabilitado
 * @returns {string} HTML do elemento select
 */
function buildSelectWithDefault(options, machineId, className, onchangeHandler, defaultText = "Selecionar", disabled = false) {
  const disabledAttr = disabled ? 'disabled' : ''
  return `
    <select class="form-input ${className}" 
            data-machine-id="${machineId}"
            onchange="${onchangeHandler}"
            ${disabledAttr}>
      <option value="">${defaultText}</option>
      ${options.map((opt) => `<option value="${opt}">${opt}</option>`).join("")}
    </select>
  `
}

/**
 * Constr√≥i a interface de op√ß√µes adicionais da m√°quina
 * @param {Array} options - Lista de op√ß√µes dispon√≠veis
 * @param {number} machineId - ID √∫nico da m√°quina
 * @param {string} selectedPower - Pot√™ncia selecionada (TR)
 * @param {Array} selectedOptions - Op√ß√µes pr√©-selecionadas
 * @returns {string} HTML das op√ß√µes
 */
function buildOptionsHTML(options, machineId, selectedPower = null, selectedOptions = []) {
  if (!options || options.length === 0) {
    return '<p class="empty-options-message">Nenhuma op√ß√£o dispon√≠vel para esta m√°quina</p>'
  }

  return options
    .map((option) => {
      const isSelected = selectedOptions.some(selected => selected.id === option.id);
      const selectedClass = isSelected ? 'option-selected' : '';

      let optionValue = 0;
      if (selectedPower && option.values && option.values[selectedPower] !== undefined) {
        optionValue = option.values[selectedPower];
      }

      const optionDisplayValue = `+R$ ${optionValue.toLocaleString("pt-BR")}`;

      return `
        <div class="option-item ${selectedClass}" onclick="handleOptionClick('${machineId}', ${option.id})">
          <div class="option-checkbox">
            <input type="checkbox" 
                  value="${optionValue}" 
                  data-option-id="${option.id}"
                  data-option-name="${option.name}"
                  onchange="updateOptionSelection('${machineId}', '${option.id}'); calculateMachinePrice('${machineId}')"
                  id="option-${machineId}-${option.id}"
                  ${isSelected ? 'checked' : ''}>
            <div class="option-content">
              <div class="option-name">${option.name}</div>
              <div class="option-price">${optionDisplayValue}</div>
            </div>
          </div>
        </div>
      `;
    })
    .join("")
}

/**
 * Manipula a mudan√ßa de pot√™ncia (TR) da m√°quina
 * Atualiza pre√ßo base e valores das op√ß√µes
 * @param {number} machineId - ID √∫nico da m√°quina
 * @returns {void}
 */
function handlePowerChange(machineId) {
  console.log(`üîß Mudan√ßa de pot√™ncia na m√°quina ${machineId}`);

  // Atualizar pre√ßo base
  calculateMachinePrice(machineId);

  // Atualizar valores das op√ß√µes
  updateOptionValues(machineId);
}

/**
 * Atualiza os valores das op√ß√µes quando a pot√™ncia √© alterada
 * @param {number} machineId - ID √∫nico da m√°quina
 * @returns {void}
 */
function updateOptionValues(machineId) {
  const machineElement = document.querySelector(`[data-machine-id="${machineId}"]`);
  if (!machineElement) {
    console.error(`‚ùå M√°quina ${machineId} n√£o encontrada`);
    return;
  }

  const typeSelect = machineElement.querySelector('.machine-type-select');
  const powerSelect = machineElement.querySelector('.machine-power-select');

  const selectedType = typeSelect?.value;
  const selectedPower = powerSelect?.value;

  console.log(`üîß Atualizando op√ß√µes para m√°quina ${machineId}:`, { selectedType, selectedPower });

  if (!selectedType || !selectedPower || !window.machinesData) {
    console.log('‚ö†Ô∏è Tipo ou pot√™ncia n√£o selecionados');
    return;
  }

  const machine = window.machinesData.find(m => m.type === selectedType);
  if (!machine || !machine.options) {
    console.error(`‚ùå M√°quina ${selectedType} n√£o encontrada nos dados`);
    return;
  }

  const optionsContainer = document.getElementById(`options-container-${machineId}`);
  if (!optionsContainer) {
    console.error(`‚ùå Container de op√ß√µes n√£o encontrado para m√°quina ${machineId}`);
    return;
  }

  console.log(`üîß Atualizando ${machine.options.length} op√ß√µes para TR ${selectedPower}`);

  // Atualizar valores e display de todas as op√ß√µes
  machine.options.forEach(option => {
    const checkbox = document.getElementById(`option-${machineId}-${option.id}`);
    if (checkbox) {
      let optionValue = 0;
      if (selectedPower && option.values && option.values[selectedPower] !== undefined) {
        optionValue = option.values[selectedPower];
        console.log(`üí∞ Op√ß√£o ${option.name}: R$ ${optionValue} para ${selectedPower}`);
      }

      // Atualizar valor do checkbox
      checkbox.value = optionValue;

      // Atualizar display do pre√ßo
      const priceDisplay = checkbox.closest('.option-item')?.querySelector('.option-price');
      if (priceDisplay) {
        const optionDisplayValue = `+R$ ${optionValue.toLocaleString("pt-BR")}`;
        priceDisplay.textContent = optionDisplayValue;
        console.log(`üìù Atualizado display: ${option.name} = ${optionDisplayValue}`);
      }
    } else {
      console.warn(`‚ö†Ô∏è Checkbox n√£o encontrado para op√ß√£o ${option.id}`);
    }
  });

  // Recalcular pre√ßo total
  calculateMachinePrice(machineId);
  console.log(`‚úÖ Op√ß√µes atualizadas para TR ${selectedPower}`);
}

/**
 * Manipula o clique na op√ß√£o para alternar sele√ß√£o
 * @param {number} machineId - ID √∫nico da m√°quina
 * @param {number} optionId - ID da op√ß√£o
 * @returns {void}
 */
function handleOptionClick(machineId, optionId) {
  const checkbox = document.getElementById(`option-${machineId}-${optionId}`)
  if (checkbox) {
    checkbox.checked = !checkbox.checked
    // Disparar o evento change manualmente para garantir que todos os handlers sejam executados
    const event = new Event('change', { bubbles: true })
    checkbox.dispatchEvent(event)
  }
}

/**
 * Atualiza a apar√™ncia visual da op√ß√£o quando selecionada/deselecionada
 * @param {number} machineId - ID √∫nico da m√°quina
 * @param {number} optionId - ID da op√ß√£o
 * @returns {void}
 */
function updateOptionSelection(machineId, optionId) {
  const checkbox = document.getElementById(`option-${machineId}-${optionId}`)
  const optionItem = checkbox?.closest('.option-item')

  if (optionItem) {
    if (checkbox.checked) {
      optionItem.classList.add('option-selected')
    } else {
      optionItem.classList.remove('option-selected')
    }
    console.log(`üîß Op√ß√£o ${optionId} ${checkbox.checked ? 'selecionada' : 'deselecionada'} na m√°quina ${machineId}`)
  }
}

/**
 * Alterna a exibi√ß√£o da se√ß√£o da m√°quina (expandir/recolher)
 * @param {HTMLButtonElement} button - Bot√£o que acionou a fun√ß√£o
 * @returns {void}
 */
function toggleMachineSection(button) {
  const machineContent = button.closest(".climatization-machine").querySelector(".machine-content")
  const isCollapsed = machineContent.classList.toggle("collapsed")
  button.textContent = isCollapsed ? "+" : "‚àí"
}

/**
 * Atualiza o t√≠tulo da m√°quina quando editado pelo usu√°rio
 * @param {HTMLInputElement} input - Campo de input do t√≠tulo
 * @param {number} machineId - ID √∫nico da m√°quina
 * @returns {void}
 */
function updateMachineTitle(input, machineId) {
  const newTitle = input.value.trim()
  if (!newTitle) {
    input.value = `Maquina${machineId}`
  }
}

/**
 * Atualiza as op√ß√µes da m√°quina quando o tipo √© alterado
 * Carrega novos dados de pot√™ncia, tens√£o e op√ß√µes
 * @param {HTMLSelectElement} selectElement - Select do tipo de m√°quina
 * @returns {Promise<void>}
 */
async function updateMachineOptions(selectElement) {
  const machineId = selectElement.getAttribute("data-machine-id");
  const selectedType = selectElement.value;

  console.log(`üîÑ Atualizando op√ß√µes para m√°quina ${machineId}, tipo: ${selectedType}`);

  if (!selectedType) {
    resetMachineFields(machineId);
    return;
  }

  try {
    // Buscar nos dados em cache
    if (window.machinesData && window.machinesData.length > 0) {
      const selectedMachine = window.machinesData.find((m) => m.type === selectedType);
      if (selectedMachine) {
        console.log(`‚úÖ M√°quina encontrada no cache: ${selectedType}`);
        updateMachineUI(machineId, selectedMachine);
        return;
      }
    }

    // Carregar dados do servidor
    console.log("üöÄ Carregando dados do servidor...");
    const response = await fetch('/machines');
    if (response.ok) {
      const data = await response.json();
      const machines = Array.isArray(data) ? data : data.machines;
      window.machinesData = machines;

      const selectedMachine = machines.find((m) => m.type === selectedType);
      if (selectedMachine) {
        console.log(`‚úÖ M√°quina encontrada no servidor: ${selectedType}`);
        updateMachineUI(machineId, selectedMachine);
      } else {
        console.error(`‚ùå M√°quina n√£o encontrada: ${selectedType}`);
        resetMachineFields(machineId);
      }
    } else {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

  } catch (error) {
    console.error("‚ùå Erro ao atualizar op√ß√µes:", error);
    resetMachineFields(machineId);
  }
}

/**
 * Atualiza a UI da m√°quina com novos dados
 * @param {number} machineId - ID √∫nico da m√°quina
 * @param {Object} selectedMachine - Dados da m√°quina selecionada
 * @returns {void}
 */
function updateMachineUI(machineId, selectedMachine) {
  console.log(`üéØ Atualizando UI completa para m√°quina ${machineId}`);

  // Atualizar pot√™ncias
  const potencies = Object.keys(selectedMachine.baseValues || {});
  updateSelect(`.machine-power-select[data-machine-id="${machineId}"]`, potencies, "Selecionar Capacidade", false);

  // Atualizar tens√µes
  const voltageNames = (selectedMachine.voltages || []).map(v => v.name);
  updateSelect(`.machine-voltage-select[data-machine-id="${machineId}"]`, voltageNames, "Selecionar Tens√£o", false);

  // Atualizar op√ß√µes
  const optionsContainer = document.getElementById(`options-container-${machineId}`);

  if (optionsContainer) {
    console.log(`üîß Container de op√ß√µes encontrado para m√°quina ${machineId}`);

    // Limpar completamente o container
    optionsContainer.innerHTML = '';

    const options = selectedMachine.options || [];
    console.log(`üîß Renderizando ${options.length} op√ß√µes para m√°quina ${machineId}`);

    if (options.length > 0) {
      const optionsHTML = buildOptionsHTML(options, machineId, null, []);
      optionsContainer.innerHTML = optionsHTML;
      console.log(`‚úÖ ${options.length} op√ß√µes HTML inseridas no container da m√°quina ${machineId}`);

      // Garantir que as op√ß√µes sejam vis√≠veis
      setTimeout(() => {
        const renderedOptions = optionsContainer.querySelectorAll('.option-item');
        console.log(`üëÅÔ∏è ${renderedOptions.length} op√ß√µes vis√≠veis no DOM para m√°quina ${machineId}`);

        // Atualizar sele√ß√£o visual de todas as op√ß√µes
        options.forEach(option => {
          updateOptionSelection(machineId, option.id);
        });
      }, 50);
    } else {
      optionsContainer.innerHTML = '<p class="empty-options-message">Nenhuma op√ß√£o dispon√≠vel para esta m√°quina</p>';
    }
  } else {
    console.error(`‚ùå Container de op√ß√µes n√£o encontrado para m√°quina ${machineId}`);
  }

  // Resetar pre√ßos
  updateElementText(`base-price-${machineId}`, `R$ 0,00`);
  updateElementText(`total-price-${machineId}`, `R$ 0,00`);

  console.log(`‚úÖ UI completamente atualizada para m√°quina ${machineId}`);
}

/**
 * Reseta os campos da m√°quina para o estado inicial
 * @param {number} machineId - ID √∫nico da m√°quina
 * @returns {void}
 */
function resetMachineFields(machineId) {
  console.log(`üîÑ Resetando campos da m√°quina ${machineId}`);

  updateSelect(`.machine-power-select[data-machine-id="${machineId}"]`, [], "Selecionar Capacidade", true);
  updateSelect(`.machine-voltage-select[data-machine-id="${machineId}"]`, [], "Selecionar Tens√£o", true);

  const optionsContainer = document.getElementById(`options-container-${machineId}`);
  if (optionsContainer) {
    optionsContainer.innerHTML = '<p class="empty-options-message">Selecione um tipo de m√°quina para ver as op√ß√µes</p>';
  }

  updateElementText(`base-price-${machineId}`, `R$ 0,00`);
  updateElementText(`total-price-${machineId}`, `R$ 0,00`);
}

/**
 * Atualiza as op√ß√µes de um elemento select
 * @param {string} selector - Seletor do elemento select
 * @param {Array} options - Novas op√ß√µes a serem adicionadas
 * @param {string} defaultText - Texto da op√ß√£o padr√£o
 * @param {boolean} disabled - Se deve desabilitar o select
 * @returns {void}
 */
function updateSelect(selector, options, defaultText = "Selecionar", disabled = false) {
  const select = document.querySelector(selector);
  if (select) {
    select.innerHTML = `
            <option value="">${defaultText}</option>
            ${options.map((opt) => `<option value="${opt}">${opt}</option>`).join("")}
        `;
    select.disabled = disabled;
    console.log(`üîß Select ${selector} atualizado com ${options.length} op√ß√µes`);
  } else {
    console.error(`‚ùå Select n√£o encontrado: ${selector}`);
  }
}

/**
 * Calcula o pre√ßo total da m√°quina considerando pre√ßo base e op√ß√µes selecionadas
 * @param {number} machineId - ID √∫nico da m√°quina a ser calculada
 * @returns {void}
 */
function calculateMachinePrice(machineId) {
  try {
    const machineElement = document.querySelector(`[data-machine-id="${machineId}"]`)
    if (!machineElement) return


    // Obter tipo, pot√™ncia e tens√£o selecionados
    const typeSelect = machineElement.querySelector('.machine-type-select')
    const powerSelect = machineElement.querySelector('.machine-power-select')
    const voltageSelect = machineElement.querySelector('.machine-voltage-select')

    const selectedType = typeSelect?.value
    const selectedPower = powerSelect?.value
    const selectedVoltage = voltageSelect?.value

    let basePrice = 0
    let voltageValue = 0

    // Calcular pre√ßo base apenas se tipo e pot√™ncia estiverem selecionados
    if (selectedType && selectedPower && window.machinesData) {
      const machine = window.machinesData.find(m => m.type === selectedType)
      if (machine && machine.baseValues) {
        basePrice = machine.baseValues[selectedPower] || 0
        console.log(`üí∞ Pre√ßo base para ${selectedType} ${selectedPower}: R$ ${basePrice}`)
      }
    }

    // Calcular valor da tens√£o apenas se tens√£o estiver selecionada
    if (selectedType && selectedVoltage && window.machinesData) {
      const machine = window.machinesData.find(m => m.type === selectedType)
      if (machine && machine.voltages) {
        const voltageObj = machine.voltages.find(v => v.name === selectedVoltage)
        voltageValue = voltageObj ? voltageObj.value : 0
        console.log(`‚ö° Tens√£o ${selectedVoltage}: R$ ${voltageValue}`)
      }
    }

    // Atualizar display do pre√ßo base
    updateElementText(`base-price-${machineId}`, `R$ ${basePrice.toLocaleString("pt-BR")}`)

    // Calcular total das op√ß√µes
    const optionsContainer = document.getElementById(`options-container-${machineId}`)
    let optionsTotal = 0

    if (optionsContainer) {
      const selectedOptions = optionsContainer.querySelectorAll('input[type="checkbox"]:checked')
      console.log(`üìã ${selectedOptions.length} op√ß√µes selecionadas`)

      selectedOptions.forEach((option) => {
        const optionValue = Number.parseFloat(option.value) || 0
        optionsTotal += optionValue
        console.log(`‚úÖ Op√ß√£o: ${option.getAttribute('data-option-name')} - R$ ${optionValue}`)
      })
    }

    const totalPrice = basePrice + optionsTotal + voltageValue

    // Atualizar display do pre√ßo total INDIVIDUAL
    updateElementText(`total-price-${machineId}`, `R$ ${totalPrice.toLocaleString("pt-BR")}`)

    console.log(`üßÆ Pre√ßo INDIVIDUAL calculado m√°quina ${machineId}: R$ ${totalPrice}`)

    // ‚úÖ CORRE√á√ÉO: Atualizar TOTAL GERAL em TODAS as m√°quinas da sala
    const roomId = machineElement.dataset.roomId;
    if (roomId) {
      updateAllMachinesTotalDisplay(roomId);
    }

  } catch (error) {
    console.error("Erro ao calcular pre√ßo:", error)
  }
}


/**
 * Remove uma m√°quina de climatiza√ß√£o ap√≥s confirma√ß√£o do usu√°rio
 * @param {HTMLButtonElement} button - Bot√£o de remover que acionou a fun√ß√£o
 * @returns {void}
 */
function deleteClimatizationMachine(button) {
  const machineItem = button.closest(".climatization-machine")
  const roomId = machineItem.dataset.roomId;

  machineItem.remove()

  // ‚úÖ CORRE√á√ÉO: Atualizar TOTAL GERAL em TODAS as m√°quinas restantes
  if (roomId) {
    updateAllMachinesTotalDisplay(roomId);
  }


  // Mostrar mensagem de vazio se n√£o houver m√°quinas
  if (machinesContainer && machinesContainer.querySelectorAll('.climatization-machine').length === 0) {
    showEmptyMessage(machinesContainer, "Nenhuma m√°quina adicionada ainda.")
  }
}

// Exporta√ß√£o e disponibiliza√ß√£o global - CORRE√á√ÉO COMPLETA
if (typeof window !== 'undefined') {
  window.addMachine = addMachine;
  window.toggleMachineSection = toggleMachineSection;
  window.updateMachineTitle = updateMachineTitle;
  window.updateMachineOptions = updateMachineOptions;
  window.calculateMachinePrice = calculateMachinePrice;
  window.deleteClimatizationMachine = deleteClimatizationMachine;
  window.deleteMachine = deleteClimatizationMachine;
  window.handleOptionClick = handleOptionClick;
  window.updateOptionSelection = updateOptionSelection;
  window.updateOptionValues = updateOptionValues;
  window.handlePowerChange = handlePowerChange;
}

export {
  addMachine,
  buildClimatizationMachineHTML,
  toggleMachineSection,
  updateMachineTitle,
  updateMachineOptions,
  calculateMachinePrice,
  deleteClimatizationMachine,
  handleOptionClick,
  updateOptionSelection,
  updateOptionValues,
  handlePowerChange
}
// machineBuilder.js
// SISTEMA CORRIGIDO COM IDs √öNICOS

import { buildCapacityCalculationTable } from './capacityCalculator.js'
import { removeEmptyMessage } from './utilities.js'
import { generateSecureId } from '../../data-files/data-utils-core.js' // ‚úÖ NOVA IMPORT

if (typeof window !== 'undefined' && !window.machinesDataCache) {
    window.machinesDataCache = null;
}

/**
 * Constr√≥i a se√ß√£o completa de m√°quinas para uma sala
 * Inclui tabela de capacidade e container para m√°quinas
 * @param {string} obraId - ID √∫nico da obra
 * @param {string} projectId - ID √∫nico do projeto
 * @param {string} roomName - Nome da sala
 * @param {string} finalRoomId - ID √∫nico da sala
 * @returns {string} HTML da se√ß√£o de m√°quinas
 */
function buildMachinesSection(obraId, projectId, roomName, finalRoomId) {
  const roomId = finalRoomId;

  if (!roomId || roomId === 'undefined' || roomId === 'null') {
      console.error(`ERRO FALBACK (buildMachinesSection) machineBuilder.js [Room ID inv√°lido: ${roomId}]`);
      return '';
  }

  return `
    <div class="section-block">
      <div class="section-header">
        <button class="minimizer" onclick="toggleSection('${roomId}-maquinas')">+</button>
        <h4 class="section-title">M√°quinas</h4>
        <button class="btn btn-add-small" onclick="addMachine('${roomId}')">+ Adicionar </button>
      </div>
      <div class="section-content collapsed" id="section-content-${roomId}-maquinas">
        ${buildCapacityCalculationTable(roomId)}
        
        <div class="machines-container" id="machines-${roomId}">
          <p class="empty-message">Nenhuma m√°quina adicionada ainda.</p>
        </div>
        
        <!-- ‚úÖ TOTAL GERAL: FORA do machines-container, DENTRO da section-content -->
        <div class="all-machines-total-price">
          <strong>Total Geral de Todas as M√°quinas da Sala: 
            <span id="total-all-machines-price-${roomId}">R$ 0,00</span>
          </strong>
        </div>
      </div>
    </div>
  `;
}

/**
 * Carrega os dados das m√°quinas do servidor com cache - CORRIGIDA
 * @returns {Promise<Object>} Dados das m√°quinas dispon√≠veis
 */
async function loadMachinesData() {
    // Verificar se o cache √© v√°lido (n√£o apenas se existe)
    if (window.machinesDataCache && Array.isArray(window.machinesDataCache.machines) && window.machinesDataCache.machines.length > 0) {
        console.log("üì¶ Retornando dados das m√°quinas do cache GLOBAL (v√°lido)");
        return window.machinesDataCache;
    }

    try {
        console.log("üîÑ Carregando dados das m√°quinas do servidor...");
        const response = await fetch(`/machines`);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        const machinesData = { machines: Array.isArray(data) ? data : data.machines };
        
        // Cache GLOBAL - dispon√≠vel para todas as m√°quinas de todas as salas
        window.machinesDataCache = machinesData;
        window.machinesData = machinesData.machines;
        
        console.log(`‚úÖ Dados das m√°quinas carregados GLOBALMENTE: ${machinesData.machines.length} m√°quinas`);
        return machinesData;
        
    } catch (error) {
        console.error("‚ùå Erro ao carregar dados das m√°quinas:", error);

        // Se houver cache antigo, usar mesmo que incompleto
        if (window.machinesDataCache) {
            console.log("üîÑ Usando cache antigo devido ao erro");
            return window.machinesDataCache;
        }

        // Retorna dados vazios apenas se n√£o houver cache
        const emptyData = { machines: [] };
        window.machinesDataCache = emptyData;
        return emptyData;
    }
}

/**
 * Gera ID √∫nico para m√°quina baseado na sala - CORRE√á√ÉO COMPLETA
 * @param {string} roomId - ID √∫nico da sala
 * @returns {string} ID √∫nico da m√°quina
 */
function generateMachineId(roomId) {
    // ‚úÖ CORRE√á√ÉO: Validar roomId
    if (!roomId || roomId === 'undefined' || roomId === 'null') {
        console.error(`ERRO FALBACK (generateMachineId) machineBuilder.js [Room ID inv√°lido: ${roomId}]`);
        return generateSecureId('machine');
    }
    
    const machinePrefix = generateSecureId('machine').replace('machine_', '');
    return `${roomId}_machine_${machinePrefix}_${Date.now()}`;
}

/**
 * Carrega m√°quinas salvas previamente para uma sala - CORRE√á√ÉO COMPLETA
 * @param {string} roomId - ID √∫nico da sala
 * @param {Array} savedMachines - Lista de m√°quinas salvas
 */
async function loadSavedMachines(roomId, savedMachines) {
    // ‚úÖ CORRE√á√ÉO: Validar roomId
    if (!roomId || roomId === 'undefined' || roomId === 'null') {
        console.error(`ERRO FALBACK (loadSavedMachines) machineBuilder.js [Room ID inv√°lido: ${roomId}]`);
        return;
    }
    
    const machinesContainer = document.getElementById(`machines-${roomId}`);
    
    if (!savedMachines?.length) {
        console.log(`üì≠ Nenhuma m√°quina salva para a sala ${roomId}`);
        return;
    }

    if (!machinesContainer) {
        console.error(`‚ùå Container de m√°quinas n√£o encontrado: machines-${roomId}`);
        return;
    }

    removeEmptyMessage(machinesContainer);

    try {
        const machinesData = await loadMachinesData();
        console.log(`üîÑ Carregando ${savedMachines.length} m√°quinas salvas para ${roomId}`);
        
        savedMachines.forEach((savedMachine, index) => {
            // ‚úÖ CORRE√á√ÉO: Gerar ID √∫nico para cada m√°quina
            const machineId = generateMachineId(roomId);
            const machineHTML = buildClimatizationMachineFromSavedData(machineId, savedMachine, machinesData.machines);
            machinesContainer.insertAdjacentHTML("beforeend", machineHTML);
            console.log(`‚úÖ M√°quina carregada: ${savedMachine.nome} (ID: ${machineId})`);
        });

        // Aguardar a DOM atualizar e ent√£o for√ßar atualiza√ß√£o dos valores
        setTimeout(() => {
            const machineElements = machinesContainer.querySelectorAll('.climatization-machine');
            machineElements.forEach((machineElement, index) => {
                const machineId = machineElement.dataset.machineId;
                const savedMachine = savedMachines[index];
                
                if (savedMachine) {
                    console.log(`üîß Processando m√°quina ${machineId} com TR: ${savedMachine.potencia} e Tens√£o: ${savedMachine.tensao}`);
                    
                    // For√ßar atualiza√ß√£o dos valores baseados na TR salva
                    if (savedMachine.potencia && window.updateOptionValues) {
                        console.log(`üîÑ Atualizando op√ß√µes para TR ${savedMachine.potencia}`);
                        window.updateOptionValues(machineId);
                    }
                    
                    // Recalcular pre√ßo total
                    if (window.calculateMachinePrice) {
                        window.calculateMachinePrice(machineId);
                    }
                }
            });
        }, 200);

    } catch (error) {
        console.error("‚ùå Erro ao carregar m√°quinas salvas:", error);
    }
}

/**
 * Constr√≥i uma m√°quina de climatiza√ß√£o a partir de dados salvos - CORRE√á√ÉO COMPLETA
 * @param {string} machineId - ID √∫nico da m√°quina
 * @param {Object} savedMachine - Dados da m√°quina salvos
 * @param {Array} allMachines - Lista de todas as m√°quinas dispon√≠veis
 * @returns {string} HTML da m√°quina reconstru√≠da
 */
function buildClimatizationMachineFromSavedData(machineId, savedMachine, allMachines) {
    // ‚úÖ CORRE√á√ÉO: Validar machineId
    if (!machineId || machineId === 'undefined' || machineId === 'null') {
        console.error(`ERRO FALBACK (buildClimatizationMachineFromSavedData) machineBuilder.js [Machine ID inv√°lido: ${machineId}]`);
        machineId = generateSecureId('machine');
    }

    const machineType = allMachines.find((m) => m.type === savedMachine.tipo);

    if (!machineType) {
        console.error("‚ùå ERRO: Tipo de M√°quina n√£o encontrado:", savedMachine.tipo);
        return '';
    }

    // Obter pot√™ncias e tens√µes dispon√≠veis
    const potencies = Object.keys(machineType.baseValues || {});
    const voltageNames = (machineType.voltages || []).map(v => v.name);
    
    // Calcular pre√ßo base atual - usar valores espec√≠ficos por TR
    const basePrice = calculateBasePrice(machineType, savedMachine.potencia);


  return `
      <div class="climatization-machine" data-machine-id="${machineId}" data-room-id="${roomId}">
          <div class="machine-header">
              <button class="minimizer" onclick="toggleMachineSection(this)">‚àí</button>
              <input type="text" class="machine-title-editable" value="Maquina${displayNumber}"
                  onchange="updateMachineTitle(this, '${machineId}')" onclick="this.select()">
              <button class="btn btn-delete-small" onclick="deleteClimatizationMachine(this)">Remover</button>
          </div>
          <div class="machine-content" id="machine-content-${machineId}">
              <div class="climatization-form-grid">
                  ${buildFormGroup(
                  "Tipo de Equipamento:",
                  buildSelectWithDefault(machineTypes, machineId, "machine-type-select", "updateMachineOptions(this)",
                  "Selecionar M√°quina"),
                  )}
                  ${buildFormGroup(
                  "Capacidade:",
                  buildSelectWithDefault([], machineId, "machine-power-select", `handlePowerChange('${machineId}')`,
                  "Selecionar capacidade", true),
                  )}
                  ${buildFormGroup(
                  "Tens√£o:",
                  buildSelectWithDefault([], machineId, "machine-voltage-select", `calculateMachinePrice('${machineId}')`,
                  "Selecionar Tens√£o", true),
                  )}
                  <div class="form-group">
                      <label>Pre√ßo Base:</label>
                      <div class="price-display" id="base-price-${machineId}">
                          R$ 0,00
                      </div>
                      <div class="machine-total-price"> <!-- Pre√ßo final desta m√°quina -->
                          <strong>Pre√ßo Total desta M√°quina: <span id="total-price-${machineId}">R$ 0,00</span></strong>
                      </div>
                  </div>
              </div>
              <div class="machine-options-section">
                  <h6>Op√ß√µes Adicionais:</h6>
                  <div class="options-grid" id="options-container-${machineId}">
                      <p class="empty-options-message">Selecione um tipo de m√°quina e sua capacidade para ver as op√ß√µes e seus
                          valores</p>
                  </div>
              </div>

         <!-- ‚úÖ TOTAL GERAL: FORA do machines-container, DENTRO da section-content -->
        <div class="all-machines-total-price">
          <strong>Total Geral de Todas as M√°quinas da Sala: 
            <span id="total-all-machines-price-${roomId}">R$ 0,00</span>
          </strong>
        </div>
      </div>
    </div>
  `;
}

/**
 * Constr√≥i um grupo de formul√°rio com label e conte√∫do
 * @param {string} label - Texto do label
 * @param {string} content - Conte√∫do HTML do campo
 * @returns {string} HTML do grupo de formul√°rio
 */
function buildFormGroup(label, content) {
  return `
    <div class="form-group">
      <label>${label}</label>
      ${content}
    </div>
  `;
}

/**
 * Constr√≥i um elemento select com op√ß√£o pr√©-selecionada - CORRE√á√ÉO COMPLETA
 * @param {Array} options - Lista de op√ß√µes
 * @param {string} machineId - ID √∫nico da m√°quina
 * @param {string} className - Classe CSS
 * @param {string} onchangeHandler - Handler de change
 * @param {string} selectedValue - Valor pr√©-selecionado
 * @returns {string} HTML do select com sele√ß√£o
 */
function buildSelectWithSelected(options, machineId, className, onchangeHandler, selectedValue) {
  return `
    <select class="form-input ${className}" 
            data-machine-id="${machineId}"
            onchange="${onchangeHandler}">
      <option value="">Selecionar</option>
      ${options
        .map((opt) => `<option value="${opt}" ${opt === selectedValue ? "selected" : ""}>${opt}</option>`)
        .join("")}
    </select>
  `;
}

/**
 * Constr√≥i op√ß√µes com sele√ß√µes pr√©-definidas a partir de dados salvos - CORRE√á√ÉO COMPLETA
 * @param {Array} options - Lista de op√ß√µes dispon√≠veis
 * @param {string} machineId - ID √∫nico da m√°quina
 * @param {Array} selectedOptions - Op√ß√µes que estavam selecionadas
 * @param {string} selectedPower - Pot√™ncia selecionada (para calcular valores espec√≠ficos)
 * @returns {string} HTML das op√ß√µes com checkboxes marcados
 */
function buildSavedOptionsHTML(options, machineId, selectedOptions = [], selectedPower = null) {
  if (!options || options.length === 0) {
    return '<p class="empty-options-message">Nenhuma op√ß√£o dispon√≠vel para esta m√°quina</p>';
  }

  return options
    .map((option) => {
      const isChecked = selectedOptions.some((selected) => selected.id === option.id);
      
      let optionValue = 0;
      if (selectedPower && option.values && option.values[selectedPower] !== undefined) {
        optionValue = option.values[selectedPower];
        console.log(`üí∞ Op√ß√£o ${option.name} para TR ${selectedPower}: R$ ${optionValue}`);
      }
      
      const optionDisplayValue = `+R$ ${optionValue.toLocaleString("pt-BR")}`;

      return `
      <div class="option-item" onclick="handleOptionClick('${machineId}', ${option.id})">
        <div class="option-checkbox">
          <input type="checkbox" 
                 value="${optionValue}" 
                 data-option-id="${option.id}"
                 data-option-name="${option.name}"
                 onchange="updateOptionSelection('${machineId}', '${option.id}'); calculateMachinePrice('${machineId}')"
                 id="option-${machineId}-${option.id}"
                 ${isChecked ? "checked" : ""}>
          <div class="option-content">
            <div class="option-name">${option.name}</div>
            <div class="option-price">${optionDisplayValue}</div>
          </div>
        </div>
      </div>
    `;
    })
    .join("");
}

/**
 * Calcula o pre√ßo base baseado no tipo de m√°quina e pot√™ncia selecionada
 * @param {Object} machineType - Tipo da m√°quina
 * @param {string} potencia - Pot√™ncia selecionada
 * @returns {number} Pre√ßo base calculado
 */
function calculateBasePrice(machineType, potencia) {
  if (!machineType || !machineType.baseValues) return 0;
  return machineType.baseValues[potencia] || 0;
}

/**
 * Atualiza os c√°lculos de capacidade quando os ganhos t√©rmicos mudam
 * @param {string} roomId - ID da sala
 */
function updateCapacityFromThermalGains(roomId) {
  if (window.calculateCapacitySolution) {
    window.calculateCapacitySolution(roomId);
  }
}

/**
 * Inicializa os c√°lculos de capacidade com m√∫ltiplas tentativas
 * Usa timeouts progressivos para garantir que a DOM esteja pronta
 */
function initializeCapacityCalculations() {
  const attempts = [100, 500, 1000, 2000];
  attempts.forEach((delay) => {
    setTimeout(() => {
      document.querySelectorAll(".room-block").forEach((roomBlock) => {
        const roomId = roomBlock.dataset.roomId; // ‚úÖ CORRE√á√ÉO: Usar data attribute
        if (roomId) {
          const capacityTable = roomBlock.querySelector(".capacity-calculation-table");
          if (capacityTable) {
            const fatorSegurancaInput = document.getElementById(`fator-seguranca-${roomId}`);
            const capacidadeUnitariaSelect = document.getElementById(`capacidade-unitaria-${roomId}`);
            if (fatorSegurancaInput && capacidadeUnitariaSelect && window.calculateCapacitySolution) {
              window.calculateCapacitySolution(roomId);
            }
          }
        }
      });
    }, delay);
  });
}

/**
 * Atualiza todos os c√°lculos de capacidade em todas as salas
 * √ötil para rec√°lculos em lote
 */
function refreshAllCapacityCalculations() {
  document.querySelectorAll(".room-block").forEach((roomBlock) => {
    const roomId = roomBlock.dataset.roomId; // ‚úÖ CORRE√á√ÉO: Usar data attribute
    if (roomId && window.calculateCapacitySolution) {
      window.calculateCapacitySolution(roomId);
    }
  });
}

// Exporta√ß√£o das fun√ß√µes do m√≥dulo
export {
  buildMachinesSection,
  loadMachinesData,
  loadSavedMachines,
  updateCapacityFromThermalGains,
  initializeCapacityCalculations,
  refreshAllCapacityCalculations,
  generateMachineId // ‚úÖ NOVA EXPORT
}

// Disponibiliza√ß√£o global das fun√ß√µes necess√°rias
if (typeof window !== 'undefined') {
    window.loadSavedMachines = loadSavedMachines;
    window.generateMachineId = generateMachineId; // ‚úÖ NOVA GLOBAL
}
