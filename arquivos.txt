// machineManagement.js

import { loadMachinesData } from './machinesBuilder.js'
import { updateElementText, removeEmptyMessage, showEmptyMessage } from './utilities.js'


/**
 * Gera um ID √∫nico para m√°quina baseado na sala e timestamp
 * @param {string} roomId - ID da sala
 * @returns {string} ID √∫nico da m√°quina
 */
function generateUniqueMachineId(roomId) {
    return `machine-${roomId}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
}

/**
 * Adiciona uma nova m√°quina de climatiza√ß√£o √† sala especificada - CORRE√á√ÉO
 * @param {string} roomId - ID da sala onde a m√°quina ser√° adicionada
 * @returns {Promise<void>}
 */
async function addMachine(roomId) {
    console.log(`‚ûï [ADD MACHINE] Iniciando para sala: ${roomId}`);
    
    const machinesContainer = document.getElementById(`machines-${roomId}`);
    if (!machinesContainer) {
        console.error(`‚ùå Container de m√°quinas n√£o encontrado para sala: ${roomId}`);
        return;
    }

    // ‚úÖ CORRE√á√ÉO: Contar m√°quinas APENAS desta sala espec√≠fica
    const roomMachineCount = machinesContainer.querySelectorAll(".climatization-machine").length;
    
    // ‚úÖ CORRE√á√ÉO: Usar ID √∫nico baseado na sala
    const uniqueMachineId = generateUniqueMachineId(roomId);
    const machineDisplayNumber = roomMachineCount + 1;

    removeEmptyMessage(machinesContainer);

    console.log(`‚ûï Adicionando m√°quina ${machineDisplayNumber} (sala: ${roomId}, ID √∫nico: ${uniqueMachineId})`);

    try {
        if (!window.machinesData || window.machinesData.length === 0) {
            console.log("üîÑ Cache n√£o encontrado, carregando dados das m√°quinas...");
            await loadMachinesData();
        }

        if (!window.machinesData || window.machinesData.length === 0) {
            throw new Error("Nenhum dado de m√°quina dispon√≠vel ap√≥s carregamento");
        }

        // ‚úÖ CORRE√á√ÉO: Passar roomId e ID √∫nico para a constru√ß√£o
        const machineHTML = buildClimatizationMachineHTML(uniqueMachineId, machineDisplayNumber, window.machinesData, roomId);
        machinesContainer.insertAdjacentHTML("beforeend", machineHTML);
        
        console.log(`‚úÖ M√°quina ${machineDisplayNumber} adicionada √† sala ${roomId} (ID: ${uniqueMachineId})`);

    } catch (error) {
        console.error("‚ùå Erro ao adicionar m√°quina:", error);
        showEmptyMessage(machinesContainer, "Erro ao carregar dados das m√°quinas");
    }
}

/**
 * Constr√≥i o HTML completo para uma m√°quina de climatiza√ß√£o - CORRE√á√ÉO
 * @param {string} machineId - ID √∫nico da m√°quina
 * @param {number} displayNumber - N√∫mero de exibi√ß√£o (1, 2, 3...)
 * @param {Array} machines - Lista de m√°quinas dispon√≠veis
 * @param {string} roomId - ID da sala (para refer√™ncia)
 * @returns {string} HTML da m√°quina de climatiza√ß√£o
 */
function buildClimatizationMachineHTML(machineId, displayNumber, machines, roomId) {
    const machineTypes = machines.map((m) => m.type);

    return `
        <div class="climatization-machine" data-machine-id="${machineId}" data-room-id="${roomId}">
            <div class="machine-header">
                <button class="minimizer" onclick="toggleMachineSection(this)">‚àí</button>
                <input type="text" 
                       class="machine-title-editable" 
                       value="Equipamento de Climatiza√ß√£o ${displayNumber}"
                       onchange="updateMachineTitle(this, '${machineId}')"
                       onclick="this.select()">
                <button class="btn btn-delete-small" onclick="deleteClimatizationMachine(this)">Remover</button>
            </div>
            <div class="machine-content" id="machine-content-${machineId}">
                <div class="climatization-form-grid">
                    ${buildFormGroup(
                        "Tipo de Equipamento:",
                        buildSelectWithDefault(machineTypes, machineId, "machine-type-select", "updateMachineOptions(this)", "Selecionar M√°quina"),
                    )}
                    ${buildFormGroup(
                        "Capacidade:",
                        buildSelectWithDefault([], machineId, "machine-power-select", `handlePowerChange('${machineId}')`, "Selecionar capacidade", true),
                    )}
                    ${buildFormGroup(
                        "Tens√£o:",
                        buildSelectWithDefault([], machineId, "machine-voltage-select", `calculateMachinePrice('${machineId}')`, "Selecionar Tens√£o", true),
                    )}
                    <div class="form-group">
                        <label>Pre√ßo Base:</label>
                        <div class="price-display" id="base-price-${machineId}">
                            R$ 0,00
                        </div>
                    </div>
                </div>
                <div class="machine-options-section">
                    <h6>Op√ß√µes Adicionais:</h6>
                    <div class="options-grid" id="options-container-${machineId}">
                        <p class="empty-options-message">Selecione um tipo de m√°quina e sua capacidade para ver as op√ß√µes e seus valores</p>
                    </div>
                </div>
                <div class="machine-total-price">
                    <strong>Pre√ßo Total: <span id="total-price-${machineId}">R$ 0,00</span></strong>
                </div>
            </div>
        </div>
    `;
}

/**
 * Constr√≥i um grupo de formul√°rio com label e conte√∫do
 * @param {string} label - Texto do label
 * @param {string} content - Conte√∫do HTML do campo
 * @returns {string} HTML do grupo de formul√°rio
 */
function buildFormGroup(label, content) {
  return `
    <div class="form-group">
      <label>${label}</label>
      ${content}
    </div>
  `
}

/**
 * Constr√≥i um elemento select com op√ß√µes e handlers
 * @param {Array} options - Lista de op√ß√µes do select
 * @param {number} machineId - ID √∫nico da m√°quina
 * @param {string} className - Classe CSS do select
 * @param {string} onchangeHandler - Fun√ß√£o a ser executada onchange
 * @param {string} defaultText - Texto padr√£o para op√ß√£o vazia
 * @param {boolean} disabled - Se o select deve iniciar desabilitado
 * @returns {string} HTML do elemento select
 */
function buildSelectWithDefault(options, machineId, className, onchangeHandler, defaultText = "Selecionar", disabled = false) {
  const disabledAttr = disabled ? 'disabled' : ''
  return `
    <select class="form-input ${className}" 
            data-machine-id="${machineId}"
            onchange="${onchangeHandler}"
            ${disabledAttr}>
      <option value="">${defaultText}</option>
      ${options.map((opt) => `<option value="${opt}">${opt}</option>`).join("")}
    </select>
  `
}

/**
 * Constr√≥i a interface de op√ß√µes adicionais da m√°quina
 * @param {Array} options - Lista de op√ß√µes dispon√≠veis
 * @param {number} machineId - ID √∫nico da m√°quina
 * @param {string} selectedPower - Pot√™ncia selecionada (TR)
 * @param {Array} selectedOptions - Op√ß√µes pr√©-selecionadas
 * @returns {string} HTML das op√ß√µes
 */
function buildOptionsHTML(options, machineId, selectedPower = null, selectedOptions = []) {
  if (!options || options.length === 0) {
    return '<p class="empty-options-message">Nenhuma op√ß√£o dispon√≠vel para esta m√°quina</p>'
  }

  return options
    .map((option) => {
      const isSelected = selectedOptions.some(selected => selected.id === option.id);
      const selectedClass = isSelected ? 'option-selected' : '';
      
      // Calcular valor da op√ß√£o baseado na pot√™ncia selecionada
      let optionValue = 0;
      if (selectedPower && option.values && option.values[selectedPower] !== undefined) {
        optionValue = option.values[selectedPower];
      }
      
      const optionDisplayValue = `+R$ ${optionValue.toLocaleString("pt-BR")}`;

      return `
        <div class="option-item ${selectedClass}" onclick="handleOptionClick(${machineId}, ${option.id})">
          <div class="option-checkbox">
            <input type="checkbox" 
                  value="${optionValue}" 
                  data-option-id="${option.id}"
                  data-option-name="${option.name}"
                  onchange="updateOptionSelection(${machineId}, ${option.id}); calculateMachinePrice(${machineId})"
                  id="option-${machineId}-${option.id}"
                  ${isSelected ? 'checked' : ''}>
            <div class="option-content">
              <div class="option-name">${option.name}</div>
              <div class="option-price">${optionDisplayValue}</div>
            </div>
          </div>
        </div>
      `;
    })
    .join("")
}

/**
 * Manipula a mudan√ßa de pot√™ncia (TR) da m√°quina
 * Atualiza pre√ßo base e valores das op√ß√µes
 * @param {number} machineId - ID √∫nico da m√°quina
 * @returns {void}
 */
function handlePowerChange(machineId) {
    console.log(`üîß Mudan√ßa de pot√™ncia na m√°quina ${machineId}`);
    
    // Atualizar pre√ßo base
    calculateMachinePrice(machineId);
    
    // Atualizar valores das op√ß√µes
    updateOptionValues(machineId);
}

/**
 * Atualiza os valores das op√ß√µes quando a pot√™ncia √© alterada
 * @param {number} machineId - ID √∫nico da m√°quina
 * @returns {void}
 */
function updateOptionValues(machineId) {
    const machineElement = document.querySelector(`[data-machine-id="${machineId}"]`);
    if (!machineElement) {
        console.error(`‚ùå M√°quina ${machineId} n√£o encontrada`);
        return;
    }
    
    const typeSelect = machineElement.querySelector('.machine-type-select');
    const powerSelect = machineElement.querySelector('.machine-power-select');
    
    const selectedType = typeSelect?.value;
    const selectedPower = powerSelect?.value;
    
    console.log(`üîß Atualizando op√ß√µes para m√°quina ${machineId}:`, { selectedType, selectedPower });
    
    if (!selectedType || !selectedPower || !window.machinesData) {
        console.log('‚ö†Ô∏è Tipo ou pot√™ncia n√£o selecionados');
        return;
    }
    
    const machine = window.machinesData.find(m => m.type === selectedType);
    if (!machine || !machine.options) {
        console.error(`‚ùå M√°quina ${selectedType} n√£o encontrada nos dados`);
        return;
    }
    
    const optionsContainer = document.getElementById(`options-container-${machineId}`);
    if (!optionsContainer) {
        console.error(`‚ùå Container de op√ß√µes n√£o encontrado para m√°quina ${machineId}`);
        return;
    }
    
    console.log(`üîß Atualizando ${machine.options.length} op√ß√µes para TR ${selectedPower}`);
    
    // Atualizar valores e display de todas as op√ß√µes
    machine.options.forEach(option => {
        const checkbox = document.getElementById(`option-${machineId}-${option.id}`);
        if (checkbox) {
            let optionValue = 0;
            if (selectedPower && option.values && option.values[selectedPower] !== undefined) {
                optionValue = option.values[selectedPower];
                console.log(`üí∞ Op√ß√£o ${option.name}: R$ ${optionValue} para ${selectedPower}`);
            }
            
            // Atualizar valor do checkbox
            checkbox.value = optionValue;
            
            // Atualizar display do pre√ßo
            const priceDisplay = checkbox.closest('.option-item')?.querySelector('.option-price');
            if (priceDisplay) {
                const optionDisplayValue = `+R$ ${optionValue.toLocaleString("pt-BR")}`;
                priceDisplay.textContent = optionDisplayValue;
                console.log(`üìù Atualizado display: ${option.name} = ${optionDisplayValue}`);
            }
        } else {
            console.warn(`‚ö†Ô∏è Checkbox n√£o encontrado para op√ß√£o ${option.id}`);
        }
    });
    
    // Recalcular pre√ßo total
    calculateMachinePrice(machineId);
    console.log(`‚úÖ Op√ß√µes atualizadas para TR ${selectedPower}`);
}

/**
 * Manipula o clique na op√ß√£o para alternar sele√ß√£o
 * @param {number} machineId - ID √∫nico da m√°quina
 * @param {number} optionId - ID da op√ß√£o
 * @returns {void}
 */
function handleOptionClick(machineId, optionId) {
  const checkbox = document.getElementById(`option-${machineId}-${optionId}`)
  if (checkbox) {
    checkbox.checked = !checkbox.checked
    // Disparar o evento change manualmente para garantir que todos os handlers sejam executados
    const event = new Event('change', { bubbles: true })
    checkbox.dispatchEvent(event)
  }
}

/**
 * Atualiza a apar√™ncia visual da op√ß√£o quando selecionada/deselecionada
 * @param {number} machineId - ID √∫nico da m√°quina
 * @param {number} optionId - ID da op√ß√£o
 * @returns {void}
 */
function updateOptionSelection(machineId, optionId) {
  const checkbox = document.getElementById(`option-${machineId}-${optionId}`)
  const optionItem = checkbox?.closest('.option-item')
  
  if (optionItem) {
    if (checkbox.checked) {
      optionItem.classList.add('option-selected')
    } else {
      optionItem.classList.remove('option-selected')
    }
    console.log(`üîß Op√ß√£o ${optionId} ${checkbox.checked ? 'selecionada' : 'deselecionada'} na m√°quina ${machineId}`)
  }
}

/**
 * Alterna a exibi√ß√£o da se√ß√£o da m√°quina (expandir/recolher)
 * @param {HTMLButtonElement} button - Bot√£o que acionou a fun√ß√£o
 * @returns {void}
 */
function toggleMachineSection(button) {
  const machineContent = button.closest(".climatization-machine").querySelector(".machine-content")
  const isCollapsed = machineContent.classList.toggle("collapsed")
  button.textContent = isCollapsed ? "+" : "‚àí"
}

/**
 * Atualiza o t√≠tulo da m√°quina quando editado pelo usu√°rio
 * @param {HTMLInputElement} input - Campo de input do t√≠tulo
 * @param {number} machineId - ID √∫nico da m√°quina
 * @returns {void}
 */
function updateMachineTitle(input, machineId) {
  const newTitle = input.value.trim()
  if (!newTitle) {
    input.value = `Equipamento de Climatiza√ß√£o ${machineId}`
  }
}

/**
 * Atualiza as op√ß√µes da m√°quina quando o tipo √© alterado
 * Carrega novos dados de pot√™ncia, tens√£o e op√ß√µes
 * @param {HTMLSelectElement} selectElement - Select do tipo de m√°quina
 * @returns {Promise<void>}
 */
async function updateMachineOptions(selectElement) {
    const machineId = selectElement.getAttribute("data-machine-id");
    const selectedType = selectElement.value;

    console.log(`üîÑ Atualizando op√ß√µes para m√°quina ${machineId}, tipo: ${selectedType}`);

    if (!selectedType) {
        resetMachineFields(machineId);
        return;
    }

    try {
        // Buscar nos dados em cache
        if (window.machinesData && window.machinesData.length > 0) {
            const selectedMachine = window.machinesData.find((m) => m.type === selectedType);
            if (selectedMachine) {
                console.log(`‚úÖ M√°quina encontrada no cache: ${selectedType}`);
                updateMachineUI(machineId, selectedMachine);
                return;
            }
        }

        // Carregar dados do servidor
        console.log("üöÄ Carregando dados do servidor...");
        const response = await fetch('/machines');
        if (response.ok) {
            const data = await response.json();
            const machines = Array.isArray(data) ? data : data.machines;
            window.machinesData = machines;
            
            const selectedMachine = machines.find((m) => m.type === selectedType);
            if (selectedMachine) {
                console.log(`‚úÖ M√°quina encontrada no servidor: ${selectedType}`);
                updateMachineUI(machineId, selectedMachine);
            } else {
                console.error(`‚ùå M√°quina n√£o encontrada: ${selectedType}`);
                resetMachineFields(machineId);
            }
        } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

    } catch (error) {
        console.error("‚ùå Erro ao atualizar op√ß√µes:", error);
        resetMachineFields(machineId);
    }
}

/**
 * Atualiza a UI da m√°quina com novos dados
 * @param {number} machineId - ID √∫nico da m√°quina
 * @param {Object} selectedMachine - Dados da m√°quina selecionada
 * @returns {void}
 */
function updateMachineUI(machineId, selectedMachine) {
    console.log(`üéØ Atualizando UI completa para m√°quina ${machineId}`);
    
    // Atualizar pot√™ncias
    const potencies = Object.keys(selectedMachine.baseValues || {});
    updateSelect(`.machine-power-select[data-machine-id="${machineId}"]`, potencies, "Selecionar Capacidade", false);

    // Atualizar tens√µes
    const voltageNames = (selectedMachine.voltages || []).map(v => v.name);
    updateSelect(`.machine-voltage-select[data-machine-id="${machineId}"]`, voltageNames, "Selecionar Tens√£o", false);

    // Atualizar op√ß√µes
    const optionsContainer = document.getElementById(`options-container-${machineId}`);
    
    if (optionsContainer) {
        console.log(`üîß Container de op√ß√µes encontrado para m√°quina ${machineId}`);
        
        // Limpar completamente o container
        optionsContainer.innerHTML = '';
        
        const options = selectedMachine.options || [];
        console.log(`üîß Renderizando ${options.length} op√ß√µes para m√°quina ${machineId}`);
        
        if (options.length > 0) {
            const optionsHTML = buildOptionsHTML(options, machineId, null, []);
            optionsContainer.innerHTML = optionsHTML;
            console.log(`‚úÖ ${options.length} op√ß√µes HTML inseridas no container da m√°quina ${machineId}`);
            
            // Garantir que as op√ß√µes sejam vis√≠veis
            setTimeout(() => {
                const renderedOptions = optionsContainer.querySelectorAll('.option-item');
                console.log(`üëÅÔ∏è ${renderedOptions.length} op√ß√µes vis√≠veis no DOM para m√°quina ${machineId}`);
                
                // Atualizar sele√ß√£o visual de todas as op√ß√µes
                options.forEach(option => {
                    updateOptionSelection(machineId, option.id);
                });
            }, 50);
        } else {
            optionsContainer.innerHTML = '<p class="empty-options-message">Nenhuma op√ß√£o dispon√≠vel para esta m√°quina</p>';
        }
    } else {
        console.error(`‚ùå Container de op√ß√µes n√£o encontrado para m√°quina ${machineId}`);
    }

    // Resetar pre√ßos
    updateElementText(`base-price-${machineId}`, `R$ 0,00`);
    updateElementText(`total-price-${machineId}`, `R$ 0,00`);

    console.log(`‚úÖ UI completamente atualizada para m√°quina ${machineId}`);
}

/**
 * Reseta os campos da m√°quina para o estado inicial
 * @param {number} machineId - ID √∫nico da m√°quina
 * @returns {void}
 */
function resetMachineFields(machineId) {
    console.log(`üîÑ Resetando campos da m√°quina ${machineId}`);
    
    updateSelect(`.machine-power-select[data-machine-id="${machineId}"]`, [], "Selecionar Capacidade", true);
    updateSelect(`.machine-voltage-select[data-machine-id="${machineId}"]`, [], "Selecionar Tens√£o", true);

    const optionsContainer = document.getElementById(`options-container-${machineId}`);
    if (optionsContainer) {
        optionsContainer.innerHTML = '<p class="empty-options-message">Selecione um tipo de m√°quina para ver as op√ß√µes</p>';
    }

    updateElementText(`base-price-${machineId}`, `R$ 0,00`);
    updateElementText(`total-price-${machineId}`, `R$ 0,00`);
}

/**
 * Atualiza as op√ß√µes de um elemento select
 * @param {string} selector - Seletor do elemento select
 * @param {Array} options - Novas op√ß√µes a serem adicionadas
 * @param {string} defaultText - Texto da op√ß√£o padr√£o
 * @param {boolean} disabled - Se deve desabilitar o select
 * @returns {void}
 */
function updateSelect(selector, options, defaultText = "Selecionar", disabled = false) {
    const select = document.querySelector(selector);
    if (select) {
        select.innerHTML = `
            <option value="">${defaultText}</option>
            ${options.map((opt) => `<option value="${opt}">${opt}</option>`).join("")}
        `;
        select.disabled = disabled;
        console.log(`üîß Select ${selector} atualizado com ${options.length} op√ß√µes`);
    } else {
        console.error(`‚ùå Select n√£o encontrado: ${selector}`);
    }
}

/**
 * Calcula o pre√ßo total da m√°quina considerando pre√ßo base e op√ß√µes selecionadas
 * @param {number} machineId - ID √∫nico da m√°quina a ser calculada
 * @returns {void}
 */
function calculateMachinePrice(machineId) {
  try {
    const machineElement = document.querySelector(`[data-machine-id="${machineId}"]`)
    if (!machineElement) return

    // Obter tipo, pot√™ncia e tens√£o selecionados
    const typeSelect = machineElement.querySelector('.machine-type-select')
    const powerSelect = machineElement.querySelector('.machine-power-select')
    const voltageSelect = machineElement.querySelector('.machine-voltage-select')

    const selectedType = typeSelect?.value
    const selectedPower = powerSelect?.value
    const selectedVoltage = voltageSelect?.value

    let basePrice = 0
    let voltageValue = 0

    // Calcular pre√ßo base apenas se tipo e pot√™ncia estiverem selecionados
    if (selectedType && selectedPower && window.machinesData) {
      const machine = window.machinesData.find(m => m.type === selectedType)
      if (machine && machine.baseValues) {
        basePrice = machine.baseValues[selectedPower] || 0
        console.log(`üí∞ Pre√ßo base para ${selectedType} ${selectedPower}: R$ ${basePrice}`)
      }
    }

    // Calcular valor da tens√£o apenas se tens√£o estiver selecionada
    if (selectedType && selectedVoltage && window.machinesData) {
      const machine = window.machinesData.find(m => m.type === selectedType)
      if (machine && machine.voltages) {
        const voltageObj = machine.voltages.find(v => v.name === selectedVoltage)
        voltageValue = voltageObj ? voltageObj.value : 0
        console.log(`‚ö° Tens√£o ${selectedVoltage}: R$ ${voltageValue}`)
      }
    }

    // Atualizar display do pre√ßo base
    updateElementText(`base-price-${machineId}`, `R$ ${basePrice.toLocaleString("pt-BR")}`)

    // Calcular total das op√ß√µes
    const optionsContainer = document.getElementById(`options-container-${machineId}`)
    let optionsTotal = 0

    if (optionsContainer) {
      const selectedOptions = optionsContainer.querySelectorAll('input[type="checkbox"]:checked')
      console.log(`üìã ${selectedOptions.length} op√ß√µes selecionadas`)
      
      selectedOptions.forEach((option) => {
        const optionValue = Number.parseFloat(option.value) || 0
        optionsTotal += optionValue
        console.log(`‚úÖ Op√ß√£o: ${option.getAttribute('data-option-name')} - R$ ${optionValue}`)
      })
    }

    // Calcular pre√ßo total
    const totalPrice = basePrice + optionsTotal + voltageValue

    // Atualizar display do pre√ßo total
    updateElementText(`total-price-${machineId}`, `R$ ${totalPrice.toLocaleString("pt-BR")}`)

    console.log(`üßÆ Pre√ßo total calculado: R$ ${totalPrice} = Base: R$ ${basePrice} + Op√ß√µes: R$ ${optionsTotal} + Tens√£o: R$ ${voltageValue}`)

  } catch (error) {
    console.error("Erro ao calcular pre√ßo:", error)
  }
}

/**
 * Remove uma m√°quina de climatiza√ß√£o ap√≥s confirma√ß√£o do usu√°rio
 * @param {HTMLButtonElement} button - Bot√£o de remover que acionou a fun√ß√£o
 * @returns {void}
 */
function deleteClimatizationMachine(button) {

  const machineItem = button.closest(".climatization-machine")
  const machinesContainer = machineItem.closest(".machines-container")

  machineItem.remove()

  // Mostrar mensagem de vazio se n√£o houver m√°quinas
  if (machinesContainer && machinesContainer.querySelectorAll('.climatization-machine').length === 0) {
    showEmptyMessage(machinesContainer, "Nenhuma m√°quina adicionada ainda.")
  }
}

// Exporta√ß√£o e disponibiliza√ß√£o global
if (typeof window !== 'undefined') {
    window.addMachine = addMachine;
    window.toggleMachineSection = toggleMachineSection;
    window.updateMachineTitle = updateMachineTitle;
    window.updateMachineOptions = updateMachineOptions;
    window.calculateMachinePrice = calculateMachinePrice;
    window.deleteClimatizationMachine = deleteClimatizationMachine;
    window.handleOptionClick = handleOptionClick;
    window.updateOptionSelection = updateOptionSelection;
    window.updateOptionValues = updateOptionValues;
    window.handlePowerChange = handlePowerChange;
    window.deleteMachine = deleteClimatizationMachine;

}

export {
    addMachine,
    buildClimatizationMachineHTML,
    toggleMachineSection,
    updateMachineTitle,
    updateMachineOptions,
    calculateMachinePrice,
    deleteClimatizationMachine,
    handleOptionClick,
    updateOptionSelection,
    updateOptionValues,
    handlePowerChange
}
// main.js - VERS√ÉO CORRIGIDA COM ORDEM CORRETA

// Inicializar vari√°veis globais simples
window.systemConstants = null;
window.obraCounter = 0;
window.GeralCount = 0;

console.log(" Vari√°veis globais inicializadas:", {
  systemConstants: window.systemConstants,
  obraCounter: window.obraCounter,
  GeralCount: window.GeralCount
});

// Importar APENAS o necess√°rio para inicializa√ß√£o
import { loadObrasFromServer, getGeralCount } from './data/server.js'

// Carregar m√≥dulos dinamicamente
let modulesLoaded = false;

/**
 * Sistema de Shutdown Manual
 */
class ShutdownManager {
  constructor() {
      this.init();
  }

  init() {
      console.log('üîí Sistema de shutdown manual ativado');
      this.disableAutoShutdown();
      this.createShutdownButton();
  }

  disableAutoShutdown() {
      window.removeEventListener('beforeunload', this.autoShutdown);
      window.removeEventListener('unload', this.autoShutdown);
      window.removeEventListener('pagehide', this.autoShutdown);
  }

  createShutdownButton() {
    if (document.querySelector('.shutdown-btn')) return;
    
    const headerRight = document.querySelector('.header-right');
    if (headerRight) {
        const shutdownBtn = document.createElement('button');
        shutdownBtn.className = 'shutdown-btn';
        shutdownBtn.innerHTML = '‚èª';
        shutdownBtn.title = 'Encerrar Servidor';
        shutdownBtn.onclick = () => this.shutdownManual();
        
        headerRight.appendChild(shutdownBtn);
        console.log('‚úÖ Bot√£o de shutdown adicionado ao header');
    }
  }

  async shutdownManual() {
        if (confirm('Deseja realmente ENCERRAR o servidor?')) {
            try {
                console.log('üîÑ Executando shutdown COMPLETO...');
                
                if (typeof window.shutdownManual === 'function') {
                    await window.shutdownManual();
                } else {
                    console.error('‚ùå Fun√ß√£o shutdownManual n√£o encontrada');
                }
                
            } catch (error) {
                console.log('üîå Servidor encerrado ou n√£o responde:', error);
            }
        }
    }
}

// Inicializar shutdown manager
let shutdownManager = null;

// ‚úÖ CORRE√á√ÉO CR√çTICA: DEFINIR FUN√á√ïES GLOBAIS PRIMEIRO - ANTES DE QUALQUER OUTRA COISA
window.createEmptyObra = async function(obraName, obraId) {
    try {
        if (typeof window._createEmptyObra === 'function') {
            return window._createEmptyObra(obraName, obraId);
        }
        
        const obraManager = await import('./ui/intr-files/obra-manager.js');
        if (obraManager && obraManager.createEmptyObra) {
            window._createEmptyObra = obraManager.createEmptyObra;
            return obraManager.createEmptyObra(obraName, obraId);
        }
        
        throw new Error('createEmptyObra n√£o encontrada');
    } catch (error) {
        console.error('‚ùå Erro em createEmptyObra:', error);
        return false;
    }
};

// ‚úÖ CORRE√á√ÉO: Garantir que createEmptyProject esteja dispon√≠vel globalmente ANTES do carregamento
window.createEmptyProject = async function(obraId, obraName, projectId, projectName) {
    try {
        // Se j√° temos a fun√ß√£o carregada, usar ela
        if (typeof window._createEmptyProject === 'function') {
            return await window._createEmptyProject(obraId, obraName, projectId, projectName);
        }
        
        // Se n√£o, tentar carregar o m√≥dulo
        const projectManager = await import('./ui/intr-files/project-manager.js');
        if (projectManager && projectManager.createEmptyProject) {
            window._createEmptyProject = projectManager.createEmptyProject;
            return await projectManager.createEmptyProject(obraId, obraName, projectId, projectName);
        }
        
        throw new Error('createEmptyProject n√£o encontrada');
    } catch (error) {
        console.error('‚ùå Erro em createEmptyProject:', error);
        return false;
    }
};

// ‚úÖ CORRE√á√ÉO: Garantir que populateObraData esteja dispon√≠vel globalmente
window.populateObraData = async function(obraData) {
    try {
        // Tentar carregar o m√≥dulo diretamente
        const populateModule = await import('./data/data-populate.js');
        if (populateModule && populateModule.populateObraData) {
            return await populateModule.populateObraData(obraData);
        }
        throw new Error('populateObraData n√£o encontrada');
    } catch (error) {
        console.error('‚ùå Erro ao carregar populateObraData:', error);
        
        // ‚úÖ CORRE√á√ÉO: Fallback - tentar carregar via caminho alternativo
        try {
            const populateModule = await import('./data/data-files/data-populate.js');
            if (populateModule && populateModule.populateObraData) {
                return await populateModule.populateObraData(obraData);
            }
        } catch (fallbackError) {
            console.error('‚ùå Erro no fallback de populateObraData:', fallbackError);
        }
        
        return null;
    }
};

/**
 * Carrega as constantes do sistema do servidor - DEVE VIR ANTES DOS M√ìDULOS
 */
async function loadSystemConstants() {
  try {
    console.log("üîç Carregando constantes do sistema...")
    const response = await fetch(`/constants`)

    if (!response.ok) {
      throw new Error(`Erro HTTP: ${response.status}`)
    }

    const constantsData = await response.json();
    window.systemConstants = constantsData;
    console.log("‚úÖ Constantes carregadas do JSON:", window.systemConstants);
    
    if (!window.systemConstants.VARIAVEL_PD || !window.systemConstants.VARIAVEL_PS) {
      console.error("‚ùå ERRO: Constantes essenciais n√£o encontradas no JSON");
      throw new Error("Constantes essenciais n√£o encontradas no JSON");
    }
    
    return true;
  } catch (error) {
    console.error("‚ùå ERRO CR√çTICO ao carregar constantes:", error)
    
    if (error.message.includes('Failed to fetch') || 
        error.message.includes('ERR_CONNECTION_REFUSED') ||
        error.message.includes('404') ||
        error.message.includes('Not Found')) {
      throw error;
    }
    
    return false;
  }
}

/**
 * Carrega todos os m√≥dulos do sistema dinamicamente - VERS√ÉO CORRIGIDA
 */
async function loadAllModules() {
  if (modulesLoaded) return;
  
  try {
    console.log("üì¶ Iniciando carregamento de m√≥dulos...");
    
    const modules = await Promise.all([
      import('./ui/interface.js'),
      import('./ui/edit.js'),
      import('./data/projects.js'),
      import('./data/rooms.js'),
      import('./calculos/calculos-manager.js'),
      import('./utils/utils.js')
    ]);

    const [
      interfaceModule,
      editModule,
      projectsModule,
      roomsModule,
      calculosModule,
      utilsModule
    ] = modules;

    // ‚úÖ CORRE√á√ÉO: Atribuir TODAS as fun√ß√µes ao window - VERS√ÉO COMPLETA
    const allFunctions = {
      // UI Interface
      toggleSection: interfaceModule.toggleSection,
      toggleSubsection: interfaceModule.toggleSubsection,
      toggleObra: interfaceModule.toggleObra,
      toggleProject: interfaceModule.toggleProject,
      toggleRoom: interfaceModule.toggleRoom,
      collapseElement: interfaceModule.collapseElement,
      expandElement: interfaceModule.expandElement,
      addNewObra: interfaceModule.addNewObra,
      addNewProjectToObra: interfaceModule.addNewProjectToObra,
      showSystemStatus: interfaceModule.showSystemStatus,
      saveOrUpdateObra: interfaceModule.saveOrUpdateObra,
      verifyObraData: interfaceModule.verifyObraData,
      deleteObra: interfaceModule.deleteObra,

      // Edit
      makeEditable: editModule.makeEditable,

      // Projects - ‚úÖ CORRE√á√ÉO: AGORA COM TODAS AS FUN√á√ïES
      deleteProject: projectsModule.deleteProject,
      saveObra: projectsModule.saveObra,
      createEmptyProject: projectsModule.createEmptyProject,
      fetchObras: projectsModule.fetchObras,
      salvarObra: projectsModule.salvarObra,
      atualizarObra: projectsModule.atualizarObra,

      // Rooms
      addNewRoom: roomsModule.addNewRoom,
      deleteRoom: roomsModule.deleteRoom,
      addMachine: roomsModule.addMachine,
      deleteMachine: roomsModule.deleteMachine,
      createEmptyRoom: roomsModule.createEmptyRoom,

      // C√°lculos
      calculateVazaoArAndThermalGains: calculosModule.calculateVazaoArAndThermalGains,
      calculateVazaoAr: calculosModule.calculateVazaoAr,
      calculateThermalGains: calculosModule.calculateThermalGains,

      // Utils
      ensureStringId: utilsModule.ensureStringId
    };

    // ‚úÖ CORRE√á√ÉO: Verificar cada fun√ß√£o antes de atribuir
    Object.keys(allFunctions).forEach(funcName => {
      if (typeof allFunctions[funcName] === 'function') {
        window[funcName] = allFunctions[funcName];
        console.log(`‚úÖ ${funcName} atribu√≠da ao window`);
      } else {
        console.error(`‚ùå ${funcName} n√£o √© uma fun√ß√£o:`, typeof allFunctions[funcName]);
      }
    });

    modulesLoaded = true;
    console.log("‚úÖ Todos os m√≥dulos foram carregados com sucesso");
    return true;
    
  } catch (error) {
    console.error("‚ùå Erro ao carregar m√≥dulos:", error);
    return false;
  }
}

/**
 * Verifica e carrega sess√£o existente - CORRE√á√ÉO PARA NOVA ESTRUTURA DA API
 */
async function checkAndLoadExistingSession() {
  try {
    console.log("üîç Verificando se h√° sess√£o com obras salvas...");
    
    const sessionResponse = await fetch('/api/session-obras');
    if (sessionResponse.ok) {
      const sessionData = await sessionResponse.json();
      
      // ‚úÖ CORRE√á√ÉO: Processar nova estrutura da API {session_id: 'session_active', obras: Array(5)}
      let obraIds = [];
      
      if (sessionData.obras && Array.isArray(sessionData.obras)) {
        obraIds = sessionData.obras;
      } else if (sessionData.sessions && sessionData.sessions.session_active && sessionData.sessions.session_active.obras) {
        obraIds = sessionData.sessions.session_active.obras;
      }
      
      console.log(`üìä Sess√£o encontrada com ${obraIds.length} obras:`, obraIds);
      
      if (obraIds.length > 0) {
        console.log("üîÑ Carregando obras existentes da sess√£o...");
        
        try {
          sessionStorage.setItem('session_active', 'true');
          console.log("‚úÖ Sess√£o ativada via sessionStorage");
        } catch (error) {
          console.error("‚ùå Erro ao ativar sess√£o:", error);
        }
        
        await loadObrasFromServer();
        console.log("‚úÖ Sess√£o existente carregada automaticamente");
        return true;
      }
    }
    
    console.log("üì≠ Nenhuma sess√£o com obras encontrada - sistema inicia vazio");
    return false;
    
  } catch (error) {
    console.log("üì≠ Nenhuma sess√£o ativa ou erro ao verificar:", error);
    return false;
  }
}

/**
 * Verifica se √© necess√°rio criar uma obra base
 */
async function verifyAndCreateBaseObra() {
  console.log("üîç Verificando obras existentes...");
  
  await new Promise(resolve => setTimeout(resolve, 500));
  
  const currentCount = getGeralCount();
  const obrasInDOM = document.querySelectorAll('.obra-block').length;
  
  console.log(`üìä Estado atual - GeralCount: ${currentCount}, Obras no DOM: ${obrasInDOM}`);
  
  if (obrasInDOM === 0 && currentCount === 0) {
    console.log("üì≠ Sistema iniciado vazio - aguardando a√ß√£o do usu√°rio");
    console.log("üí° Dica: Clique em 'Nova Obra' para come√ßar");
  }
}

/**
 * Fun√ß√£o de debug para verificar o estado final do sistema
 */
function finalSystemDebug() {
  console.log('=== DEBUG FINAL DO SISTEMA ===');
  console.log('- window.GeralCount:', window.GeralCount);
  console.log('- getGeralCount():', getGeralCount());
  console.log('- Obras no DOM:', document.querySelectorAll('.obra-block').length);
  console.log('- Projetos no DOM:', document.querySelectorAll('.project-block').length);
  console.log('- Salas no DOM:', document.querySelectorAll('.room-block').length);
  console.log('- M√≥dulos carregados:', modulesLoaded);
  console.log('- Constantes carregadas:', !!window.systemConstants);
  console.log('- Shutdown Manager:', !!shutdownManager);
  
  console.log('- Fun√ß√µes de toggle dispon√≠veis:', {
    toggleSection: typeof window.toggleSection,
    toggleSubsection: typeof window.toggleSubsection,
    toggleObra: typeof window.toggleObra,
    toggleProject: typeof window.toggleProject,
    toggleRoom: typeof window.toggleRoom
  });
}

/**
 * Mostra mensagem amig√°vel quando o servidor est√° offline
 */
function showServerOfflineMessage() {
    console.log("üîÑ Mostrando mensagem de servidor offline...");
    
    const existingMessage = document.getElementById('server-offline-message');
    if (existingMessage) {
        existingMessage.remove();
    }
    
    const messageDiv = document.createElement('div');
    messageDiv.id = 'server-offline-message';
    messageDiv.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0,0.95);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 99999;
        font-family: Arial, sans-serif;
    `;
    
    messageDiv.innerHTML = `
        <div class="modal-content toast-style" style="
            background: #2d3748 !important;
            color: white !important;
            border-left: 4px solid #4299e1 !important;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15) !important;
            border: 1px solid rgba(255, 255, 255, 0.1) !important;
            padding: 2rem !important;
            max-width: 500px !important;
            border-radius: 15px;
            text-align: center;
        ">
            <div class="modal-icon" style="
                color: #4299e1 !important;
                animation: iconPulse 2s infinite ease-in-out;
                font-size: 3.5rem !important;
                margin-bottom: 1rem !important;
            ">üîå</div>
            
            <h2 class="modal-title" style="
                color: white !important;
                text-shadow: 0 1px 2px rgba(0,0,0,0.3);
                font-size: 1.6rem !important;
                margin-bottom: 1rem !important;
            ">Servidor Offline</h2>
            
            <p class="modal-message" style="
                color: rgba(255, 255, 255, 0.9) !important;
                text-align: left !important;
                margin-bottom: 1.5rem !important;
            ">
                <strong style="
                    color: #ff6b6b !important;
                    display: block;
                    margin-bottom: 1rem !important;
                    font-size: 1.1rem !important;
                    text-align: center !important;
                ">O servidor foi encerrado</strong>
                
                <div class="warning-list" style="
                    background: rgba(255, 255, 255, 0.05);
                    padding: 1.2rem;
                    border-radius: 8px;
                    margin: 1rem 0;
                    border-left: 3px solid #4299e1;
                ">
                    Para continuar usando o sistema:
                    <ul style="
                        text-align: left;
                        margin: 0.5rem 0 0 0;
                        padding-left: 1.5rem;
                        color: rgba(255, 255, 255, 0.8);
                    ">
                      <li style="margin-top: 15px; margin-bottom: 0.5rem; padding-left: 0.5rem;">Inicie novamente o servidor</li>
                      <li style="padding-left: 0.5rem;">Esta p√°gina ser√° fechada automaticamente</li>
                    </ul>
                </div>
                
                <div class="warning-note" style="
                    background: rgba(255, 107, 107, 0.1);
                    padding: 1rem;
                    border-radius: 6px;
                    border-left: 3px solid #ff6b6b;
                    margin-top: 1rem;
                ">
                    <small style="
                        color: rgba(255, 255, 255, 0.8) !important;
                        font-size: 0.9rem !important;
                        line-height: 1.4;
                        display: block;
                    ">
                        ‚è≥ Esta janela ser√° fechada automaticamente em <strong id="countdown">10</strong> segundos...
                    </small>
                </div>
            </p>
            
            <div class="modal-actions" style="
                margin-top: 1.5rem !important;
                gap: 1rem !important;
                display: flex;
                justify-content: center;
            ">
                <button onclick="window.close()" class="modal-btn btn-confirm" style="
                    padding: 0.8rem 1.5rem !important;
                    min-width: 120px !important;
                    font-size: 0.95rem !important;
                    background: #e53e3e !important;
                    color: white !important;
                    border: 1px solid rgba(255, 255, 255, 0.2) !important;
                    border-radius: 6px;
                    cursor: pointer;
                ">
                    Fechar Agora
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(messageDiv);
    
    const style = document.createElement('style');
    style.textContent = `
        @keyframes iconPulse {
          0% { transform: scale(1); opacity: 1; }
          50% { transform: scale(1.1); opacity: 1; }
          100% { transform: scale(1); opacity: 1; }
        }
    `;
    document.head.appendChild(style);
    
    let countdown = 10;
    const countdownElement = document.getElementById('countdown');
    const countdownInterval = setInterval(() => {
        countdown--;
        if (countdownElement) {
            countdownElement.textContent = countdown;
        }
        if (countdown <= 0) {
            clearInterval(countdownInterval);
            window.close();
        }
    }, 1000);
    
    setTimeout(() => {
        window.close();
    }, 10000);
}

/**
 * Verifica fun√ß√µes cr√≠ticas do sistema
 */
function verifyCriticalFunctions() {
    const criticalFunctions = [
        'createEmptyObra',
        'createEmptyProject', 
        'createEmptyRoom',
        'populateObraData',
        'addMachine'
    ];
    
    console.log('üîç Verificando fun√ß√µes cr√≠ticas...');
    criticalFunctions.forEach(funcName => {
        if (typeof window[funcName] !== 'function') {
            console.error(`‚ùå CR√çTICO: ${funcName} n√£o est√° dispon√≠vel globalmente`);
        } else {
            console.log(`‚úÖ ${funcName} dispon√≠vel globalmente`);
        }
    });
}

/**
 * Inicializa√ß√£o principal do sistema - ORDEM CORRIGIDA
 */
window.addEventListener("DOMContentLoaded", async () => {
  console.log("üöÄ Inicializando sistema...");
  
  try {
    // ‚úÖ ORDEM CORRETA DE INICIALIZA√á√ÉO:
    
    // 1. Inicializar sistema de shutdown primeiro (n√£o cr√≠tico)
    shutdownManager = new ShutdownManager();
    
    // 2. ‚úÖ CORRE√á√ÉO CR√çTICA: DEFINIR FUN√á√ïES GLOBAIS PRIMEIRO
    console.log("üîß Definindo fun√ß√µes globais cr√≠ticas...");
    // J√° definidas no topo do arquivo - createEmptyObra, createEmptyProject, populateObraData
    
    // 3. Carregar constantes do sistema (cr√≠tico para c√°lculos)
    console.log("üìä Carregando constantes do sistema...");
    const constantsLoaded = await loadSystemConstants();
    if (!constantsLoaded) {
      throw new Error("N√£o foi poss√≠vel carregar constantes do sistema");
    }
    
    // 4. Carregar todos os m√≥dulos do sistema
    console.log("üì¶ Carregando m√≥dulos do sistema...");
    const modulesLoadedSuccess = await loadAllModules();
    if (!modulesLoadedSuccess) {
      console.warn("‚ö†Ô∏è Alguns m√≥dulos n√£o carregaram completamente");
    }
    
    // 5. ‚úÖ VERIFICAR E CARREGAR SESS√ÉO EXISTENTE (agora com fun√ß√µes dispon√≠veis)
    console.log("üîç Verificando sess√£o existente...");
    const hasExistingSession = await checkAndLoadExistingSession();
    
    if (!hasExistingSession) {
      console.log("üì≠ Nenhuma sess√£o existente - sistema come√ßa vazio");
      console.log("üí° Dica: Clique em 'Nova Obra' para come√ßar");
    }
    
    // 6. Verificar obras existentes
    await verifyAndCreateBaseObra();
    
    console.log("‚úÖ Sistema inicializado com sucesso - PRONTO PARA USO");
    
    // Mostrar status do sistema para usu√°rio
    setTimeout(() => {
      if (window.showSystemStatus) {
        const message = hasExistingSession 
          ? `Sess√£o carregada com ${document.querySelectorAll('.obra-block').length} obra(s)!` 
          : "Sistema carregado. Clique em 'Nova Obra' para come√ßar.";
        window.showSystemStatus(message, "success");
      }
    }, 500);
    
    // Debug final
    setTimeout(finalSystemDebug, 1000);
    
    // ‚úÖ CORRE√á√ÉO: Verificar fun√ß√µes cr√≠ticas ap√≥s inicializa√ß√£o completa
    setTimeout(verifyCriticalFunctions, 2000);
    
  } catch (error) {
    console.error("‚ùå ERRO na inicializa√ß√£o do sistema:", error);
    
    if (error.message.includes('Failed to fetch') || 
        error.message.includes('ERR_CONNECTION_REFUSED') ||
        error.message.includes('404') ||
        error.message.includes('Not Found') ||
        error.name === 'TypeError') {
      console.log("üîå Servidor offline detectado - mostrando mensagem...");
      showServerOfflineMessage();
    } else {
      setTimeout(() => {
        console.log("üîÑ Sistema em estado de espera");
        if (window.showSystemStatus) {
          window.showSystemStatus("Sistema carregado com avisos", "error");
        }
      }, 1000);
    }
  }
});
// server-modules/obra-loader.js - CARREGAMENTO DE OBRAS

import { createEmptyObra } from "../../ui/interface.js"
import { isSessionActive } from "./session-manager.js"

/**
 * Remove todas as obras base do container HTML
 */
function removeBaseObraFromHTML() {
    const obrasContainer = document.getElementById("projects-container")
    if (!obrasContainer) return

    const existingObras = obrasContainer.querySelectorAll(".obra-block")
    existingObras.forEach((obra) => obra.remove())
}

/**
 * Carrega obras salvas do servidor para a sess√£o atual
 */

async function loadObrasFromServer() {
    console.log("üîÑ Carregando OBRAS do servidor...");
    
    try {
        const sessionResponse = await fetch('/api/session-obras');
        if (!sessionResponse.ok) return;
        
        const sessionData = await sessionResponse.json();
        const obraIds = sessionData.obras || [];
        
        console.log(`üìä Sess√£o com ${obraIds.length} obras:`, obraIds);
        
        if (obraIds.length === 0) return;

        // Buscar obras da sess√£o
        const obrasResponse = await fetch('/obras');
        if (!obrasResponse.ok) return;

        const obrasDaSessao = await obrasResponse.json();
        
        // ‚úÖ CORRE√á√ÉO: Limpar interface antes de carregar
        removeBaseObraFromHTML();
        
        // ‚úÖ CORRE√á√ÉO: Carregar cada obra individualmente
        for (const obraData of obrasDaSessao) {
            await loadSingleObra(obraData);
        }
        
    } catch (error) {
        console.error("‚ùå Erro ao carregar obras da sess√£o:", error);
    }
}

// ‚úÖ NOVA FUN√á√ÉO: Carregar uma obra individual
async function loadSingleObra(obraData) {
    if (!obraData || !obraData.id) {
        console.error('‚ùå Dados de obra inv√°lidos:', obraData);
        return;
    }

    console.log(`üîÑ Carregando obra: ${obraData.nome} (ID: ${obraData.id})`);
    
    try {
        // ‚úÖ CORRE√á√ÉO: Usar createEmptyObra global
        if (typeof window.createEmptyObra === 'function') {
            await window.createEmptyObra(obraData.nome, obraData.id);
            
            // ‚úÖ CORRE√á√ÉO: Aguardar cria√ß√£o e ent√£o preencher
            setTimeout(async () => {
                const obraElement = document.querySelector(`[data-obra-id="${obraData.id}"]`);
                if (obraElement && typeof window.populateObraData === 'function') {
                    console.log(`üé® Preenchendo dados da obra "${obraData.nome}"...`);
                    await window.populateObraData(obraData);
                }
            }, 300);
        }
    } catch (error) {
        console.error(`üí• ERRO ao carregar obra ${obraData.nome}:`, error);
    }
}

export {
    loadObrasFromServer,
    removeBaseObraFromHTML
};
/**
 * project-manager.js
 * Gerenciador de projetos - SISTEMA CORRIGIDO COM IDs √öNICOS
 */

import { createEmptyRoom } from '../../data/rooms.js'
import { generateProjectId } from '../../data/data-utils.js'
import { removeEmptyObraMessage } from './ui-helpers.js'

/**
 * Constr√≥i o HTML de um projeto - CORRE√á√ÉO COMPLETA
 * @param {string} obraId - ID √∫nico da obra
 * @param {string} obraName - Nome da obra
 * @param {string} projectId - ID √∫nico do projeto
 * @param {string} projectName - Nome do projeto
 * @returns {string} HTML do projeto
 */
function buildProjectHTML(obraId, obraName, projectId, projectName) {
    // ‚úÖ CORRE√á√ÉO: Validar IDs √∫nicos
    if (!obraId || obraId === 'undefined' || obraId === 'null') {
        console.error(`ERRO FALBACK (buildProjectHTML) project-manager.js [Obra ID inv√°lido: ${obraId}]`)
        return ''
    }
    
    const finalProjectId = projectId || generateProjectId(document.querySelector(`[data-obra-id="${obraId}"]`))
    
    if (!finalProjectId || finalProjectId === 'undefined' || finalProjectId === 'null') {
        console.error(`ERRO FALBACK (buildProjectHTML) project-manager.js [Project ID inv√°lido: ${finalProjectId}]`)
        return ''
    }
    
    console.log(`üî® [BUILD PROJECT HTML] Obra: ${obraName}, Projeto: ${projectName}, ObraID: ${obraId}, ProjectID: ${finalProjectId}`)

    return `
        <div class="project-block" 
             data-project-id="${finalProjectId}" 
             data-project-name="${projectName}" 
             data-obra-id="${obraId}" 
             data-obra-name="${obraName}">
            <div class="project-header">
                <!-- ‚úÖ CORRE√á√ÉO: usar APENAS projectId para toggle -->
                <button class="minimizer" onclick="toggleProject('${finalProjectId}', event)">+</button>
                <h3 class="project-title editable-title" data-editable="true" onclick="makeEditable(this, 'project')">${projectName}</h3>
                <div class="project-actions">
                    <!-- ‚úÖ CORRE√á√ÉO: passar IDs √∫nicos para delete -->
                    <button class="btn btn-delete" onclick="deleteProject('${obraId}', '${finalProjectId}')">Remover Projeto</button>
                </div>
            </div>
            <!-- ‚úÖ CORRE√á√ÉO: usar APENAS projectId no conte√∫do -->
            <div class="project-content collapsed" id="project-content-${finalProjectId}">
                <div class="rooms-container">
                    <p class="empty-message">Adicione salas a este projeto...</p>
                </div>
                <div class="add-room-section">
                    <!-- ‚úÖ CORRE√á√ÉO: passar IDs √∫nicos para add room -->
                    <button class="btn btn-add-secondary" onclick="addNewRoom('${obraId}', '${finalProjectId}')">+ Adicionar Sala</button>
                </div>
            </div>
        </div>
    `
}

/**
 * Cria um projeto vazio na obra especificada - CORRE√á√ÉO COMPLETA
 * @param {string} obraId - ID √∫nico da obra
 * @param {string} obraName - Nome da obra
 * @param {string} projectId - ID √∫nico do projeto
 * @param {string} projectName - Nome do projeto
 * @returns {Promise<boolean>} True se o projeto foi criado com sucesso
 */
async function createEmptyProject(obraId, obraName, projectId, projectName) {
    console.log(`üìÅ [CREATE PROJECT] Buscando obra: "${obraName}" (ID: ${obraId}) para criar projeto: "${projectName}" (ID: ${projectId})`)
    
    // ‚úÖ CORRE√á√ÉO: Buscar APENAS por ID √∫nico da obra
    const obraBlock = document.querySelector(`[data-obra-id="${obraId}"]`)
    
    if (!obraBlock) {
        console.error(`‚ùå Obra com ID ${obraId} n√£o encontrada`)
        
        // Debug: listar obras dispon√≠veis
        console.log('üîç Obras dispon√≠veis no DOM:')
        document.querySelectorAll('.obra-block').forEach(obra => {
            console.log(`  - Obra: "${obra.dataset.obraName}", ID: "${obra.dataset.obraId}"`)
        })
        return false
    }

    console.log(`‚úÖ Obra encontrada:`, obraBlock.dataset)

    const projectsContainer = document.getElementById(`projects-${obraId}`)
    if (!projectsContainer) {
        console.error(`‚ùå Container de projetos n√£o encontrado para obra: ${obraId}`)
        return false
    }

    removeEmptyObraMessage(obraName)

    // ‚úÖ CORRE√á√ÉO: Gerar ID SEGURO hier√°rquico se n√£o fornecido
    const projectNumber = getNextProjectNumber(obraId)
    const finalProjectId = projectId || generateProjectId(obraBlock, projectNumber)
    
    if (!finalProjectId) {
        console.error(`‚ùå Falha ao gerar ID para projeto ${projectName}`)
        return false
    }

    const projectHTML = buildProjectHTML(obraId, obraName, finalProjectId, projectName)
    projectsContainer.insertAdjacentHTML('beforeend', projectHTML)

    console.log(`‚úÖ Projeto ${projectName} criado na obra ${obraName} com ID SEGURO: ${finalProjectId}`)
    
    // Aguardar e confirmar que o projeto foi criado no DOM
    setTimeout(() => {
        const createdProject = document.querySelector(`[data-obra-id="${obraId}"][data-project-id="${finalProjectId}"]`)
        if (createdProject) {
            console.log(`‚úÖ PROJETO CONFIRMADO NO DOM: ${projectName}`, createdProject.dataset)
        } else {
            console.error(`‚ùå PROJETO N√ÉO ENCONTRADO NO DOM: ${projectName}`)
        }
    }, 100)

    return true
}

/**
 * Adiciona um novo projeto √† obra especificada - CORRE√á√ÉO COMPLETA
 * @param {string} obraId - ID √∫nico da obra
 * @returns {Promise<void>}
 */
async function addNewProjectToObra(obraId) {
    console.log(`‚ûï Adicionando novo projeto √† obra: ${obraId}`)
    
    // ‚úÖ CORRE√á√ÉO: Buscar obra por ID √∫nico
    const obraBlock = document.querySelector(`[data-obra-id="${obraId}"]`)
    
    if (!obraBlock) {
        console.error(`‚ùå Obra com ID ${obraId} n√£o encontrada`)
        
        // Debug: listar obras dispon√≠veis com seus IDs
        console.log('üîç Obras dispon√≠veis no DOM:')
        document.querySelectorAll('.obra-block').forEach(obra => {
            console.log(`  - Obra: "${obra.dataset.obraName}", ID: "${obra.dataset.obraId}"`)
        })
        return
    }
    
    const obraName = obraBlock.dataset.obraName
    const projectNumber = getNextProjectNumber(obraId)
    const projectName = `Projeto${projectNumber}`
    
    // ‚úÖ CORRE√á√ÉO: Gerar ID hier√°rquico √∫nico para projeto
    const projectId = generateProjectId(obraBlock)

    await createEmptyProject(obraId, obraName, projectId, projectName)
    console.log(`‚úÖ ${projectName} adicionado √† obra ${obraName} (ID: ${obraId})`)
}

/**
 * Conta projetos na obra espec√≠fica - CORRE√á√ÉO COMPLETA
 * @param {string} obraId - ID √∫nico da obra
 * @returns {number} N√∫mero do pr√≥ximo projeto
 */
function getNextProjectNumber(obraId) {
    // ‚úÖ CORRE√á√ÉO: Buscar projetos APENAS por obra ID
    const projects = document.querySelectorAll(`[data-obra-id="${obraId}"] .project-block`)
    return projects.length + 1
}

/**
 * Remove um projeto da obra
 * @param {string} obraId - ID √∫nico da obra
 * @param {string} projectId - ID √∫nico do projeto
 * @returns {void}
 */
function deleteProject(obraId, projectId) {
    // ‚úÖ CORRE√á√ÉO: Buscar APENAS por IDs √∫nicos
    const projectElement = document.querySelector(`[data-obra-id="${obraId}"][data-project-id="${projectId}"]`)
    
    if (!projectElement) {
        console.error(`‚ùå Projeto com ID ${projectId} n√£o encontrado na obra ${obraId}`)
        return
    }

    const projectName = projectElement.dataset.projectName
    projectElement.remove()
    
    console.log(`üóëÔ∏è Projeto ${projectName} (ID: ${projectId}) removido da obra ${obraId}`)
}

export {
    createEmptyProject,
    buildProjectHTML,
    addNewProjectToObra,
    getNextProjectNumber,
    deleteProject
}

// ‚úÖ CORRE√á√ÉO: Disponibiliza√ß√£o global CORRETA
if (typeof window !== 'undefined') {
    window.addNewProjectToObra = addNewProjectToObra
    window.getNextProjectNumber = getNextProjectNumber
    window.deleteProject = deleteProject
    window.createEmptyProject = createEmptyProject
}
