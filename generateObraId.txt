/**
 * data-utils-core.js
 * Utilit√°rios core e fun√ß√µes auxiliares
 * Gera√ß√£o de IDs SEGUROS E √öNICOS - SISTEMA CORRIGIDO
 */

// =============================================================================
// SISTEMA DE IDs SEGUROS E √öNICOS - CORRE√á√ÉO COMPLETA
// =============================================================================

/**
 * Gera um ID seguro baseado em letras + n√∫meros
 * @param {string} prefix - Prefixo para o ID
 * @returns {string} ID seguro
 * @generator @example obra_x87
 */
function generateSecureId(prefix = 'item') {
    const letters = 'abcdefghjkmnpqrstwxyz'; // 21 letras (remove i,l,o,v por confus√£o)
    const randomLetter1 = letters[Math.floor(Math.random() * letters.length)];
    const randomLetter2 = letters[Math.floor(Math.random() * letters.length)];
    const randomNum = Math.floor(Math.random() * 90) + 10; // 10-99 (sempre 2 d√≠gitos)
    return `${prefix}_${randomLetter1}${randomNum}`;
}

/**
 * Gera ID √∫nico para obra - SEGURO E √öNICO
 * @returns {string} ID √∫nico da obra
 */
function generateObraId() {
    return generateSecureId('obra');
}



/**
 * Gera ID hier√°rquico seguro para sala - SEGURO E √öNICO
 * @param {HTMLElement} projectElement - Elemento do projeto pai
 * @param {number} roomNumber - N√∫mero sequencial da sala
 * @returns {string} ID √∫nico da sala
 */
function generateRoomId(projectElement, roomNumber) {
    if (!projectElement) {
        console.error(`ERRO FALBACK (generateRoomId) data-utils-core.js [Elemento do projeto n√£o fornecido]`);
        return generateSecureId('sala');
    }
    
    const projectId = projectElement.dataset?.projectId;
    if (!projectId || projectId === 'undefined' || projectId === 'null') {
        console.error(`ERRO FALBACK (generateRoomId) data-utils-core.js [Project ID inv√°lido no dataset: ${projectId}]`);
        return generateSecureId('sala');
    }
    
    const roomPrefix = generateSecureId('sala').replace('sala_', '');
    return `${projectId}_sala_${roomPrefix}_${roomNumber}`;
}

// =============================================================================
// FUN√á√ïES DE NOMEA√á√ÉO - CORRE√á√ïES (MANTIDAS)
// =============================================================================

/**
 * Obt√©m o ID completo da sala no formato correto
 * @param {HTMLElement} roomElement - Elemento da sala
 * @returns {string} ID completo da sala
 */
function getRoomFullId(roomElement) {
    const roomId = roomElement.dataset.roomId;
    
    if (!roomId || roomId === 'undefined' || roomId === 'null' || roomId.includes('undefined')) {
        console.error(`ERRO FALBACK (getRoomFullId) data-utils-core.js [Room ID inv√°lido: ${roomId}]`);
        return generateSecureId('sala');
    }
    
    console.log(`‚úÖ ID da sala obtido do data attribute: ${roomId}`);
    return roomId;
}

/**
 * Obt√©m o nome da obra a partir do elemento - CORRIGIDO
 * @param {HTMLElement} obraElement - Elemento da obra
 * @returns {string} Nome da obra
 */
function getObraName(obraElement) {
    if (!obraElement) {
        console.error(`ERRO FALBACK (getObraName) data-utils-core.js [Elemento da obra n√£o fornecido]`);
        return 'Obra_Erro';
    }

    const titleElement = obraElement.querySelector('.obra-title');
    if (titleElement) {
        const name = titleElement.textContent || titleElement.innerText || '';
        const trimmedText = name.trim();
        if (trimmedText && trimmedText !== 'Obra') {
            return trimmedText;
        }
    }
    
    const obraNameFromData = obraElement.dataset.obraName;
    if (obraNameFromData && obraNameFromData !== 'undefined' && obraNameFromData !== 'null') {
        return obraNameFromData;
    }
    
    console.error(`ERRO FALBACK (getObraName) data-utils-core.js [Nome da obra n√£o encontrado]`);
    return 'Obra_Erro';
}

/**
 * Obt√©m o nome do projeto a partir do elemento - CORRIGIDO
 * @param {HTMLElement} projectElement - Elemento do projeto
 * @returns {string} Nome do projeto
 */
function getProjectName(projectElement) {
    if (!projectElement) {
        console.error(`ERRO FALBACK (getProjectName) data-utils-core.js [Elemento do projeto n√£o fornecido]`);
        return 'Projeto_Erro';
    }

    const titleElement = projectElement.querySelector('.project-title');
    if (titleElement) {
        const titleText = titleElement.textContent || titleElement.innerText || '';
        const trimmedText = titleText.trim();
        if (trimmedText && trimmedText !== 'Projeto') {
            console.log(`üìù Nome do projeto obtido do t√≠tulo: "${trimmedText}"`);
            return trimmedText;
        }
    }
    
    const projectNameFromData = projectElement.dataset.projectName;
    if (projectNameFromData && projectNameFromData !== 'undefined' && projectNameFromData !== 'null' && projectNameFromData !== 'Projeto') {
        console.log(`üìù Nome do projeto obtido do data attribute: "${projectNameFromData}"`);
        return projectNameFromData;
    }
    
    console.error(`ERRO FALBACK (getProjectName) data-utils-core.js [Nome do projeto n√£o encontrado]`);
    return 'Projeto_Erro';
}

/**
 * Obt√©m o nome da sala a partir do elemento - CORRIGIDO
 * @param {HTMLElement} roomElement - Elemento da sala
 * @returns {string} Nome da sala
 */
function getRoomName(roomElement) {
    if (!roomElement) {
        console.error(`ERRO FALBACK (getRoomName) data-utils-core.js [Elemento da sala n√£o fornecido]`);
        return 'Sala_Erro';
    }

    const titleElement = roomElement.querySelector('.room-title');
    if (titleElement) {
        const name = titleElement.textContent || titleElement.value || titleElement.getAttribute('value') || '';
        const trimmedName = name.trim();
        if (trimmedName) return trimmedName;
    }
    
    const roomNameFromData = roomElement.dataset.roomName;
    if (roomNameFromData && roomNameFromData !== 'undefined' && roomNameFromData !== 'null') {
        return roomNameFromData;
    }
    
    const roomId = roomElement.dataset.roomId;
    if (roomId && roomId !== 'undefined' && roomId !== 'null') {
        return `Sala ${roomId.split('_').pop()}`;
    }
    
    console.error(`ERRO FALBACK (getRoomName) data-utils-core.js [Nome da sala n√£o encontrado]`);
    return 'Sala_Erro';
}

// =============================================================================
// FUN√á√ïES UTILIT√ÅRIAS EXISTENTES (MANTIDAS)
// =============================================================================

/**
 * Extrai n√∫mero de um texto, convertendo v√≠rgula para ponto decimal
 * @param {string} text - Texto contendo n√∫mero
 * @returns {number|null} N√∫mero extra√≠do ou null se n√£o encontrado
 */
function extractNumberFromText(text) {
    if (!text) return null
    
    const numberMatch = text.match(/-?\d+(?:[.,]\d+)?/)
    if (numberMatch) {
        const numericString = numberMatch[0].replace(',', '.')
        const numericValue = parseFloat(numericString)
        return isNaN(numericValue) ? null : numericValue
    }
    
    return null
}

/**
 * Obt√©m o nome da m√°quina a partir do elemento
 * @param {HTMLElement} machineElement - Elemento da m√°quina
 * @param {string} machineId - ID da m√°quina
 * @returns {string} Nome da m√°quina
 */
function getMachineName(machineElement, machineId) {
    const titleElement = machineElement.querySelector('.machine-title-editable')
    if (!titleElement) return `M√°quina ${machineId}`
    
    const name = titleElement.value || titleElement.textContent || titleElement.getAttribute('value') || `M√°quina ${machineId}`
    return name.trim() || `M√°quina${machineId}`
}

/**
 * Converte texto de pre√ßo em n√∫mero
 * @param {string} priceText - Texto do pre√ßo no formato "R$ X.XXX,XX"
 * @returns {number} Valor num√©rico do pre√ßo
 */
function parseMachinePrice(priceText) {
    if (!priceText || priceText === 'R$ 0,00') return 0
    
    try {
        const cleaned = priceText.replace('R$', '')
                                .replace(/\./g, '')
                                .replace(',', '.')
                                .trim()
        return parseFloat(cleaned) || 0
    } catch (error) {
        console.error('‚ùå Erro ao converter pre√ßo:', priceText, error)
        return 0
    }
}

/**
 * Converte valores para n√∫mero com tratamento de seguran√ßa
 * @param {any} value - Valor a ser convertido
 * @returns {number} Valor num√©rico
 */
function safeNumber(value) {
    if (value === null || value === undefined || value === '') return 0
    const num = parseFloat(value.toString().replace(',', '.'))
    return isNaN(num) ? 0 : num
}

/**
 * Fun√ß√£o de debug para mostrar todos os elementos de ganhos t√©rmicos dispon√≠veis
 * @param {HTMLElement} roomElement - Elemento da sala para debug
 * @returns {void}
 */
function debugThermalGainsElements(roomElement) {
    const roomFullId = getRoomFullId(roomElement)
    console.log('üêõ DEBUG: Todos os elementos de ganhos t√©rmicos dispon√≠veis:')
    
    const selectors = [
        'total-ganhos-w', 'total-tr', 'total-externo', 'total-divisoes',
        'total-piso', 'total-iluminacao', 'total-dissi', 'total-pessoas',
        'total-ar-sensivel', 'total-ar-latente'
    ]
    
    selectors.forEach(selector => {
        const element = document.querySelector(`#${selector}-${roomFullId}`)
        console.log(`üîç ${selector}-${roomFullId}:`, element ? `ENCONTRADO - "${element.textContent}"` : 'N√ÉO ENCONTRADO')
    })
}

// =============================================================================
// EXPORTA√á√ïES - SISTEMA ATUALIZADO
// =============================================================================

export {
    // NOVO SISTEMA DE IDs SEGUROS
    generateSecureId,
    generateObraId,
    generateRoomId,
    
    // FUN√á√ïES DE NOMEA√á√ÉO CORRIGIDAS
    getRoomFullId,
    getObraName,
    getProjectName,
    getRoomName,
    
    // FUN√á√ïES UTILIT√ÅRIAS (MANTIDAS)
    extractNumberFromText,
    getMachineName,
    parseMachinePrice,
    safeNumber,
    debugThermalGainsElements
}
/**
 * =====================
 * Gerenciador de obras - obra-manager.js
 * SISTEMA CORRIGIDO COM IDs √öNICOS
 * =====================
 */

import { 
    showConfirmationModal, 
    undoDeletion,
    hideToast 
} from './modal/modal.js'

/**
 * Cria uma obra vazia na interface
 * @param {string} obraName - Nome da obra
 * @param {string} obraId - ID da obra (opcional)
 */
function createEmptyObra(obraName, obraId) {
    // ‚úÖ CORRE√á√ÉO: SEMPRE usar ID √∫nico, mesmo se fornecido (para consist√™ncia)
    const finalObraId = obraId || generateObraId();
    const obraHTML = buildObraHTML(obraName, finalObraId);
    insertObraIntoDOM(obraHTML);
    console.log(`üèóÔ∏è Obra ${obraName} criada - ID: ${finalObraId}`);
}

/**
 * Constr√≥i o HTML de uma obra
 * @param {string} obraName - Nome da obra
 * @param {string} obraId - ID √∫nico da obra
 * @returns {string} HTML da obra
 */
function buildObraHTML(obraName, obraId) {
    // ‚úÖ CORRE√á√ÉO: Validar ID √∫nico
    if (!obraId || obraId === 'undefined' || obraId === 'null') {
        console.error(`ERRO FALBACK (buildObraHTML) obra-manager.js [ID de obra inv√°lido: ${obraId}]`);
        obraId = generateObraId();
    }
    
    console.log(`üîç Build Obra HTML: ${obraName}, ID: ${obraId}`);

    return `
    <div class="obra-block" data-obra-id="${obraId}" data-obra-name="${obraName}">
      <div class="obra-header">
        <!-- ‚úÖ CORRE√á√ÉO: usar APENAS obraId para toggle -->
        <button class="minimizer" onclick="toggleObra('${obraId}', event)">+</button>
        <h2 class="obra-title editable-title" data-editable="true" onclick="makeEditable(this, 'obra')">${obraName}</h2>
        <div class="obra-actions">
          <button class="btn btn-delete" onclick="window.deleteObra('${obraName}', '${obraId}')">Remover Obra</button>
        </div>
      </div>
      <!-- ‚úÖ CORRE√á√ÉO: usar APENAS obraId no conte√∫do -->
      <div class="obra-content collapsed" id="obra-content-${obraId}">
        <div class="projects-container" id="projects-${obraId}">
          <p class="empty-message">Adicione projetos a esta obra...</p>
        </div>
        <div class="add-project-section">
          <!-- ‚úÖ CORRE√á√ÉO: Passar obraId para a fun√ß√£o -->
          <button class="btn btn-add-secondary" onclick="addNewProjectToObra('${obraId}')">+ Adicionar Projeto</button>
        </div>
        ${buildObraActionsFooter(obraName, !!obraId)}
      </div>
    </div>
  `;
}

/**
 * Constr√≥i o rodap√© de a√ß√µes da obra
 * @param {string} obraName - Nome da obra
 * @param {boolean} hasId - Se a obra j√° foi SALVA no servidor
 * @returns {string} HTML do rodap√© de a√ß√µes
 */
function buildObraActionsFooter(obraId, obraName, hasId = false) {
  const buttonText = hasId ? "Atualizar Obra" : "Salvar Obra";
  const buttonClass = hasId ? "btn-update" : "btn-save";

  console.log(`üîß Build Obra Footer: ${obraName}, ID: ${obraId}, HasId: ${hasId}, Button: ${buttonText}`);

  // ‚úÖ CORRE√á√ÉO: Usar obraId em TODAS as chamadas
  return `
    <div class="obra-actions-footer">
      <button class="btn btn-verify" onclick="verifyObraData('${obraId}')">Verificar Dados</button>
      <button class="btn ${buttonClass}" onclick="event.preventDefault(); saveOrUpdateObra('${obraId}')">${buttonText}</button>      
      <button class="btn btn-download" onclick="downloadPDF('${obraId}')">Baixar PDF</button>
      <button class="btn btn-download" onclick="downloadWord('${obraId}')">Baixar Word</button>
    </div>
  `;
}

/**
 * Insere o HTML da obra no DOM
 * @param {string} obraHTML - HTML da obra a ser inserida
 */
function insertObraIntoDOM(obraHTML) {
  const projectsContainer = document.getElementById("projects-container")
  if (!projectsContainer) {
    console.error('‚ùå Container de projetos n√£o encontrado')
    return
  }
  projectsContainer.insertAdjacentHTML("beforeend", obraHTML)
}

/**
 * Atualiza o bot√£o de uma obra ap√≥s salvamento
 * @param {string} obraName - Nome da obra
 * @param {string} obraId - ID da obra salva
 */
function updateObraButtonAfterSave(obraName, obraId) {
  // ‚úÖ CORRE√á√ÉO: Buscar APENAS por ID √∫nico
  const obraBlock = document.querySelector(`[data-obra-id="${obraId}"]`)
  if (!obraBlock) {
    console.error(`‚ùå Obra com ID ${obraId} n√£o encontrada para atualizar bot√£o`)
    return
  }

  obraBlock.dataset.obraId = obraId

  const obraContent = document.getElementById(`obra-content-${obraId}`)
  if (obraContent) {
    const oldFooter = obraContent.querySelector('.obra-actions-footer')
    if (oldFooter) {
      const newFooter = buildObraActionsFooter(obraName, true)
      oldFooter.outerHTML = newFooter
      console.log(`üîÑ Bot√£o da obra ${obraName} ATUALIZADO para "Atualizar Obra" (ID: ${obraId})`)
    } else {
      console.error(`‚ùå Rodap√© n√£o encontrado na obra ${obraName}`)
    }
  } else {
    console.error(`‚ùå Conte√∫do da obra ${obraId} n√£o encontrado`)
  }
}

/**
 * Fun√ß√£o principal de deletar obra (ATUALIZADA)
 */
async function deleteObra(obraName, obraId) {
  // ‚úÖ CORRE√á√ÉO: Buscar APENAS por ID √∫nico
  const obraBlock = document.querySelector(`[data-obra-id="${obraId}"]`)
  if (!obraBlock) {
    console.error(`‚ùå Obra com ID ${obraId} n√£o encontrada`)
    return
  }

  // Mostra o modal personalizado em vez do confirm b√°sico
  showConfirmationModal(obraName, obraId, obraBlock)
}

/**
 * Obt√©m o pr√≥ximo n√∫mero de obra
 * @returns {number} Pr√≥ximo n√∫mero dispon√≠vel para obra
 */
function getNextObraNumber() {
  const obraBlocks = document.querySelectorAll('.obra-block')
  const obraNumbers = Array.from(obraBlocks).map(obra => {
    const obraName = obra.dataset.obraName
    const match = obraName.match(/Obra(\d+)/)
    return match ? parseInt(match[1]) : 0
  })

  const maxNumber = Math.max(0, ...obraNumbers)
  return maxNumber + 1
}

/**
 * Adiciona uma nova obra √† interface
 */
async function addNewObra() {
  try {
    const obraNumber = getNextObraNumber()
    const obraName = `Obra${obraNumber}`
    
    // ‚úÖ CORRE√á√ÉO: Gerar ID √∫nico para nova obra
    const obraId = generateObraId()

    console.log(`üèóÔ∏è Criando nova obra: ${obraName} com ID: ${obraId}`)
    createEmptyObra(obraName, obraId)
    console.log(`‚úÖ ${obraName} adicionada com ID √∫nico: ${obraId}`)

  } catch (error) {
    console.error("‚ùå Erro ao adicionar nova obra:", error)
    alert("Erro ao criar nova obra. Verifique o console para detalhes.")
  }
}

// =============================================================================
// SISTEMA DE IDs √öNICOS PARA OBRAS
// =============================================================================

/**
 * Gera ID √∫nico para obra - CURTO E √öNICO
 * @returns {string} ID √∫nico da obra
 */
function generateObraId() {
    const letters = 'abcdefghjkmnpqrstwxyz'
    const randomLetter = letters[Math.floor(Math.random() * letters.length)]
    const randomNum = Math.floor(Math.random() * 90) + 10
    return `obra_${randomLetter}${randomNum}`
}

// ===== EXPORTA√á√ïES E CONFIGURA√á√ÉO GLOBAL =====

// Torne as fun√ß√µes globais para o HTML poder acessar
window.deleteObra = deleteObra
window.addNewObra = addNewObra
window.undoDeletion = undoDeletion
window.hideToast = hideToast

// Exporta√ß√µes para m√≥dulos
export {
    createEmptyObra,
    buildObraHTML,
    buildObraActionsFooter,
    insertObraIntoDOM,
    updateObraButtonAfterSave,
    deleteObra,
    getNextObraNumber,
    addNewObra,
    generateObraId
}
// server-utils.js

// REMOVIDO NA REFACTOR: import { createEmptyProject } from '../ui/interface.js'
import { createEmptyRoom } from './rooms.js'
import { updateProjectButton } from './server.js'
import { calculateVazaoArAndThermalGains } from '../features/calculos/calculos-manager.js'
import { ensureStringId } from '../utils/utils.js'
import { getGeralCount, incrementGeralCount } from './server.js'

/**
 * Renderiza uma obra completa a partir dos dados carregados do servidor
 * Inclui projetos, salas e todas as configura√ß√µes associadas
 * @param {Object} obraData - Dados completos da obra
 * @returns {void}
 */
function renderObraFromData(obraData) {
  const obraName = obraData.nome
  const obraId = ensureStringId(obraData.id)

  console.log(`üéØ Renderizando obra: ${obraName} (ID: ${obraId})`)

  // ‚úÖ CORRE√á√ÉO: Usar ID seguro na cria√ß√£o
  createEmptyObra(obraName, obraId)

  // Renderizar projetos da obra
  if (obraData.projetos && obraData.projetos.length > 0) {
    // ‚úÖ CORRE√á√ÉO: Buscar por ID √∫nico em vez de nome
    const obraContent = document.getElementById(`obra-content-${obraId}`)

    if (obraContent) {
      const emptyMessage = obraContent.querySelector(".empty-message")
      if (emptyMessage) {
        emptyMessage.remove()
      }

      setTimeout(() => {
        obraData.projetos.forEach((projectData) => {
          renderProjectFromData(projectData, obraId, obraName)
        })
      }, 100);
    }
  }

  console.log(`‚úÖ Obra ${obraName} renderizada com sucesso (ID: ${obraId})`)
}

/**
 * Renderiza um projeto completo a partir dos dados carregados
 * Cria o projeto e todas as suas salas com configura√ß√µes
 * @param {Object} projectData - Dados completos do projeto
 * @param {string} obraId - ID √∫nico da obra pai
 * @param {string} obraName - Nome da obra pai
 * @returns {void}
 */
function renderProjectFromData(projectData, obraId = null, obraName = null) {
  const projectName = projectData.nome
  const projectId = ensureStringId(projectData.id)

  console.log(`üéØ Renderizando projeto: ${projectName} (ID: ${projectId})`)

  // ‚úÖ CORRE√á√ÉO: Se n√£o foi passada a obra, tentar encontrar pela estrutura do DOM usando ID
  if (!obraId) {
    // Buscar obra que cont√©m este projeto
    const existingProject = document.querySelector(`[data-project-id="${projectId}"]`)
    obraId = existingProject?.dataset.obraId
    obraName = existingProject?.dataset.obraName
  }

  // Se ainda n√£o tem obra, criar projeto na primeira obra ou criar uma nova
  if (!obraId) {
    const obras = document.querySelectorAll('.obra-block')
    if (obras.length > 0) {
      const primeiraObra = obras[0]
      obraId = primeiraObra.dataset.obraId
      obraName = primeiraObra.dataset.obraName
    } else {
      // ‚úÖ CORRE√á√ÉO: Criar obra com ID seguro
      obraName = 'Obra1'
      obraId = generateObraId() // Usar a fun√ß√£o do sistema
      createEmptyObra(obraName, obraId)
    }
  }

  // ‚úÖ CORRE√á√ÉO: Passar IDs √∫nicos corretamente
  createEmptyProject(obraId, obraName, projectId, projectName)

  if (projectData.salas && projectData.salas.length > 0) {
    // ‚úÖ CORRE√á√ÉO: Buscar por ID √∫nico do projeto
    const projectContent = document.getElementById(`project-content-${projectId}`)

    if (projectContent) {
      const emptyMessage = projectContent.querySelector(".empty-message")
      if (emptyMessage) {
        emptyMessage.remove()
      }

      setTimeout(() => {
        projectData.salas.forEach((roomData) => {
          renderRoomFromData(projectId, projectName, roomData, obraId, obraName)
        })
      }, 100);
    }
  }

  if (projectId) {
    updateProjectButton(projectName, true)
  }

  // Atualizar o contador quando renderizar projeto existente
  if (projectId && projectId !== "" && projectId !== "null") {
    const currentCount = getGeralCount();
    if (currentCount === 0) {
      incrementGeralCount();
      console.log(`üî¢ Projeto renderizado - GeralCount incrementado para: ${getGeralCount()}`)
    }
  }

  const projectNumber = Number.parseInt(projectName.replace("Projeto", "")) || 0
  if (projectNumber > window.projectCounter) {
    window.projectCounter = projectNumber
  }

  console.log(`‚úÖ Projeto ${projectName} renderizado com sucesso - GeralCount: ${getGeralCount()}`)
}

/**
 * Renderiza uma sala individual a partir dos dados carregados
 * Preenche todos os inputs, configura√ß√µes e m√°quinas da sala
 * @param {string} projectId - ID √∫nico do projeto pai
 * @param {string} projectName - Nome do projeto pai
 * @param {Object} roomData - Dados completos da sala
 * @param {string} obraId - ID √∫nico da obra pai
 * @param {string} obraName - Nome da obra pai
 * @returns {void}
 */
function renderRoomFromData(projectId, projectName, roomData, obraId = null, obraName = null) {
  const roomName = roomData.nome
  const roomId = ensureStringId(roomData.id)

  console.log(`üéØ Renderizando sala: ${roomName} no projeto ${projectName}`, {
    obra: obraName,
    projectId: projectId,
    roomId: roomId,
    inputs: Object.keys(roomData.inputs || {}).length,
    maquinas: roomData.maquinas?.length || 0,
    capacidade: Object.keys(roomData.capacidade || {}).length,
    ganhosTermicos: Object.keys(roomData.ganhosTermicos || {}).length,
    configuracao: Object.keys(roomData.configuracao || {}).length
  });

  setTimeout(() => {
    // ‚úÖ CORRE√á√ÉO: Passar todos os IDs √∫nicos
    createEmptyRoom(obraId, projectId, roomName, roomId)

    // Delay adicional para garantir que a sala foi criada antes de preencher inputs
    setTimeout(() => {
      populateRoomInputs(projectId, projectName, roomId, roomName, roomData, obraId, obraName)
    }, 100);
    
  }, 100);
}

/**
 * Preenche todos os inputs e configura√ß√µes de uma sala com dados carregados
 * Processa inputs b√°sicos, configura√ß√µes, ganhos t√©rmicos, capacidade e m√°quinas
 * @param {string} projectId - ID √∫nico do projeto
 * @param {string} projectName - Nome do projeto
 * @param {string} roomId - ID √∫nico da sala
 * @param {string} roomName - Nome da sala
 * @param {Object} roomData - Dados completos da sala
 * @param {string} obraId - ID √∫nico da obra
 * @param {string} obraName - Nome da obra
 * @returns {void}
 */
function populateRoomInputs(projectId, projectName, roomId, roomName, roomData, obraId = null, obraName = null) {
  let attempts = 0;
  const maxAttempts = 10;
  
  /**
   * Tenta preencher os dados da sala com retry em caso de elementos n√£o carregados
   * @returns {void}
   */
  const tryPopulate = () => {
    // ‚úÖ CORRE√á√ÉO: Buscar sala usando ID √∫nico
    let roomBlock;
    if (obraId && projectId) {
      roomBlock = document.querySelector(`[data-obra-id="${obraId}"][data-project-id="${projectId}"][data-room-id="${roomId}"]`);
    } else if (roomId) {
      roomBlock = document.querySelector(`[data-room-id="${roomId}"]`);
    } else {
      // Fallback para busca por nome (compatibilidade)
      if (obraName) {
        roomBlock = document.querySelector(`[data-obra-name="${obraName}"] [data-room-name="${roomName}"]`);
      } else {
        roomBlock = document.querySelector(`[data-room-name="${roomName}"]`);
      }
    }
    
    if (!roomBlock && attempts < maxAttempts) {
      attempts++;
      console.log(`‚è≥ Tentativa ${attempts} - Sala ${roomName} (ID: ${roomId}) n√£o encontrada, tentando novamente...`);
      setTimeout(tryPopulate, 100);
      return;
    }
    
    if (!roomBlock) {
      console.error(`‚ùå Sala ${roomName} (ID: ${roomId}) n√£o encontrada ap√≥s ${maxAttempts} tentativas`);
      return;
    }

    console.log(`‚úÖ Sala ${roomName} encontrada (ID: ${roomId}), preenchendo dados...`);

    // 1. PREENCHER INPUTS B√ÅSICOS
    if (roomData.inputs && Object.keys(roomData.inputs).length > 0) {
      console.log(`üìù Preenchendo ${Object.keys(roomData.inputs).length} inputs`);
      populateBasicInputs(roomBlock, roomData.inputs, roomId);
    }

    // 2. PREENCHER CONFIGURA√á√ïES
    if (roomData.configuracao && Object.keys(roomData.configuracao).length > 0) {
      console.log(`‚öôÔ∏è Preenchendo ${Object.keys(roomData.configuracao).length} configura√ß√µes`);
      populateConfiguration(roomBlock, roomData.configuracao, roomId);
    }

    // 3. PREENCHER GANHOS T√âRMICOS
    if (roomData.ganhosTermicos && Object.keys(roomData.ganhosTermicos).length > 0) {
      console.log(`üî• Preenchendo ${Object.keys(roomData.ganhosTermicos).length} ganhos t√©rmicos`);
      populateThermalGains(roomBlock, roomData.ganhosTermicos, roomId);
    }

    // 4. PREENCHER CAPACIDADE
    if (roomData.capacidade && Object.keys(roomData.capacidade).length > 0) {
      console.log(`‚ùÑÔ∏è Preenchendo ${Object.keys(roomData.capacidade).length} dados de capacidade`);
      populateCapacityData(roomBlock, roomData.capacidade, roomId);
    }

    // 5. PREENCHER M√ÅQUINAS
    if (roomData.maquinas && roomData.maquinas.length > 0) {
      console.log(`ü§ñ Preenchendo ${roomData.maquinas.length} m√°quinas`);
      populateMachines(roomBlock, roomData.maquinas, roomId);
    }

    // 6. RECALCULAR TUDO AP√ìS PREENCHIMENTO
    setTimeout(() => {
      console.log(`üîÑ Recalculando vaz√£o e ganhos t√©rmicos para ${roomId}`);
      calculateVazaoArAndThermalGains(roomId);
      
      // Recalcular capacidade se a fun√ß√£o existir
      setTimeout(() => {
        if (typeof window.calculateCapacitySolution !== 'undefined') {
          console.log(`üîÑ Recalculando capacidade para ${roomId}`);
          window.calculateCapacitySolution(roomId);
        }
      }, 300);
    }, 500);

    console.log(`‚úÖ Todos os dados da sala ${roomName} (ID: ${roomId}) preenchidos com sucesso`);
  };
  
  tryPopulate();
}

/**
 * Preenche inputs b√°sicos da sala como temperatura, pressuriza√ß√£o, etc.
 * @param {HTMLElement} roomBlock - Elemento HTML da sala
 * @param {Object} inputsData - Dados dos inputs b√°sicos
 * @param {string} roomId - ID √∫nico da sala
 * @returns {void}
 */
function populateBasicInputs(roomBlock, inputsData, roomId) {
  Object.entries(inputsData).forEach(([field, value]) => {
    if (value === null || value === undefined || value === '') return;

    // CORRE√á√ÉO: Tratamento especial para pressuriza√ß√£o
    if (field === 'pressurizacao') {
      const pressurizacaoValue = Boolean(value);
      const radioName = `pressurizacao-${roomId}`;
      
      // Encontrar o radio correto (sim/nao)
      const radioToCheck = roomBlock.querySelector(`input[type="radio"][name="${radioName}"][value="${pressurizacaoValue ? 'sim' : 'nao'}"]`);
      if (radioToCheck) {
        radioToCheck.checked = true;
        console.log(`‚úÖ Pressuriza√ß√£o definida como: ${pressurizacaoValue ? 'sim' : 'nao'}`);
        
        // Disparar evento para atualizar campos relacionados
        radioToCheck.dispatchEvent(new Event('change', { bubbles: true }));
      }
      return; 
    }

    // Buscar por m√∫ltiplos seletores poss√≠veis para inputs de climatiza√ß√£o
    const selectors = [
      `[data-field="${field}"]`,
      `.clima-input[data-field="${field}"]`,
      `[name="${field}"]`,
      `[id="${field}"]`,
      `input[data-field="${field}"]`,
      `select[data-field="${field}"]`
    ];

    let element = null;
    for (const selector of selectors) {
      element = roomBlock.querySelector(selector);
      if (element) break;
    }

    // ‚úÖ CORRE√á√ÉO: Se n√£o encontrou pelo nome limpo, tentar com sufixo do roomId
    if (!element) {
      const selectorsWithSuffix = [
        `[data-field="${field}-${roomId}"]`,
        `[name="${field}-${roomId}"]`,
        `[id="${field}-${roomId}"]`
      ];
      
      for (const selector of selectorsWithSuffix) {
        element = roomBlock.querySelector(selector);
        if (element) break;
      }
    }

    if (element) {
      try {
        if (element.type === 'checkbox') {
          element.checked = Boolean(value);
        } else if (element.type === 'radio') {
          const radioToCheck = roomBlock.querySelector(`input[type="radio"][name="${element.name}"][value="${value}"]`);
          if (radioToCheck) {
            radioToCheck.checked = true;
          }
        } else if (element.tagName === 'SELECT') {
          
          // Para selects, procurar option com valor correspondente
          const optionToSelect = element.querySelector(`option[value="${value}"]`);
          if (optionToSelect) {
            element.value = value;
          } else {

            // Tentar definir diretamente
            element.value = value;
          }
        } else {
          element.value = value;
        }
        
        console.log(`‚úÖ Campo ${field} preenchido com:`, value);
      } catch (error) {
        console.warn(`‚ö†Ô∏è Erro ao preencher campo ${field}:`, error);
      }
    } else {
      console.warn(`‚ö†Ô∏è Campo ${field} n√£o encontrado na interface`);
    }
  });
}

/**
 * Preenche configura√ß√µes da sala como op√ß√µes de instala√ß√£o
 * @param {HTMLElement} roomBlock - Elemento HTML da sala
 * @param {Object} configData - Dados de configura√ß√£o
 * @param {string} roomId - ID √∫nico da sala
 * @returns {void}
 */
function populateConfiguration(roomBlock, configData, roomId) {

    // Preencher op√ß√µes de instala√ß√£o (array de checkboxes)
    if (configData.opcoesInstalacao && Array.isArray(configData.opcoesInstalacao)) {
        console.log(`‚öôÔ∏è Preenchendo ${configData.opcoesInstalacao.length} op√ß√µes de instala√ß√£o`);
        
        configData.opcoesInstalacao.forEach(opcaoValue => {
            // ‚úÖ CORRE√á√ÉO: Buscar por name que inclui roomId
            const checkbox = roomBlock.querySelector(`input[name^="opcoesInstalacao-${roomId}"][value="${opcaoValue}"]`) ||
                            roomBlock.querySelector(`input[name^="opcoesInstalacao-"][value="${opcaoValue}"]`);
            if (checkbox) {
                checkbox.checked = true;
                console.log(`‚úÖ Op√ß√£o de instala√ß√£o marcada: ${opcaoValue}`);
            } else {
                console.warn(`‚ö†Ô∏è Op√ß√£o de instala√ß√£o n√£o encontrada: ${opcaoValue}`);
            }
        });
    }
    
    // Preencher outras configura√ß√µes
    Object.entries(configData).forEach(([field, value]) => {
        if (field === 'opcoesInstalacao') return; 
        
        if (value === null || value === undefined || value === '') return;

        const element = roomBlock.querySelector(`[name="${field}"], [id="${field}"], [data-field="${field}"]`);
        if (element) {
            try {
                if (element.type === 'checkbox') {
                    element.checked = Boolean(value);
                } else if (element.type === 'radio') {
                    const radioToCheck = roomBlock.querySelector(`input[type="radio"][name="${element.name}"][value="${value}"]`);
                    if (radioToCheck) {
                        radioToCheck.checked = true;
                    }
                } else if (element.tagName === 'SELECT') {
                    element.value = value;
                } else {
                    element.value = value;
                }
                
                console.log(`‚úÖ Configura√ß√£o ${field} preenchida com:`, value);
            } catch (error) {
                console.warn(`‚ö†Ô∏è Erro ao preencher configura√ß√£o ${field}:`, error);
            }
        }
    });
}

/**
 * Preenche dados de ganhos t√©rmicos calculados da sala
 * @param {HTMLElement} roomBlock - Elemento HTML da sala
 * @param {Object} gainsData - Dados de ganhos t√©rmicos
 * @param {string} roomId - ID √∫nico da sala
 * @returns {void}
 */
function populateThermalGains(roomBlock, gainsData, roomId) {
  Object.entries(gainsData).forEach(([field, value]) => {
    if (value === null || value === undefined || value === '') return;

    // ‚úÖ CORRE√á√ÉO: Buscar por elementos com sufixo do roomId
    const selectors = [
      `[id="${field}-${roomId}"]`,
      `[id="${field}"]`,
      `.thermal-result[id="${field}"]`,
      `.result-value[id="${field}"]`,
      `.calculated-value[id="${field}"]`,
      `[class*="thermal"][id="${field}"]`
    ];

    let element = null;
    for (const selector of selectors) {
      element = roomBlock.querySelector(selector);
      if (element) break;
    }

    if (element) {
      try {
        // Se for elemento de input, preencher value, sen√£o textContent
        if (element.tagName === 'INPUT' || element.tagName === 'SELECT') {
          element.value = value;
        } else {
          element.textContent = typeof value === 'number' ? value.toFixed(2) : value;
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è Erro ao preencher ganho t√©rmico ${field}:`, error);
      }
    }
  });
}

/**
 * Preenche dados de capacidade de climatiza√ß√£o da sala
 * @param {HTMLElement} roomBlock - Elemento HTML da sala
 * @param {Object} capacityData - Dados de capacidade
 * @param {string} roomId - ID √∫nico da sala
 * @returns {void}
 */
function populateCapacityData(roomBlock, capacityData, roomId) {

  // ‚úÖ CORRE√á√ÉO: Obter projectId do roomBlock
  const projectBlock = roomBlock.closest('.project-block');
  const projectId = projectBlock ? projectBlock.getAttribute('data-project-id') : '';
  const projectName = projectBlock ? projectBlock.getAttribute('data-project-name') : '';
  
  Object.entries(capacityData).forEach(([field, value]) => {
    if (value === null || value === undefined || value === '') return;

    // ‚úÖ CORRE√á√ÉO: Buscar elementos de capacidade com roomId
    const selectors = [
      `[id="${field}-${roomId}"]`,
      `[id="${field}"]`,
      `[name="${field}"]`,
      `[data-field="${field}"]`
    ];

    let element = null;
    for (const selector of selectors) {
      element = roomBlock.querySelector(selector);
      if (element) break;
    }

    if (element) {
      try {
        if (element.type === 'checkbox') {
          element.checked = Boolean(value);
        } else if (element.tagName === 'SELECT') {
          const optionToSelect = element.querySelector(`option[value="${value}"]`);
          if (optionToSelect) {
            element.value = value;
          }
        } else if (element.tagName === 'INPUT' || element.tagName === 'SELECT') {
          element.value = value;
        } else {

          // Elementos de exibi√ß√£o (span, div, etc)
          element.textContent = typeof value === 'number' ? value.toFixed(2) : value;
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è Erro ao preencher capacidade ${field}:`, error);
      }
    }
  });

  // ‚úÖ CORRE√á√ÉO: Usar roomId para carregar capacidade
  setTimeout(() => {
    if (typeof window.loadCapacityData !== 'undefined') {
      window.loadCapacityData(projectName, roomId);
    } else if (typeof window.calculateCapacitySolution !== 'undefined') {
      window.calculateCapacitySolution(roomId);
    }
  }, 800);
}

/**
 * Preenche m√°quinas de climatiza√ß√£o da sala
 * @param {HTMLElement} roomBlock - Elemento HTML da sala
 * @param {Array} machinesData - Array de dados das m√°quinas
 * @param {string} roomId - ID √∫nico da sala
 * @returns {void}
 */
function populateMachines(roomBlock, machinesData, roomId) {
  console.log(`ü§ñ Iniciando carregamento de ${machinesData.length} m√°quinas para ${roomId}`);
  
  // ‚úÖ CORRE√á√ÉO: Usar loadSavedMachines com roomId
  if (typeof window.loadSavedMachines !== 'undefined') {
    console.log(`üîÑ Chamando loadSavedMachines para ${roomId}`);
    window.loadSavedMachines(roomId, machinesData);
  } else {
    console.error('‚ùå loadSavedMachines n√£o dispon√≠vel');
  }
}

// ‚úÖ CORRE√á√ÉO: Adicionar fun√ß√£o auxiliar para compatibilidade
function generateObraId() {
    const letters = 'abcdefghjkmnpqrstwxyz';
    const randomLetter = letters[Math.floor(Math.random() * letters.length)];
    const randomNum = Math.floor(Math.random() * 90) + 10;
    return `obra_${randomLetter}${randomNum}`;
}

export {
  renderObraFromData, 
  renderProjectFromData,
  renderRoomFromData,
  populateRoomInputs,
}
