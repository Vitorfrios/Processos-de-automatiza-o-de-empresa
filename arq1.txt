/**
 * interface.js - CORRE√á√ÉO DO SISTEMA DE TOGGLE
 * SISTEMA CORRIGIDO COM IDs √öNICOS
 */

import { 
    showSystemStatus,
    removeExistingStatusBanner,
    createStatusBanner,
    insertStatusBanner,
    scheduleStatusBannerRemoval,
} from './intr-files/status-manager.js'

import { 
    toggleElementVisibility,
    expandElement,
    collapseElement,
    calculateRoomCompletionStats,
    removeEmptyObraMessage,
    showEmptyObraMessageIfNeeded,
    removeEmptyProjectMessage,
    showEmptyProjectMessageIfNeeded,
} from './intr-files/ui-helpers.js'

import { 
    createEmptyObra,
    buildObraHTML,
    buildObraActionsFooter,
    insertObraIntoDOM,
    updateObraButtonAfterSave,
    deleteObra,
    getNextObraNumber,
    addNewObra,
} from './intr-files/obra-manager.js'

import { 
    createEmptyProject,
    buildProjectHTML,
    addNewProjectToObra
} from './intr-files/project-manager.js'

import{getNextProjectNumber} from '../data/data-files/data-utils-core.js'

import { createEmptyRoom } from '../data/modules/room-operations.js'

// Re-exporta√ß√µes para manter compatibilidade
export {
    showSystemStatus,
    removeExistingStatusBanner,
    createStatusBanner,
    insertStatusBanner,
    scheduleStatusBannerRemoval,
    toggleElementVisibility,
    expandElement,
    collapseElement,
    calculateRoomCompletionStats,
    removeEmptyObraMessage,
    showEmptyObraMessageIfNeeded,
    removeEmptyProjectMessage,
    showEmptyProjectMessageIfNeeded,
    createEmptyObra,
    buildObraHTML,
    buildObraActionsFooter,
    insertObraIntoDOM,
    updateObraButtonAfterSave,
    deleteObra,
    getNextObraNumber,
    addNewObra,
    createEmptyProject,
    buildProjectHTML,
    addNewProjectToObra,
    getNextProjectNumber,
    createEmptyRoom,
}

/**
 * Adiciona um novo projeto √† obra mais recente
 * @returns {void}
 * 
 * @example
 * addNewProject() // Cria uma nova obra e adiciona um projeto nela
 */
function addNewProject() {
  addNewObra().then(() => {
    const obraNumber = getNextObraNumber() - 1
    const obraName = `Obra${obraNumber}`
    addNewProjectToObra(obraName)
  })
}

// =============================================================================
// SISTEMA DE TOGGLE CORRIGIDO - IDs √öNICOS
// =============================================================================

/**
 * Alterna a visibilidade do conte√∫do de uma obra (expandir/recolher) - CORRE√á√ÉO COMPLETA
 * @param {string} obraId - ID √∫nico da obra a ser alternada
 * @param {Event} event - Evento de clique do usu√°rio
 * @returns {void}
 * 
 * @example
 * toggleObra('obra_a42', event) // Expande ou recolhe a obra com ID 'obra_a42'
 */
function toggleObra(obraId, event) {
    console.log(`üîß Toggle Obra chamado: ${obraId}`);
    
    // ‚úÖ CORRE√á√ÉO: Validar ID √∫nico
    if (!obraId || obraId === 'undefined' || obraId === 'null') {
        console.error(`ERRO FALBACK (toggleObra) interface.js [ID de obra inv√°lido: ${obraId}]`);
        return;
    }
    
    // ‚úÖ CORRE√á√ÉO: Buscar APENAS por ID √∫nico
    const contentId = `obra-content-${obraId}`;
    const content = document.getElementById(contentId);
    
    if (!content) {
        console.error(`‚ùå Conte√∫do da obra ${obraId} n√£o encontrado`);
        console.log('üîç Conte√∫dos de obra dispon√≠veis:');
        document.querySelectorAll('[id^="obra-content-"]').forEach(content => {
            console.log(`  - ${content.id}`);
        });
        return;
    }

    const isCollapsed = content.classList.contains("collapsed");
    const minimizer = event.target;

    if (isCollapsed) {
        content.classList.remove("collapsed");
        minimizer.textContent = "‚àí";
        console.log(`üìÇ Obra ${obraId} expandida`);
    } else {
        content.classList.add("collapsed");
        minimizer.textContent = "+";
        console.log(`üìÅ Obra ${obraId} recolhida`);
    }
}

/**
 * Alterna a visibilidade do conte√∫do de um projeto (expandir/recolher) - CORRE√á√ÉO COMPLETA
 * @param {string} projectId - ID √∫nico do projeto a ser alternado
 * @param {Event} event - Evento de clique do usu√°rio
 * @returns {void}
 * 
 * @example
 * toggleProject('obra_a42_proj1', event) // Expande ou recolhe o projeto com ID 'obra_a42_proj1'
 */
function toggleProject(projectId, event) {
    console.log(`üîß Toggle Project chamado: ${projectId}`);
    
    // ‚úÖ CORRE√á√ÉO: Validar ID √∫nico
    if (!projectId || projectId === 'undefined' || projectId === 'null') {
        console.error(`ERRO FALBACK (toggleProject) interface.js [ID de projeto inv√°lido: ${projectId}]`);
        return;
    }
    
    // ‚úÖ CORRE√á√ÉO: Buscar APENAS por ID √∫nico
    const contentId = `project-content-${projectId}`;
    const content = document.getElementById(contentId);
    
    if (!content) {
        console.error(`‚ùå Conte√∫do do projeto ${projectId} n√£o encontrado`);
        console.log('üîç Conte√∫dos de projeto dispon√≠veis:');
        document.querySelectorAll('[id^="project-content-"]').forEach(content => {
            console.log(`  - ${content.id}`);
        });
        return;
    }

    const isCollapsed = content.classList.contains("collapsed");
    const minimizer = event.target;

    if (isCollapsed) {
        content.classList.remove("collapsed");
        minimizer.textContent = "‚àí";
        console.log(`üìÇ Projeto ${projectId} expandido`);
    } else {
        content.classList.add("collapsed");
        minimizer.textContent = "+";
        console.log(`üìÅ Projeto ${projectId} recolhido`);
    }
}

/**
 * Alterna a visibilidade do conte√∫do de uma sala (expandir/recolher) - CORRE√á√ÉO COMPLETA
 * @param {string} roomId - ID √∫nico da sala
 * @param {Event} event - Evento de clique do usu√°rio
 * @returns {void}
 * 
 * @example
 * toggleRoom('obra_a42_proj1_sala1', event) // Expande ou recolhe a sala com ID 'obra_a42_proj1_sala1'
 */
function toggleRoom(roomId, event) {
    console.log(`üîß Toggle Sala chamado: ID ${roomId}`, event);
    
    // ‚úÖ CORRE√á√ÉO: Validar ID √∫nico
    if (!roomId || roomId === 'undefined' || roomId === 'null') {
        console.error(`ERRO FALBACK (toggleRoom) interface.js [ID de sala inv√°lido: ${roomId}]`);
        return;
    }
    
    // ‚úÖ CORRE√á√ÉO: Buscar APENAS por ID √∫nico
    const contentId = `room-content-${roomId}`;
    const content = document.getElementById(contentId);
    
    if (!content) {
        console.error(`‚ùå Conte√∫do da sala ${roomId} n√£o encontrado`);
        console.log(`üîç Procurando por: ${contentId}`);
        console.log('üîç Conte√∫dos de sala dispon√≠veis:');
        document.querySelectorAll('[id^="room-content-"]').forEach(content => {
            console.log(`  - ${content.id}`);
        });
        return;
    }

    const isCollapsed = content.classList.contains("collapsed");
    const minimizer = event.target;

    console.log(`üìÇ Estado da sala ${roomId}: ${isCollapsed ? 'recolhida' : 'expandida'}`);

    if (isCollapsed) {
        content.classList.remove("collapsed");
        minimizer.textContent = "‚àí";
        console.log(`üìÇ Sala ${roomId} EXPANDIDA`);
    } else {
        content.classList.add("collapsed");
        minimizer.textContent = "+";
        console.log(`üìÅ Sala ${roomId} RECOLHIDA`);
    }
}

/**
 * Alterna a visibilidade de uma se√ß√£o
 * @param {string} sectionId - ID da se√ß√£o
 * @returns {void}
 * 
 * @example
 * toggleSection('materiais') // Alterna visibilidade da se√ß√£o de materiais
 */
function toggleSection(sectionId) {
    // ‚úÖ CORRE√á√ÉO: Validar ID
    if (!sectionId || sectionId === 'undefined' || sectionId === 'null') {
        console.error(`ERRO FALBACK (toggleSection) interface.js [ID de se√ß√£o inv√°lido: ${sectionId}]`);
        return;
    }
    toggleElementVisibility(`section-content-${sectionId}`, event.target);
}

/**
 * Alterna a visibilidade de uma subse√ß√£o
 * @param {string} subsectionId - ID da subse√ß√£o
 * @returns {void}
 * 
 * @example
 * toggleSubsection('pintura') // Alterna visibilidade da subse√ß√£o de pintura
 */
function toggleSubsection(subsectionId) {
    // ‚úÖ CORRE√á√ÉO: Validar ID
    if (!subsectionId || subsectionId === 'undefined' || subsectionId === 'null') {
        console.error(`ERRO FALBACK (toggleSubsection) interface.js [ID de subse√ß√£o inv√°lido: ${subsectionId}]`);
        return;
    }
    toggleElementVisibility(`subsection-content-${subsectionId}`, event.target);
}

// =============================================================================
// FUN√á√ïES DE DOWNLOAD E SALVAMENTO
// =============================================================================

/**
 * Gera e inicia o download de um PDF para uma obra ou projeto espec√≠fico
 * @param {string} obraId - ID da obra
 * @param {string|null} projectName - Nome do projeto (opcional)
 * @returns {void}
 * 
 * @example
 * downloadPDF('obra_a64') // Gera PDF para a obra com ID obra_a64
 * downloadPDF('obra_a64', 'ProjetoA') // Gera PDF para o ProjetoA da obra
 */
function downloadPDF(obraId, projectName = null) {
    // ‚úÖ CORRE√á√ÉO: Buscar obra por ID em vez de nome
    const obraBlock = document.querySelector(`[data-obra-id="${obraId}"]`);
    if (!obraBlock) {
        console.error(`‚ùå Obra com ID "${obraId}" n√£o encontrada para PDF`);
        showSystemStatus(`ERRO: Obra n√£o encontrada`, "error");
        return;
    }

    const obraName = obraBlock.dataset.obraName;
    const target = projectName ? `projeto ${projectName} da obra ${obraName}` : `obra ${obraName}`;
    
    console.log(`üìÑ Gerando PDF para ${target} (ID: ${obraId})`);
    showSystemStatus(`Gerando PDF para ${target}...`, "info");
    
    // ‚úÖ Aqui voc√™ implementaria a gera√ß√£o real do PDF
    // generatePDF(obraId, projectName);
}

/**
 * Gera e inicia o download de um documento Word para uma obra ou projeto espec√≠fico
 * @param {string} obraId - ID da obra
 * @param {string|null} projectName - Nome do projeto (opcional)
 * @returns {void}
 * 
 * @example
 * downloadWord('obra_a64') // Gera Word para a obra com ID obra_a64
 * downloadWord('obra_a64', 'ProjetoA') // Gera Word para o ProjetoA da obra
 */
function downloadWord(obraId, projectName = null) {
    // ‚úÖ CORRE√á√ÉO: Buscar obra por ID em vez de nome
    const obraBlock = document.querySelector(`[data-obra-id="${obraId}"]`);
    if (!obraBlock) {
        console.error(`‚ùå Obra com ID "${obraId}" n√£o encontrada para Word`);
        showSystemStatus(`ERRO: Obra n√£o encontrada`, "error");
        return;
    }

    const obraName = obraBlock.dataset.obraName;
    const target = projectName ? `projeto ${projectName} da obra ${obraName}` : `obra ${obraName}`;
    
    console.log(`üìù Gerando Word para ${target} (ID: ${obraId})`);
    showSystemStatus(`Gerando documento Word para ${target}...`, "info");
    
    // ‚úÖ Aqui voc√™ implementaria a gera√ß√£o real do Word
    // generateWord(obraId, projectName);
}

/**
 * Salva ou atualiza os dados de uma obra no sistema
 * @param {string} obraName - Nome da obra a ser salva/atualizada
 * @param {Event} event - Evento que triggered a a√ß√£o
 * @returns {void}
 * 
 * @example
 * saveOrUpdateObra('Obra1', event) // Salva/atualiza a Obra1
 */
function saveOrUpdateObra(obraParam, event) {
    if (event) {
        event.preventDefault();
        event.stopPropagation();
    }

    console.log(`üíæ SALVANDO/ATUALIZANDO OBRA pelo par√¢metro: "${obraParam}"`);

    // ‚úÖ CORRE√á√ÉO: Converter automaticamente nome para ID
    let obraId = obraParam;
    
    // Se for nome (n√£o come√ßa com "obra_" e n√£o √© num√©rico)
    if (!obraParam.startsWith('obra_') && !/^\d+$/.test(obraParam)) {
        console.warn(`‚ö†Ô∏è  Par√¢metro "${obraParam}" parece ser um nome, convertendo para ID...`);
        
        // Busca ALL obras com este nome
        const obrasComEsteNome = Array.from(document.querySelectorAll('[data-obra-id]'))
            .filter(obra => obra.dataset.obraName === obraParam);
            
        if (obrasComEsteNome.length === 1) {
            obraId = obrasComEsteNome[0].dataset.obraId;
            console.log(`‚úÖ Convertido nome "${obraParam}" ‚Üí ID "${obraId}"`);
        } else if (obrasComEsteNome.length > 1) {
            console.error(`‚ùå M√∫ltiplas obras com nome "${obraParam}", usando a primeira`);
            obraId = obrasComEsteNome[0].dataset.obraId;
        } else {
            console.error(`‚ùå Nenhuma obra encontrada com nome "${obraParam}"`);
            showSystemStatus(`ERRO: Obra "${obraParam}" n√£o encontrada`, "error");
            return;
        }
    }

    // Agora busca pelo ID corrigido
    const obraBlock = document.querySelector(`[data-obra-id="${obraId}"]`);
    
    if (!obraBlock) {
        console.error(`‚ùå ERRO: Obra com ID "${obraId}" n√£o encontrada no DOM`);
        
        // Debug detalhado
        const availableObras = document.querySelectorAll('[data-obra-id]');
        console.log(`üîç Obras dispon√≠veis: ${availableObras.length}`);
        availableObras.forEach((obra, idx) => {
            console.log(`   ${idx + 1}. ID: "${obra.dataset.obraId}", Nome: "${obra.dataset.obraName}"`);
        });
        
        showSystemStatus(`ERRO: Obra n√£o encontrada`, "error");
        return;
    }

    console.log(`‚úÖ Obra encontrada:`, obraBlock.dataset);

    if (typeof window.saveObra === 'function') {
        // ‚úÖ Agora passa o ID correto para a fun√ß√£o interna
        window.saveObra(obraId, event);
    } else {
        console.error('‚ùå Fun√ß√£o saveObra n√£o encontrada');
        showSystemStatus("ERRO: Funcionalidade de salvar n√£o dispon√≠vel", "error");
    }
}

// =============================================================================
// FUN√á√ïES DE EDI√á√ÉO (COMPATIBILIDADE)
// =============================================================================

/**
 * Torna um elemento edit√°vel - FUN√á√ÉO DE COMPATIBILIDADE
 * @param {HTMLElement} element - Elemento a ser editado
 * @param {string} type - Tipo do elemento ('obra', 'project', 'room')
 * @returns {void}
 */
function makeEditable(element, type) {
    console.log(`‚úèÔ∏è Tornando ${type} edit√°vel:`, element);
    // Implementa√ß√£o b√°sica - pode ser expandida conforme necess√°rio
    if (element.isContentEditable) {
        element.contentEditable = false;
        element.blur();
    } else {
        element.contentEditable = true;
        element.focus();
    }
}



// =============================================================================
// EXPORTA√á√ïES ADICIONAIS
// =============================================================================

export {
    addNewProject,
    toggleObra,
    toggleProject,
    toggleRoom,
    downloadPDF,
    downloadWord,
    saveOrUpdateObra,
    toggleSubsection,
    toggleSection,
    makeEditable,
}

// =============================================================================
// DISPONIBILIZA√á√ÉO GLOBAL DAS FUN√á√ïES
// =============================================================================

if (typeof window !== 'undefined') {
    window.addNewObra = addNewObra;
    window.addNewProjectToObra = addNewProjectToObra;
    window.toggleObra = toggleObra;
    window.toggleProject = toggleProject;
    window.toggleRoom = toggleRoom;
    window.toggleSubsection = toggleSubsection;
    window.toggleSection = toggleSection;
    window.getNextObraNumber = getNextObraNumber;
    window.deleteObra = deleteObra;
    window.saveOrUpdateObra = saveOrUpdateObra;
    window.downloadPDF = downloadPDF;
    window.downloadWord = downloadWord;
    window.addNewProject = addNewProject;
    window.createEmptyProject = createEmptyProject;
    window.makeEditable = makeEditable;
}
/**
 * =====================
 * Gerenciador de obras - obra-manager.js
 * SISTEMA CORRIGIDO COM IDs √öNICOS
 * =====================
 */

import { 
    showConfirmationModal, 
    undoDeletion,
    hideToast 
} from './modal/modal.js'

import { generateObraId } from '../../data/data-files/data-utils-core.js';
import {addNewProjectToObra} from './project-manager.js'


/**
 * Cria uma obra vazia na interface - CORRIGIDA
 * @param {string} obraName - Nome da obra
 * @param {string} obraId - ID da obra (opcional)
 */
async function createEmptyObra(obraName, obraId) {
    // ‚úÖ CORRE√á√ÉO: SEMPRE usar ID √∫nico, mesmo se fornecido (para consist√™ncia)
    const finalObraId = obraId || generateObraId();
    const obraHTML = buildObraHTML(obraName, finalObraId);
    
    console.log(`üèóÔ∏è Criando obra: ${obraName} com ID: ${finalObraId}`);
    console.log(`üìù HTML gerado:`, obraHTML.substring(0, 200) + '...');
    
    // ‚úÖ‚úÖ‚úÖ CORRE√á√ÉO CR√çTICA: Inserir no DOM e CONFIRMAR
    const inserted = await insertObraIntoDOM(obraHTML, finalObraId);
    
    if (inserted) {
        console.log(`‚úÖ Obra ${obraName} criada e INSERIDA NO DOM - ID: ${finalObraId}`);
        
        // ‚úÖ CONFIRMA√á√ÉO: Verificar se realmente est√° no DOM
        setTimeout(() => {
            const obraNoDOM = document.querySelector(`[data-obra-id="${finalObraId}"]`);
            if (obraNoDOM) {
                console.log(`‚úÖ CONFIRMADO: Obra ${finalObraId} encontrada no DOM`);
            } else {
                console.error(`‚ùå FALHA CR√çTICA: Obra ${finalObraId} N√ÉO est√° no DOM ap√≥s cria√ß√£o`);
            }
        }, 100);
    } else {
        console.error(`‚ùå FALHA: Obra ${obraName} N√ÉO FOI INSERIDA NO DOM`);
    }
    
    return inserted;
}
/**
 * Constr√≥i o HTML de uma obra
 * @param {string} obraName - Nome da obra
 * @param {string} obraId - ID √∫nico da obra
 * @returns {string} HTML da obra
 */
function buildObraHTML(obraName, obraId) {
  // ‚úÖ CORRE√á√ÉO: Validar ID √∫nico
  if (!obraId || obraId === 'undefined' || obraId === 'null') {
      console.error(`ERRO FALBACK (buildObraHTML) obra-manager.js [ID de obra inv√°lido: ${obraId}]`);
      obraId = generateObraId();
  }
  
  console.log(`üîç Build Obra HTML: ${obraName}, ID: ${obraId}`);

  return `
  <div class="obra-block" data-obra-id="${obraId}" data-obra-name="${obraName}">
    <div class="obra-header">
      <button class="minimizer" onclick="toggleObra('${obraId}', event)">+</button>
      <h2 class="obra-title compact-title editable-title" data-editable="true" onclick="makeEditable(this, 'obra')">${obraName}</h2>
      <div class="obra-header-spacer"><span>Adicionar campos de cadastro de empresas</span></div>
      <div class="obra-actions">
        <button class="btn btn-delete" onclick="window.deleteObra('${obraName}', '${obraId}')">Remover Obra</button>
      </div>
    </div>

    
    <div class="obra-content collapsed" id="obra-content-${obraId}">
      <div class="projetc-header-record very-dark">
          <span>Adicionar campos de cadastro de empresas</span>
      </div>
      <div class="projects-container" id="projects-${obraId}">

      </div>
      <div class="add-project-section">
        <button class="btn btn-add-secondary" onclick="addNewProjectToObra('${obraId}')">+ Adicionar Projeto</button>
      </div>
      ${buildObraActionsFooter(obraId, obraName, false)} 
    </div>
  </div>
  `;
}

/**
 * Constr√≥i o rodap√© de a√ß√µes da obra
 * @param {string} obraName - Nome da obra
 * @param {boolean} hasId - Se a obra j√° foi SALVA no servidor
 * @returns {string} HTML do rodap√© de a√ß√µes
 */
function buildObraActionsFooter(obraId, obraName, hasId = false) {
  const buttonText = hasId ? "Atualizar Obra" : "Salvar Obra";
  const buttonClass = hasId ? "btn-update" : "btn-save";

  console.log(`üîß Build Obra Footer: ${obraName}, ID: ${obraId}, HasId: ${hasId}, Button: ${buttonText}`);

  // ‚úÖ CORRE√á√ÉO: Usar obraId em TODAS as chamadas
  return `
    <div class="obra-actions-footer">
      <button class="btn btn-verify" onclick="verifyObraData('${obraId}')">Verificar Dados</button>
      <button class="btn ${buttonClass}" onclick="event.preventDefault(); saveOrUpdateObra('${obraId}')">${buttonText}</button>      
      <button class="btn btn-download" onclick="downloadPDF('${obraId}')">Baixar PDF</button>
      <button class="btn btn-download" onclick="downloadWord('${obraId}')">Baixar Word</button>
    </div>
  `;
}

/**
 * Insere o HTML da obra no DOM - CORRIGIDA
 * @param {string} obraHTML - HTML da obra a ser inserida
 * @param {string} obraId - ID da obra para debug
 * @returns {boolean} True se inserido com sucesso
 */
async function insertObraIntoDOM(obraHTML, obraId) {
    console.log(`üì§ Inserindo obra no DOM: ${obraId}`);
    
    const projectsContainer = document.getElementById("projects-container");
    
    if (!projectsContainer) {
        console.error('‚ùå Container de projetos n√£o encontrado');
        
        // ‚úÖ FALLBACK: Tentar criar o container
        console.log('üîÑ Tentando criar projects-container...');
        const mainContent = document.querySelector('main, body');
        if (mainContent) {
            const newContainer = document.createElement('div');
            newContainer.id = 'projects-container';
            newContainer.innerHTML = '<!-- Hierarquia: Obra ‚Üí Projeto ‚Üí Sala -->';
            mainContent.appendChild(newContainer);
            console.log('‚úÖ projects-container criado');
            return insertObraIntoDOM(obraHTML, obraId); // Tentar novamente
        }
        
        return false;
    }
    
    console.log(`‚úÖ Container encontrado, inserindo obra ${obraId}...`);
    console.log(`üì¶ Container antes:`, projectsContainer.children.length, 'elementos');
    
    try {
        projectsContainer.insertAdjacentHTML("beforeend", obraHTML);
        
        // ‚úÖ CONFIRMAR inser√ß√£o
        setTimeout(() => {
            const obraInserida = document.querySelector(`[data-obra-id="${obraId}"]`);
            if (obraInserida) {
                console.log(`‚úÖ Obra ${obraId} INSERIDA COM SUCESSO no container`);
                console.log(`üì¶ Container depois:`, projectsContainer.children.length, 'elementos');
            } else {
                console.error(`‚ùå FALHA: Obra ${obraId} N√ÉO FOI INSERIDA no container`);
            }
        }, 50);
        
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao inserir obra no DOM:', error);
        return false;
    }
}

/**
 * Atualiza o bot√£o de uma obra ap√≥s salvamento - CORRIGIDA (APENAS ID)
 * @param {string} obraName - Nome da obra
 * @param {string} obraId - ID da obra salva
 */
function updateObraButtonAfterSave(obraName, obraId) {
    console.log(`üîÑ Atualizando bot√£o da obra: ${obraName} (${obraId})`);
    
    // ‚úÖ BUSCAR APENAS POR ID √öNICO
    const obraBlock = document.querySelector(`[data-obra-id="${obraId}"]`);
    if (!obraBlock) {
        console.error(`‚ùå Obra com ID ${obraId} n√£o encontrada para atualizar bot√£o`);
        return; // ‚ùå NUNCA tentar buscar por nome
    }

    // ‚úÖ ATUALIZAR ID NO DATASET (para garantir consist√™ncia)
    obraBlock.dataset.obraId = obraId;

    // ‚úÖ BUSCAR CONTE√öDO DA OBRA APENAS POR ID
    const obraContent = document.getElementById(`obra-content-${obraId}`);
    if (!obraContent) {
        console.error(`‚ùå Conte√∫do da obra ${obraId} n√£o encontrado`);
        return;
    }

    // ‚úÖ BUSCAR RODAP√â APENAS DENTRO DA OBRA ESPEC√çFICA
    const oldFooter = obraContent.querySelector('.obra-actions-footer');
    if (!oldFooter) {
        console.error(`‚ùå Rodap√© n√£o encontrado na obra ${obraId}`);
        return;
    }

    // ‚úÖ CORRE√á√ÉO CR√çTICA: Atualizar APENAS o bot√£o, preservando o container de projetos
    const saveButton = oldFooter.querySelector('.btn-save, .btn-update');
    if (saveButton) {
        saveButton.textContent = "Atualizar Obra";
        saveButton.className = "btn btn-update";
        saveButton.setAttribute('onclick', `event.preventDefault(); saveOrUpdateObra('${obraId}')`);
        console.log(`‚úÖ Bot√£o atualizado para: "Atualizar Obra" (ID: ${obraId})`);
    } else {
        console.error(`‚ùå Bot√£o de salvar n√£o encontrado na obra ${obraId}`);
    }

    // ‚úÖ VERIFICAR se o container de projetos ainda existe (apenas por ID)
    const projectsContainer = document.getElementById(`projects-${obraId}`);
    if (!projectsContainer) {
        console.error(`‚ùå CR√çTICO: Container de projetos PERDIDO na obra ${obraId}!`);
    }
}

/**
 * Fun√ß√£o principal de deletar obra (ATUALIZADA)
 */
async function deleteObra(obraName, obraId) {
  // ‚úÖ CORRE√á√ÉO: Buscar APENAS por ID √∫nico
  const obraBlock = document.querySelector(`[data-obra-id="${obraId}"]`)
  if (!obraBlock) {
    console.error(`‚ùå Obra com ID ${obraId} n√£o encontrada`)
    return
  }

  // Mostra o modal personalizado em vez do confirm b√°sico
  showConfirmationModal(obraName, obraId, obraBlock)
}

/**
 * Obt√©m o pr√≥ximo n√∫mero de obra
 * @returns {number} Pr√≥ximo n√∫mero dispon√≠vel para obra
 */
function getNextObraNumber() {
  const obraBlocks = document.querySelectorAll('.obra-block')
  const obraNumbers = Array.from(obraBlocks).map(obra => {
    const obraName = obra.dataset.obraName
    const match = obraName.match(/Obra(\d+)/)
    return match ? parseInt(match[1]) : 0
  })

  const maxNumber = Math.max(0, ...obraNumbers)
  return maxNumber + 1
}

/**
 * Adiciona uma nova obra √† interface
 */
async function addNewObra() {
  try {
    const obraNumber = getNextObraNumber();
    const obraName = `Obra${obraNumber}`;
    
    // ‚úÖ CORRE√á√ÉO: Gerar ID √∫nico para nova obra
    const obraId = generateObraId();

    console.log(`üèóÔ∏è Criando nova obra: ${obraName} com ID: ${obraId}`);
    createEmptyObra(obraName, obraId);
    console.log(`‚úÖ ${obraName} adicionada com ID √∫nico: ${obraId}`);

    // ‚úÖ‚úÖ‚úÖ AGUARDAR um pouco para o DOM ser atualizado antes de criar projeto
    setTimeout(async () => {
        console.log(`üîÑ Criando projeto e sala autom√°ticos para ${obraName}`);
        if (typeof window.addNewProjectToObra === 'function') {
            await window.addNewProjectToObra(obraId);
            console.log(`‚úÖ Projeto e sala autom√°ticos criados para ${obraName}`);
        } else {
            console.error('‚ùå addNewProjectToObra n√£o dispon√≠vel');
        }
    }, 500);

  } catch (error) {
    console.error("‚ùå Erro ao adicionar nova obra:", error);
    alert("Erro ao criar nova obra. Verifique o console para detalhes.");
  }
}




// ===== EXPORTA√á√ïES E CONFIGURA√á√ÉO GLOBAL =====

// Torne as fun√ß√µes globais para o HTML poder acessar
window.deleteObra = deleteObra
window.addNewObra = addNewObra
window.undoDeletion = undoDeletion
window.hideToast = hideToast

// Exporta√ß√µes para m√≥dulos
export {
    createEmptyObra,
    buildObraHTML,
    buildObraActionsFooter,
    insertObraIntoDOM,
    updateObraButtonAfterSave,
    deleteObra,
    getNextObraNumber,
    addNewObra,
    generateObraId
}
// projects.js
import { ensureStringId } from "../utils/utils.js"
import { buildObraData } from "./data-utils.js"
import { showSystemStatus} from '../ui/intr-files/status-manager.js'
import{ updateObraButtonAfterSave } from "../ui/intr-files/obra-manager.js"
import { isSessionActive, startSessionOnFirstSave } from "./server.js";

/**
 * Busca todas as obras do servidor
 * @returns {Promise<Array>} Lista de obras
 */
async function fetchObras() {
  try {
    const response = await fetch('/obras')

    if (!response.ok) {
      // Se o endpoint n√£o existir, retorna array vazio (para obras novas)
      if (response.status === 404) {
        return [];
      }
      throw new Error(`Erro HTTP: ${response.status}`)
    }

    const obras = await response.json()
    return obras || [];
  } catch (error) {
    console.error("‚ùå Erro ao buscar obras:", error)

    // Em caso de erro, assumir que n√£o h√° obras (para desenvolvimento)
    return [];
  }
}

/**
 * Atualiza uma obra existente no servidor
 * @param {string|number} obraId - ID da obra
 * @param {Object} obraData - Dados atualizados da obra
 * @returns {Promise<Object|null>} Obra atualizada ou null em caso de erro
 */
async function atualizarObra(obraId, obraData) {
  try {
    // ‚úÖ CORRE√á√ÉO: Validar ID seguro antes de processar
    if (!obraId || obraId === 'undefined' || obraId === 'null') {
      console.error(`ERRO FALBACK (atualizarObra) projects.js [ID de obra inv√°lido: ${obraId}]`);
      showSystemStatus("ERRO: ID da obra inv√°lido para atualiza√ß√£o", "error");
      return null;
    }

    // S√≥ atualizar se sess√£o estiver ativa
    if (!isSessionActive()) {
      console.warn("‚ö†Ô∏è Sess√£o n√£o est√° ativa - obra n√£o ser√° atualizada");
      showSystemStatus("ERRO: Sess√£o n√£o est√° ativa. Obra n√£o atualizada.", "error");
      return null;
    }

    obraId = ensureStringId(obraId);

    console.log(`üîç Verificando se obra ${obraId} existe no servidor...`);
    
    // Buscar TODAS as obras usando o novo endpoint
    const todasObrasResponse = await fetch('/api/backup-completo');
    if (!todasObrasResponse.ok) {
      throw new Error('Falha ao carregar backup para verifica√ß√£o');
    }
    
    const backupData = await todasObrasResponse.json();
    const todasObras = backupData.obras || [];
    const obraExistente = todasObras.find(obra => String(obra.id) === String(obraId));
    
    console.log(`üìä Verifica√ß√£o: Obra ${obraId} existe? ${!!obraExistente}`);
    console.log(`üìã TODAS as obras no backup:`, todasObras.map(o => ({ id: o.id, nome: o.nome })));

    if (!obraExistente) {
      console.log(`‚ùå Obra ${obraId} n√£o encontrada no backup, criando nova...`);

      // ‚úÖ CORRE√á√ÉO: Se obra n√£o existe, criar como nova preservando ID seguro
      console.log(`üÜï Criando nova obra com ID seguro preservado: ${obraId}`);
      obraData.id = obraId; // ‚úÖ PRESERVAR ID SEGUR
      return await salvarObra(obraData);
    }

    // ‚úÖ CORRE√á√ÉO: Garantir que o ID nos dados seja o correto (j√° est√° correto)
    console.log('üîÑ ATUALIZANDO OBRA EXISTENTE:', {
      id: obraData.id,
      nome: obraData.nome,
      projetos: obraData.projetos?.length || 0
    });

    // Usar PUT para /obras/{id}
    const url = `/obras/${obraId}`;
    console.log(`üéØ Fazendo PUT para: ${url}`);
    
    const response = await fetch(url, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(obraData),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Erro ao atualizar obra: ${errorText}`);
    }

    const updatedObra = await response.json();
    showSystemStatus("Obra atualizada com sucesso!", "success");
    
    console.log('‚úÖ OBRA ATUALIZADA:', {
      id: updatedObra.id,
      nome: updatedObra.nome,
      projetos: updatedObra.projetos?.length || 0
    });
    return updatedObra;
  } catch (error) {
    console.error("‚ùå Erro ao ATUALIZAR obra:", error);
    showSystemStatus("ERRO: N√£o foi poss√≠vel atualizar a obra", "error");
    return null;
  }
}

/**
 * Salva uma nova obra no servidor e adiciona √† sess√£o atual
 * @param {Object} obraData - Dados da obra a ser salva
 * @returns {Promise<Object|null>} Obra criada ou null em caso de erro
 */
async function salvarObra(obraData) {
  try {
    // ‚úÖ CORRE√á√ÉO: Validar dados da obra antes de salvar
    if (!obraData || !obraData.nome) {
      console.error(`ERRO FALBACK (salvarObra) projects.js [Dados da obra inv√°lidos: ${JSON.stringify(obraData)}]`);
      showSystemStatus("ERRO: Dados da obra inv√°lidos", "error");
      return null;
    }

    // S√≥ salvar se sess√£o estiver ativa
    if (!isSessionActive()) {
      console.warn("‚ö†Ô∏è Sess√£o n√£o est√° ativa - obra n√£o ser√° salva");
      showSystemStatus("ERRO: Sess√£o n√£o est√° ativa. Obra n√£o salva.", "error");
      return null;
    }

    // ‚úÖ CORRE√á√ÉO: Garantir que obra tenha ID seguro
    if (!obraData.id || obraData.id === 'undefined' || obraData.id === 'null') {
      console.error(`ERRO FALBACK (salvarObra) projects.js [Obra sem ID seguro: ${obraData.id}]`);
      showSystemStatus("ERRO: Obra n√£o possui ID v√°lido", "error");
      return null;
    }

    console.log('üì§ SALVANDO NOVA OBRA:', {
      id: obraData.id,
      nome: obraData.nome,
      projetos: obraData.projetos?.length || 0,
      timestamp: obraData.timestamp
    });

    // Sempre usar POST para nova obra
    const response = await fetch('/obras', {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(obraData),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Erro ao salvar obra: ${errorText}`);
    }

    const createdObra = await response.json();
    
    // Adicionar obra √† sess√£o
    console.log(`üìù Adicionando obra ${createdObra.id} √† sess√£o...`);
    await fetch('/api/sessions/add-obra', {
      method: 'POST',
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ obra_id: createdObra.id })
    });
    
    showSystemStatus("Obra salva com sucesso!", "success");
    
    console.log('‚úÖ NOVA OBRA SALVA E ADICIONADA √Ä SESS√ÉO:', {
      id: createdObra.id,
      nome: createdObra.nome,
      projetos: createdObra.projetos?.length || 0
    });
    return createdObra;
  } catch (error) {
    console.error("‚ùå Erro ao SALVAR obra:", error);
    showSystemStatus("ERRO: N√£o foi poss√≠vel salvar a obra", "error");
    return null;
  }
}


/**
 * Encontra o elemento HTML de uma obra pelo ID
 * @param {string} obraId - ID da obra a ser encontrada
 * @returns {HTMLElement|null} Elemento da obra ou null se n√£o encontrado
 */
function findObraBlock(obraId) {
    console.log(`üîç Buscando obra pelo ID: "${obraId}"`);
    
    // ‚úÖ CORRE√á√ÉO: Buscar APENAS por ID √∫nico
    // 1. Tentar pelo ID exato (mais espec√≠fico)
    let obraBlock = document.querySelector(`[data-obra-id="${obraId}"]`);
    if (obraBlock) {
        console.log(`‚úÖ Obra encontrada por ID exato: "${obraId}"`);
        return obraBlock;
    }
    
    
    // 3. Listar todas as obras dispon√≠veis para debug
    const todasObras = document.querySelectorAll('[data-obra-id]');
    console.log(`üìã Obras encontradas no DOM: ${todasObras.length}`);
    
    todasObras.forEach((obra, index) => {
        console.log(`  ${index + 1}.`, {
            id: obra.dataset.obraId,
            name: obra.dataset.obraName,
            classes: obra.className
        });
    });
    
    // ‚ùå REMOVIDO: NUNCA retornar obra errada como fallback
    console.log(`‚ùå Obra com ID "${obraId}" n√£o encontrada no DOM`);
    return null;
}


/**
 * Aguarda at√© que um elemento esteja dispon√≠vel no DOM
 * @param {string} selector - Seletor do elemento
 * @param {number} timeout - Timeout em milissegundos
 * @returns {Promise<HTMLElement>}
 */
function waitForElement(selector, timeout = 3000) {
    return new Promise((resolve, reject) => {
        const startTime = Date.now();
        
        function check() {
            const element = document.querySelector(selector);
            if (element) {
                console.log(`‚úÖ Elemento encontrado: ${selector}`);
                resolve(element);
                return;
            }
            
            if (Date.now() - startTime > timeout) {
                reject(new Error(`Timeout: Elemento n√£o encontrado - ${selector}`));
                return;
            }
            
            setTimeout(check, 100);
        }
        
        check();
    });
}

/**
 * Verifica se uma obra existe no DOM com retry
 * @param {string} obraId - ID da obra
 * @param {number} maxAttempts - N√∫mero m√°ximo de tentativas
 * @returns {Promise<HTMLElement|null>}
 */
async function findObraBlockWithRetry(obraId, maxAttempts = 10) {
    console.log(`üîç Buscando obra com retry: "${obraId}"`);
    
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
        const obraBlock = document.querySelector(`[data-obra-id="${obraId}"]`);
        
        if (obraBlock) {
            console.log(`‚úÖ Obra encontrada na tentativa ${attempt}/${maxAttempts}`);
            return obraBlock;
        }
        
        console.log(`‚è≥ Tentativa ${attempt}/${maxAttempts} - obra n√£o encontrada, aguardando...`);
        
        if (attempt < maxAttempts) {
            await new Promise(resolve => setTimeout(resolve, 200));
        }
    }
    
    console.log(`‚ùå Obra n√£o encontrada ap√≥s ${maxAttempts} tentativas`);
    return null;
}


/**
 * Salva ou atualiza uma obra no servidor (fun√ß√£o principal)
 * @param {string} obraId - ID da obra
 * @param {Event} event - Evento do clique
 * @returns {Promise<void>}
 */
async function saveObra(obraId, event) {
    if (event) {
        event.preventDefault();
        event.stopPropagation();
    }

    console.log(`üíæ SALVANDO OBRA pelo ID: "${obraId}"`);

    // ‚úÖ CORRE√á√ÉO 1: AGUARDAR obra estar no DOM antes de qualquer opera√ß√£o
    console.log(`‚è≥ Aguardando obra "${obraId}" estar no DOM...`);
    
    let obraBlock = await findObraBlockWithRetry(obraId, 15);
    
    if (!obraBlock) {
        console.error('‚ùå Obra n√£o encontrada no DOM ap√≥s m√∫ltiplas tentativas:', obraId);
        
        // Debug detalhado
        const todasObras = document.querySelectorAll('[data-obra-id]');
        console.log('üìã Obras dispon√≠veis no DOM:', Array.from(todasObras).map(o => ({
            id: o.dataset.obraId,
            name: o.dataset.obraName
        })));
        
        showSystemStatus("ERRO: Obra n√£o encontrada na interface", "error");
        return;
    }

    // ‚úÖ CORRE√á√ÉO 2: Verificar se a sess√£o est√° ativa AP√ìS confirmar que a obra existe
    if (!isSessionActive()) {
        console.log("üÜï Iniciando sess√£o para primeira obra...");
        await startSessionOnFirstSave();
    }

    // Log para sess√£o ativa
    if (!isSessionActive()) {
        console.warn("‚ö†Ô∏è Sess√£o n√£o est√° ativa - obra n√£o ser√° salva");
        showSystemStatus("ERRO: Sess√£o n√£o est√° ativa. Obra n√£o salva.", "error");
        return;
    }

    console.log('‚úÖ Obra confirmada no DOM:', {
        element: obraBlock,
        dataset: obraBlock.dataset,
        id: obraBlock.dataset.obraId,
        name: obraBlock.dataset.obraName
    });

    console.log('üî® Construindo dados da obra...');
    const obraData = buildObraData(obraBlock);

    if (!obraData) {
        console.error('‚ùå Falha ao construir dados da obra');
        showSystemStatus("ERRO: Falha ao construir dados da obra", "error");
        return;
    }

    // ‚úÖ CORRE√á√ÉO 3: L√≥gica MELHORADA para determinar se √© nova obra
    const obraIdFromDOM = obraBlock.dataset.obraId;
    const obraIdFromData = obraData.id;
    
    // ‚úÖ VERIFICA√á√ÉO MAIS ROBUSTA - usar o ID que veio do DOM como fonte da verdade
    const finalObraId = obraIdFromDOM || obraIdFromData;
    
    console.log('üîç VERIFICA√á√ÉO DE OBRA MELHORADA:');
    console.log('- ID no DOM:', obraIdFromDOM);
    console.log('- ID nos dados:', obraIdFromData);
    console.log('- ID final para uso:', finalObraId);
    console.log('- √â ID seguro?:', finalObraId?.startsWith('obra_'));
    
    // ‚úÖ CORRE√á√ÉO: Determinar se √© nova obra baseado na presen√ßa no servidor
    let isNewObra = true; // Assume que √© nova por padr√£o
    
    try {
        // Verificar se a obra j√° existe no servidor
        const todasObrasResponse = await fetch('/api/backup-completo');
        if (todasObrasResponse.ok) {
            const backupData = await todasObrasResponse.json();
            const todasObras = backupData.obras || [];
            const obraExistente = todasObras.find(obra => String(obra.id) === String(finalObraId));
            
            isNewObra = !obraExistente;
            console.log(`- J√° existe no servidor?: ${!isNewObra}`);
        }
    } catch (error) {
        console.log('- N√£o foi poss√≠vel verificar servidor, assumindo como nova obra');
    }

    console.log('- √â nova obra?:', isNewObra);

    let result = null;
    
    if (isNewObra) {
        console.log('üÜï SALVANDO COMO NOVA OBRA COM ID SEGURO:', finalObraId);
        
        // ‚úÖ CORRE√á√ÉO: Garantir que obraData tenha o ID correto
        obraData.id = finalObraId;
        
        if (!obraData.id || !obraData.id.startsWith('obra_')) {
            console.error('‚ùå Obra n√£o possui ID seguro v√°lido para salvar');
            showSystemStatus("ERRO: Obra n√£o possui ID v√°lido", "error");
            return;
        }
        
        result = await salvarObra(obraData);
    } else {
        console.log('üìù ATUALIZANDO OBRA EXISTENTE, ID SEGURO:', finalObraId);
        
        // ‚úÖ CORRE√á√ÉO: Validar ID seguro antes de atualizar
        if (!finalObraId.startsWith('obra_')) {
            console.error(`ERRO: ID n√£o seguro para atualiza√ß√£o: ${finalObraId}`);
            showSystemStatus("ERRO: ID da obra inv√°lido para atualiza√ß√£o", "error");
            return;
        }
        
        result = await atualizarObra(finalObraId, obraData);
    }

    if (result) {
        const finalId = ensureStringId(result.id);
        
        // ‚úÖ CORRE√á√ÉO: Atualizar DOM com o ID seguro correto
        obraBlock.dataset.obraId = finalId;
        obraBlock.dataset.obraName = obraData.nome;
        
        // Atualizar t√≠tulo se necess√°rio
        const titleElement = obraBlock.querySelector('.obra-title');
        if (titleElement && titleElement.textContent !== obraData.nome) {
            titleElement.textContent = obraData.nome;
        }

        if (typeof updateObraButtonAfterSave === 'function') {
            console.info("Setpoint informa√ß√£o chegando at√© aqui")
            updateObraButtonAfterSave(obraData.nome, finalId);
        }

        console.log(`‚úÖ OBRA SALVA/ATUALIZADA COM SUCESSO! ID SEGURO: ${finalId}`);
        
        showSystemStatus("Obra salva com sucesso!", "success");
    } else {
        console.error('‚ùå FALHA AO SALVAR OBRA NO SERVIDOR');
        showSystemStatus("ERRO: Falha ao salvar obra no servidor", "error");
    }
}


/**
 * Deleta uma obra do servidor
 * @param {string} obraName - Nome da obra
 * @param {string} obraId - ID da obra
 * @returns {Promise<void>}
 */
async function deleteObraFromServer(obraName, obraId) {
  try {
    // ‚úÖ CORRE√á√ÉO: Validar ID seguro antes de deletar
    if (!obraId || obraId === 'undefined' || obraId === 'null' || !obraId.startsWith('obra_')) {
      console.error(`ERRO FALBACK (deleteObraFromServer) projects.js [ID de obra inv√°lido: ${obraId}]`);
      showSystemStatus("ERRO: ID da obra inv√°lido para remo√ß√£o", "error");
      return;
    }

    if (!isSessionActive()) {
      console.warn("‚ö†Ô∏è Sess√£o n√£o est√° ativa - obra n√£o ser√° removida do servidor");
      return;
    }

    obraId = ensureStringId(obraId);

    console.log(`üóëÔ∏è Removendo obra ${obraId} do servidor...`);

    const response = await fetch(`/obras/${obraId}`, {
      method: "DELETE",
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Erro ao remover obra: ${errorText}`);
    }

    console.log(`‚úÖ Obra ${obraId} removida do servidor`);
    showSystemStatus("Obra removida do servidor com sucesso", "success");
  } catch (error) {
    console.error("‚ùå Erro ao remover obra do servidor:", error);
    showSystemStatus("ERRO: N√£o foi poss√≠vel remover a obra do servidor", "error");
  }
}

/**
 * Verifica os dados de uma obra e gera relat√≥rio de completude
 * @param {string} obraId - ID da obra
 * @returns {void}
 */
function verifyObraData(obraId) {
  const obraBlock = document.querySelector(`[data-obra-id="${obraId}"]`);
  if (!obraBlock) {
    console.error(`‚ùå Obra com ID "${obraId}" n√£o encontrada para verifica√ß√£o`);
    alert(`ERRO: Obra com ID "${obraId}" n√£o encontrada`);
    return;
  }

  const obraName = obraBlock.dataset.obraName;
  const projects = obraBlock.querySelectorAll(".project-block");
  let totalRooms = 0;
  
  let report = `Verifica√ß√£o da Obra "${obraName}" (ID: ${obraId}):\n\n`;
  report += `Total de projetos: ${projects.length}\n\n`;

  projects.forEach((project, index) => {
    const projectName = project.dataset.projectName;
    const rooms = project.querySelectorAll(".room-block");
    totalRooms += rooms.length;
    
    report += `Projeto ${index + 1}: ${projectName}\n`;
    report += `  - Salas: ${rooms.length}\n`;
    
    rooms.forEach((room, roomIndex) => {
      const roomName = room.querySelector(".room-title")?.textContent || `Sala ${roomIndex + 1}`;
      const stats = calculateRoomCompletionStats(room);
      report += `    - ${roomName}: ${stats.filled}/${stats.total} campos (${stats.percentage}%)\n`;
    });
    report += '\n';
  });

  report += `RESUMO: ${projects.length} projetos, ${totalRooms} salas`;

  console.log(`üîç Relat√≥rio gerado para obra: ${obraName} (ID: ${obraId})`);
  alert(report);
}

/**
 * Calcula estat√≠sticas de preenchimento de uma sala
 * @param {HTMLElement} room - Elemento da sala
 * @returns {Object} Estat√≠sticas de preenchimento
 */
function calculateRoomCompletionStats(room) {
  const inputs = room.querySelectorAll(".form-input, .clima-input");
  const filledInputs = Array.from(inputs).filter((input) => {
    if (input.type === 'checkbox' || input.type === 'radio') {
      return input.checked;
    }
    return input.value && input.value.trim() !== "";
  }).length;
  
  const totalInputs = inputs.length;
  const percentage = totalInputs > 0 ? ((filledInputs / totalInputs) * 100).toFixed(1) : 0;

  return {
    filled: filledInputs,
    total: totalInputs,
    percentage: percentage,
  };
}


// Exporta√ß√µes para compatibilidade
window.saveObra = saveObra;
window.verifyObraData = verifyObraData;

export {
  fetchObras,
  salvarObra,
  atualizarObra,
  saveObra,

  deleteObraFromServer,
  verifyObraData,
  calculateRoomCompletionStats,
  findObraBlock,
}
